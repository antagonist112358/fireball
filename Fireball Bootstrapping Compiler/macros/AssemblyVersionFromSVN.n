/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler;
using Nemerle.Imperative;
using Nemerle.Macros;
using Nemerle.Text;

using System;
using System.Globalization;
using System.IO;
using System.Text.RegularExpressions;
using System.Text;

namespace Nemerle.Utility
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance,
                       Nemerle.MacroTargets.Assembly)]
  macro AssemblyVersionFromSVN (val : string, fallbackToDate : bool = true)
  {
    def svnidx = val.IndexOf ("SVN", System.StringComparison.InvariantCultureIgnoreCase);
    def val =
      if (svnidx != -1) {
        def myLoc = Nemerle.Compiler.LocationStack.Top();
        def path = if (myLoc.IsSourceFileAvailable)
                     Path.GetDirectoryName (Path.GetFullPath (myLoc.File))
                   else
                     Directory.GetCurrentDirectory ();

        mutable svnrev = SVNRevisionHelper.FindRevision (path);
        when (svnrev < 0)
          svnrev = SVNRevisionHelper.GetRevisionGeneric (path);
        if (svnrev < 0)
          if (fallbackToDate)
            val.Substring (0, svnidx) +
            ((DateTime.Now.Year % 100).ToString () + DateTime.Now.DayOfYear.ToString ("000"))
            + val.Substring (svnidx + 3)
          else
            Message.FatalError (myLoc, $"could not obtain revision from SVN metadata (error code $(-svnrev))");
        else
          val.Substring (0, svnidx) + svnrev.ToString () + val.Substring (svnidx + 3)
      }
      else val;

    Nemerle.Macros.Manager().Hierarchy.AddAssemblyAttribute (Nemerle.Macros.Manager().CoreEnv,
      <[ System.Reflection.AssemblyVersion ($(val : string)) ]>);
  }

  /// based on svn://rsdn.ru/Janus/trunk/SvnRevision
  module SVNRevisionHelper
  {
    SVN_DIRECTORY_NAME_COMMON = ".svn";
    SVN_DIRECTORY_NAME_ALT = "_svn";
    SVN_ENTRIES_FILE_NAME = "entries";

    public FindRevision(current : string) : int
    {
      def dir = Path.Combine (current, SVN_DIRECTORY_NAME_COMMON);
      if (Directory.Exists (dir))
        GetRevisionDetectFormat (dir)
      else
      {
        def dir = Path.Combine (current, SVN_DIRECTORY_NAME_ALT);
        if (Directory.Exists (dir))
          GetRevisionDetectFormat (dir)
        else
          -1
      }
    }

    private GetRevisionDetectFormat ([NotNull] path : string) : int
    {
      def filePath = Path.Combine (path, SVN_ENTRIES_FILE_NAME);
      if (File.Exists (filePath))
        using (stream = FileStream (filePath, FileMode.Open, FileAccess.Read, FileShare.Read))
        using (reader = StreamReader(stream))
        {
          def firstLine = reader.ReadLine();
          match (firstLine.Trim())
          {
            | "8"
            | "9"
            | "10" => GetRevisionVer8(reader)
            | _   => -10
          }
        }
      else -9
    }

    private GetRevisionVer8(reader : StreamReader) : int
    {
      def loop (lineCounter) {
        def line = reader.ReadLine();
        if (line != null)
          if (lineCounter == 3)
            int.Parse(line, NumberStyles.Integer, CultureInfo.InvariantCulture)
          else
            loop (lineCounter + 1)
        else -5
      }
      loop (1); // first line is read
    }

    public GetRevisionGeneric (path : string) : int
    {
      // Execute "svn info --xml"
      def process = System.Diagnostics.Process ();
      process.StartInfo.UseShellExecute = false;
      process.StartInfo.FileName = "svn";
      process.StartInfo.Arguments = "info --xml";
      process.StartInfo.RedirectStandardOutput = true;
      process.StartInfo.WorkingDirectory = path;

      // Read svn output line by line until regex is matched
      def parse_revision(reader) : int {
        def pattern = @"<commit\s+revision\s*=\s*""(?<rev>\d+)""";
        def regex = System.Text.RegularExpressions.Regex (pattern);
        def contents = reader.ReadToEnd ();        
        def mc = regex.Match (contents);
        mutable revision;
        if (mc.Success && int.TryParse (mc.Groups["rev"].Value, out revision))
          revision;
        else
          -5;
      }

      try
      {
        _ = process.Start();

        def revision = parse_revision (process.StandardOutput);

        // Wait for svn client process to terminate
        unless (process.WaitForExit (2000))
          process.Kill ();

        revision;
      }
      catch
      {
        | _ => -4;
      }
    }
  }
}
