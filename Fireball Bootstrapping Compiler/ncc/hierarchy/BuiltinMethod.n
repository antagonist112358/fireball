/*
 * Copyright (c) 2005-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;

namespace Nemerle.Compiler
{
  class BuiltinWrapMethod : BuiltinMethod
  {
    _unwrappedMethod : IMethod;
    _parent          : TypeInfo;

    public this(parent          : TypeInfo,
                unwrappedMethod : IMethod,
                kind            : BuiltinMethodKind)
    {
      base(parent, unwrappedMethod, kind);

      _unwrappedMethod = unwrappedMethod;
      _parent          = parent;
    }

    public override GetHashCode() : int { _unwrappedMethod.GetHashCode() ^ _parent.GetHashCode() }
    public override Equals(other : object) : bool
    {
      match (other)
      {
        | other is this => other?._unwrappedMethod.Equals(_unwrappedMethod) && other?._parent.Equals(_parent)
        | _ => false
      }
    }
  }

  class BuiltinMethod : IMethod
  {
    id : int;
    [Nemerle.Utility.Accessor]
    protected header : TFunHeader;
    declaring : TypeInfo;
    special_kind : BuiltinMethodKind;
    public virtual  NameLocation : Location { get { Location.Default } }

    protected this (parent : TypeInfo,
                    kind : BuiltinMethodKind)
    {
      id = parent.Manager.GetNewId();
      declaring = parent;
      special_kind = kind;
    }

    protected this(parent          : TypeInfo,
                  unwrappedMethod : IMethod,
                  kind            : BuiltinMethodKind)
    {
      this(parent, kind);

      // наверно надо использовать уже имеющиеся типы из перегрузки, а не брать их из unwrappedMethod, 
      // так как типы могут быть без подстановки, а с этим могут быть проблемы.
      def convertParam(p : TParameter)
      {
        TParameter(name      = p.Name,
                   ty        = FixedType.Class(parent, [p.Type]),
                   color     = p.Color,
                   modifiers = p.AttributesAndModifiers,
                   kind      = p.Kind)
      }

      def head = unwrappedMethod.Header;
      header =
        TFunHeader(
           loc          = unwrappedMethod.Location,
           name         = unwrappedMethod.Name,
           ret_type     = FixedType.Class(parent, [head.ReturnType]),
           ret_type_loc = Location.Default,
           parms        = head.Parameters.Map(convertParam),
           typarms      = head.TypeParameters,
           tenv         = TypeVarEnv(DeclaringType.Manager));
    }

    internal this (parent : TypeInfo,
                   name : string,
                   on_type : TypeVar,
                   kind : BuiltinMethodKind)
    {
      this (parent, kind);

      def fp (name, ty) {
        TParameter(name      = name,
                   ty        = ty,
                   color     = declaring.Manager.MacroColors.Color,
                   modifiers = AttributesAndModifiers(),
                   kind      = ParmKind.Normal)
      }

      header =
        TFunHeader(
           loc          = parent.Location,
           name         = name,
           ret_type     = on_type,
           ret_type_loc = Location.Default,
           parms        = [fp ("left", on_type), fp ("right", on_type)],
           typarms      = [],
           tenv         = TypeVarEnv (DeclaringType.Manager));
    }

    internal this (parent   : TypeInfo,
                   name     : string,
                   on_type  : TypeVar,
                   ret_type : TypeVar,
                   kind     : BuiltinMethodKind)
    {
      this (parent, kind);

      def fp (name, ty)
      {
        TParameter(name      = name,
                   ty        = ty,
                   color     = declaring.Manager.MacroColors.Color,
                   modifiers = AttributesAndModifiers(),
                   kind      = ParmKind.Normal)
      }

      header =
        TFunHeader(
           loc          = parent.Location,
           name         = name,
           ret_type     = ret_type,
           ret_type_loc = Location.Default,
           parms        = [fp ("left", on_type), fp ("right", on_type)],
           typarms      = [],
           tenv         = TypeVarEnv (DeclaringType.Manager));
    }

    internal this(parent           : TypeInfo,
                  name             : string,
                  left_param_type  : TypeVar,
                  right_param_type : TypeVar,
                  ret_type         : TypeVar,
                  kind             : BuiltinMethodKind)
    {
      this (parent, kind);

      def fp (name, ty)
      {
        TParameter(name      = name,
                   ty        = ty,
                   color     = declaring.Manager.MacroColors.Color,
                   modifiers = AttributesAndModifiers(),
                   kind      = ParmKind.Normal)
      }

      header =
        TFunHeader(
           loc          = parent.Location,
           name         = name,
           ret_type     = ret_type,
           ret_type_loc = Location.Default,
           parms        = [fp("left", left_param_type), fp("right", right_param_type)],
           typarms      = [],
           tenv         = TypeVarEnv(DeclaringType.Manager));
    }

    public IsConstructor : bool { get { false } }

    public GetMemType () : FixedType.Fun
    {
      FixedType.ConstructFunctionType (GetHeader ())
    }

    public Location : Location
    {
      get { Nemerle.Compiler.Location.Default }
    }

    public override GetHashCode () : int
    {
      id
    }

    public GetHandle () : System.Reflection.MemberInfo
    {
      throw System.NotImplementedException()
    }
    public CanAccess(_memberTypeInfo : TypeInfo, _currentTypeInfo : TypeInfo, _isThisAccess : bool) : bool
    {
      true
    }
    public CanAccess (_ : TypeInfo) : bool
    {
      true
    }

    public GetFreshType () : FixedType * list [TypeVar]
    {
      (GetMemType (), [])
    }

    public GetHeader () : TFunHeader
    {
      header
    }

    public GetParameters() : list [TParameter] { header.Parameters }

    public ReturnType : TypeVar { get { header.ReturnType } }

    public GetMethodBase () : System.Reflection.MethodBase
    {
      throw System.NotImplementedException()
    }

    public GetMethodInfo () : System.Reflection.MethodInfo
    {
      throw System.NotImplementedException()
    }

    public GetConstructorInfo () : System.Reflection.ConstructorInfo
    {
      throw System.NotImplementedException()
    }

    public IsVarArgs : bool
    {
      get { false }
    }

    public IsFinal : bool
    {
      get { true }
    }

    public IsPrivate : bool   {      get { false }    }
    public IsAbstract : bool   {      get { false }    }
    public IsObsolete : bool
    {
      get { false }
    }

    public IsExtension : bool
    {
      mutable is_extension : bool;
      public   get { is_extension }
      internal set { is_extension = value }
    }

    public DeclaringType : TypeInfo
    {
      get { declaring }
    }

    public Name : string
    {
      get { header.Name }
    }

    public MemberKind : MemberKinds
    {
      get { MemberKinds.Method }
    }

    public virtual IsStatic : bool
    {
      get { true }
    }

    public HasBeenUsed : bool
    {
      get { true }
      set { ignore (value); }
    }

    public virtual Attributes : NemerleModifiers {
      get {
        NemerleModifiers.Static |
        NemerleModifiers.Public
      }
    }

    public IsConditional : bool { get { false } }

    public GetConditions() : list[string] { [] }

    public GetModifiers () : AttributesAndModifiers{ throw System.NotImplementedException() }

    public IsCustomAttributeDefined(_thisMethodNotImplemented : string) : bool
    {
      throw System.NotImplementedException()
    }

    public BuiltinKind : BuiltinMethodKind
    {
      get { special_kind }
    }

    public override ToString () : string
    {
      MemberBuilder.DescribeMember (this)
    }
  }
}
