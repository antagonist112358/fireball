/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  /// This class stores information extracted from a referenced external library.
  
  public partial class LibraryReference
  {
    internal class ExternalPrimitiveTypeInfo : ExternalTypeInfo 
    {
      mutable implicit_conversion : list [TypeInfo];
      is_longsize  : bool;
      [Accessor(flags=Override)] is_floating  : bool;
      [Accessor(flags=Override)] is_numeric   : bool;
      [Accessor(flags=Override)] size         : int;
      [Accessor(flags=Override)] unsigned     : bool;

      public override IsPrimitive : bool { get { true } }

      public this (lib : LibraryReference, h : System.Type, ns_node : NamespaceTree.Node)
      {
        base (lib, h, ns_node);
        
        is_longsize = false;
        is_numeric  = true;

        match (Name)
        {
          | "SByte"  => size = 8;  unsigned = false;
          | "Int16"  => size = 16; unsigned = false;
          | "Int32"  => size = 32; unsigned = false;
          | "Int64"  => size = 64; unsigned = false; is_longsize = true;
          | "Byte"   => size = 8;  unsigned = true;
          | "UInt16" => size = 16; unsigned = true;
          | "UInt32" => size = 31; unsigned = true;
          | "UInt64" => size = 64; unsigned = true;  is_longsize = true;
          | "Single" => size = 32; unsigned = false; is_floating = true;
          | "Double" => size = 64; unsigned = false; is_floating = true;
          | "Char"   => size = 16; unsigned = true;  is_numeric = false;
          | _        => is_numeric = false;
        }
      }
      
      public override MakePointerTypeInfo() : TypeInfo
      {
        library.TypeInfoOfType(system_type.MakePointerType())
      }

      public override LookupMemberImpl (name : string) : list [IMember]
      {
        if (implicit_conversion == null)
        {
          AddConversions ();
          LookupMember (name);
        } 
        else base.LookupMemberImpl (name);
      }
      
      public CanOmmitConversionTo (target : ExternalPrimitiveTypeInfo) : bool
      {
        if (target.Equals (this)) true
        else if (is_longsize != target.is_longsize || is_floating != target.is_floating) false
        else
        {
          when (implicit_conversion == null)
            AddConversions ();
          implicit_conversion.Contains (target) 
            || Equals (InternalType.Char_tc) 
               && (InternalType.UInt16_tc :> ExternalPrimitiveTypeInfo).CanOmmitConversionTo (target)
        }
      }
      
      protected AddConversions () : void
      {
        mutable is_numeric = true;
        def name = system_type.Name;
        
        implicit_conversion =
          match (name)
          {
            | "SByte"  => [InternalType.Int16_tc, InternalType.Int32_tc, InternalType.Int64_tc, InternalType.Single_tc, InternalType.Double_tc]
            | "Int16"  => [InternalType.Int32_tc, InternalType.Int64_tc, InternalType.Single_tc, InternalType.Double_tc]
            | "Int32"  => [InternalType.Int64_tc, InternalType.Single_tc, InternalType.Double_tc]
            | "Int64"  => [InternalType.Single_tc, InternalType.Double_tc]
            | "Byte"   => [InternalType.Int16_tc, InternalType.Int32_tc, InternalType.Int64_tc, InternalType.UInt16_tc, InternalType.UInt32_tc,
                           InternalType.UInt64_tc, InternalType.Single_tc, InternalType.Double_tc]
            | "UInt16" => [InternalType.Int32_tc, InternalType.Int64_tc, InternalType.UInt32_tc, InternalType.UInt64_tc, 
                           InternalType.Single_tc, InternalType.Double_tc]
            | "UInt32" => [InternalType.Int64_tc, InternalType.UInt64_tc, InternalType.Single_tc, InternalType.Double_tc]
            | "UInt64" => [InternalType.Single_tc, InternalType.Double_tc]
            | "Char"   => [InternalType.UInt16_tc, InternalType.Int32_tc, InternalType.UInt32_tc, InternalType.Int64_tc,
                           InternalType.UInt64_tc, InternalType.Single_tc, InternalType.Double_tc]
            | "Single" => [InternalType.Double_tc]
            | "Double" => []
            | _ =>
              is_numeric = false;
              []
          }

        when (is_numeric)
        {
          foreach (target in implicit_conversion)
            AddConversion ("op_Implicit", target);

          // add remaining as explicit
          foreach (target in numeric_types.Keys)
          {
            def t = library.LibRefManager.NameTree.LookupInternalType (["System", target]);

            when (!Equals (t) && !implicit_conversion.Contains(t))
              AddConversion ("op_Explicit", t);
          }
        }
      }
    }
  }
} /* namespace */
