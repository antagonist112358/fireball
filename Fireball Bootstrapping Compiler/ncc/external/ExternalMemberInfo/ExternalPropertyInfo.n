/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  /// This class stores information extracted from a referenced external library.
  
  public partial class LibraryReference
  {
    public class ExternalPropertyInfo : ExternalMemberInfo, IProperty
    {
      [Accessor]
      protected handle     : SR.PropertyInfo;
      [Accessor]
      protected getter     : ExternalMethodInfo;
      [Accessor]  
      protected setter     : ExternalMethodInfo;
      protected any_method : ExternalMethodInfo;
      protected mem_type   : FixedType;

      public this (tenv : Map [string, StaticTypeVar], lib : LibraryReference, h : SR.PropertyInfo)
      {
        handle = h;
        base (lib);
        
        def get_method = handle.GetGetMethod (true);
        def set_method = handle.GetSetMethod (true);

        getter = library.MethodOfMethodInfo (tenv, get_method);
        setter = library.MethodOfMethodInfo (tenv, set_method);

        if (getter == null)
          any_method = setter;
        else
          any_method = getter;

        assert(any_method != null);

        def ret_type = library.TypeOfType (tenv, handle.PropertyType);

        def (args, ret_type) =
          if (getter != null)
            match (getter.GetMemType()) 
            {
              | FixedType.Fun (t, r) => (t.FixedValue.GetFunctionArguments (), r.FixedValue)
            }
          else if (setter != null)
            match (setter.GetMemType ())
            {
              | FixedType.Fun (t, _) =>
                def (args, r) = NList.DivideLast (t.FixedValue.GetFunctionArguments ());
                (args, r)
            }
          else ([], ret_type);

        if (args.IsEmpty)
          mem_type = ret_type;
        else
          mem_type = FixedType.ConstructFunctionType (args, ret_type);
          
        attributes = any_method.Attributes;
      }

      public DeclaringType : TypeInfo
      {
        //[Nemerle.Memoize (InvalidValue = null)]
        get { library.TypeInfoOfType (handle.DeclaringType) }
      }
      
      public Name       : string      { get { handle.Name } }
      public MemberKind : MemberKinds { get { MemberKinds.Property } }
      public IsMutable  : bool        { get { handle.CanWrite } }

      public GetGetter()                  : IMethod         { getter }
      public GetSetter()                  : IMethod         { setter }
      public GetPropertyInfo()            : SR.PropertyInfo { handle }
      public GetMemType()                 : FixedType           { mem_type }
      public CanAccess(source : TypeInfo) : bool            { any_method.CanAccess (source) }
      
      public override GetHandle() : SR.MemberInfo { handle }
      public override ToString()  : string        { MemberBuilder.DescribeMember (this) }

      public IsIndexer : bool
      {
        //[Nemerle.Memoize]
        get
        {
          def index_parms = handle.GetIndexParameters ();
          index_parms.Length > 0
        }
      }
    }
  }
} /* namespace */
