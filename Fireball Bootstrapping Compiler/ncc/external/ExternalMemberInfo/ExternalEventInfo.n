/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  /// This class stores information extracted from a referenced external library.
  
  public partial class LibraryReference
  {
    public class ExternalEventInfo : ExternalMemberInfo, IEvent
    {
     [Accessor]
      protected handle   : SR.EventInfo;
      protected adder    : ExternalMethodInfo;
      protected remover  : ExternalMethodInfo;
      protected mem_type : FixedType;

      public this (lib : LibraryReference, h : SR.EventInfo)
      {
        handle = h;
        base (lib);
        def add_method = handle.GetAddMethod (true);
        def remove_method = handle.GetRemoveMethod (true);

        def tenv = (DeclaringType :> ExternalTypeInfo).tenv;
        adder = library.MethodOfMethodInfo (tenv, add_method);
        remover = library.MethodOfMethodInfo (tenv, remove_method);

        assert(adder != null);
        assert(remover != null);

        match (adder.GetMemType ()) 
        {
          | FixedType.Fun (t, _) => mem_type = t.FixedValue;
        }
        
        attributes = adder.Attributes;
      }

      public DeclaringType : TypeInfo
      {
        //[Nemerle.Memoize (InvalidValue = null)]
        get { library.TypeInfoOfType (handle.DeclaringType) }
      }
      
      public Name       : string      { get { handle.Name } }
      public MemberKind : MemberKinds { get { MemberKinds.Event } }

      public GetAdder()     : IMethod      { adder }
      public GetRemover()   : IMethod      { remover }
      public GetEventInfo() : SR.EventInfo { handle }
      public GetMemType()   : FixedType        { mem_type }

      public CanAccess (_source : TypeInfo) : bool
      {
        // FIXME: this is broken... we need to check method attributes
        true
      }

      public override GetHandle () : SR.MemberInfo { handle }
      public override ToString () : string { MemberBuilder.DescribeMember (this) }
    }
  }
} /* namespace */
