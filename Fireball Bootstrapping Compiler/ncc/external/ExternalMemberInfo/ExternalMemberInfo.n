/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  /// This class stores information extracted from a referenced external library.

  public partial class LibraryReference
  {
    public abstract class ExternalMemberInfo : MemberInfo, System.IEquatable[ExternalMemberInfo]
    {
      public virtual NameLocation : Location { get { this.Location } }

      [Accessor]
      protected library : LibraryReference;
      protected id      : int;

      protected InternalType : InternalTypeClass { get { library.Manager.InternalType } }
      protected SystemTypeCache : SystemTypeClass { get { library.Manager.SystemTypeCache } }

      public this (lib : LibraryReference)
      {
        library = lib;
        id = lib.Manager.GetNewId();

        when (InternalType.Obsolete_tc != null)
          is_obsolete = HasAttribute (InternalType.Obsolete_tc);
      }

      internal override GetObsoletionDetails () : string * bool
      {
        def attr = System.Attribute.GetCustomAttribute (
          GetHandle(),
          InternalType.Obsolete_tc.SystemType,
          false);
        assert(attr != null);
        (late(attr.Message) :> string, late(attr.IsError) :> bool)
      }

      public HasAttribute (attribute : TypeInfo) : bool
      {
        def t = attribute.SystemType;
        GetHandle ().IsDefined (t, false)
      }
      
      public HasAttribute(attribSystemType : System.Type) : bool
      {
        System.Attribute.GetCustomAttribute(GetHandle(), attribSystemType, false) != null
      }

      public Location : Location { get { library._location } }

      public abstract GetHandle () : SR.MemberInfo;

      public override GlobalEnv : GlobalEnv { get { library.Manager.CoreEnv } }

      [Memoize]
      public override GetModifiers () : AttributesAndModifiers
      {
        def attrsData = SR.CustomAttributeData.GetCustomAttributes(GetHandle());
        def attrs     = ConvertCustomAttributesData(attrsData, library);
        def attrAsts  = attrs.Map((name, args) => <[ $name(..$args)]>);
        AttributesAndModifiers(Attributes, attrAsts)
      }

      public override IsCustomAttributeDefined(attributeFullName : string) : bool
      {
        GetHandle().IsDefined(library.Manager.LookupSystemType(attributeFullName), false)
      }

      [Nemerle.OverrideObjectEquals]
      public Equals (o : ExternalMemberInfo) : bool
        implements System.IEquatable[ExternalMemberInfo].Equals
      {
        assert2(o != null);
        def x = GetHandle();
        def y = o.GetHandle();
        try { id == o.id || y.Equals(x) }
        catch
        { _ =>
          try { x.Equals(y) }
          catch
          { _ =>
            assert2(false);
            false
          }
        }
      }

      public override GetHashCode () : int { id }
    }
  }
} /* namespace */
