/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;

using PT = Nemerle.Compiler.Parsetree;  
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler 
{
  /// This class stores information extracted from a referenced external library.
  
  public partial class LibraryReference
  {
    public class ExternalFieldInfo : ExternalMemberInfo, IField
    {
      [Accessor]
      protected handle  : SR.FieldInfo;
      protected tt_type : FixedType;
      protected resolvable : bool;

      public this (tenv : Map [string, StaticTypeVar], lib : LibraryReference, h : SR.FieldInfo)
      {
        handle = h;
        base (lib);
       
        tt_type = library.TypeOfType (tenv, handle.FieldType);
        set_attributes ();
        
        resolvable = HasAttribute(typeof(Fireball.Internal.ResolveAttribute));
      }

      set_attributes () : void
      {
        attributes = NemerleModifiers.None;
        unless (handle.IsInitOnly || handle.IsLiteral) attributes |= NemerleModifiers.Mutable;
        when (handle.IsStatic)                         attributes |= NemerleModifiers.Static;
        when (handle.IsSpecialName)                    attributes |= NemerleModifiers.SpecialName;

        when (handle.IsPrivate)            attributes |= NemerleModifiers.Private;
        when (handle.IsPublic)             attributes |= NemerleModifiers.Public;
        when (handle.IsFamily)             attributes |= NemerleModifiers.Protected;
        when (handle.IsAssembly)           attributes |= NemerleModifiers.Internal;
        when (handle.IsFamilyAndAssembly)  attributes |= NemerleModifiers.Internal %| NemerleModifiers.Protected;
        when (!handle.IsInitOnly && !handle.IsLiteral && handle.IsDefined (typeof (Nemerle.Internal.ImmutableAttribute), false))
                                           attributes |= NemerleModifiers.CompilerMutable;
      }

      public DeclaringType : TypeInfo
      {
        //[Nemerle.Memoize (InvalidValue = null)]
        get { library.TypeInfoOfType (handle.DeclaringType) }
      }
      
      public Name : string { get { handle.Name } }

      public override ToString () : string { MemberBuilder.DescribeMember (this) }

      public MemberKind : MemberKinds { get { MemberKinds.Field } }

      public GetFieldInfo () : SR.FieldInfo { handle }
      
      public override GetHandle () : SR.MemberInfo { handle }

      public GetMemType () : FixedType { tt_type }
      
      public HasBeenAssigned : bool
      {
        get { true }
        set { base.HasBeenUsed = value }
      }
      
      public IsResolvable : bool { get { resolvable } }
      
      public IsLiteral : bool { get { handle.IsLiteral } }

      public GetValue () : Literal
      {
        assert(IsLiteral);
        def fval = handle.GetValue (null);
        def lit = 
          match (fval) 
          {
            | val is ulong  => Literal.Integer(val, false, null).WithProperType ()
            | val is double => Literal.Double(val)
            | val is float  => Literal.Float(val)
            | val is string => Literal.String(val)
            | val is char   => Literal.Char(val)
            | val is bool   => Literal.Bool(val)
            | val =>
              def val = System.Convert.ToInt64(val);
              if (val == long.MinValue)
                Literal.Integer (0x8000000000000000UL, true, InternalType.Int64)
              else
                Literal.Integer (System.Math.Abs(val) :> ulong, val < 0, null).WithProperType ()
          };

        if (handle.FieldType.IsEnum)
        {
          def enum_subtype = match(System.Enum.GetUnderlyingType(handle.FieldType).FullName)
          {
            | "System.Int32" =>     InternalType.Int32
            | "System.UInt32" =>    InternalType.UInt32
            | "System.Int64" =>     InternalType.Int64
            | "System.UInt64" =>    InternalType.UInt64
            | "System.Int16" =>     InternalType.Int16
            | "System.UInt16" =>    InternalType.UInt16
            | "System.Byte" =>      InternalType.Byte
            | "System.SByte" =>     InternalType.SByte
            | _ => InternalType.Int64
          }
          def lit = lit :> Literal.Integer;
          def lit = Literal.Integer (lit.val, lit.is_negative, enum_subtype);
          Literal.Enum (lit, library.TypeInfoOfType (handle.DeclaringType), this)
        } else
          lit
      }

      public IsMutable : bool
      {
        get
        {
          !handle.IsInitOnly && !handle.IsLiteral &&
          !handle.IsDefined (typeof (Nemerle.Internal.ImmutableAttribute), false)
        }
      }

      public IsVolatile : bool
      {
        get
        {
          handle.IsDefined (typeof (System.Runtime.CompilerServices.IsVolatile), false) ||
          handle.IsDefined (typeof (Nemerle.Internal.VolatileModifier), false);
        }
      }

      public CanAccess (source : TypeInfo) : bool
      {
        handle.IsPublic 
          || source.IsDerivedFrom(DeclaringType) && (handle.IsFamily || handle.IsFamilyOrAssembly)
          || (this.library.IsFriend && (handle.IsAssembly || handle.IsFamilyOrAssembly));
      }
    }
  }
} /* namespace */
