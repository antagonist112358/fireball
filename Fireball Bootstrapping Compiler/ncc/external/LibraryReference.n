/*
 * Copyright (c) 2003-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.Typedtree;
using Nemerle.IO;
using Nemerle.Late;
using Nemerle.Utility;
using System.IO;
using System.Runtime.CompilerServices;
using System.Collections.ObjectModel;

using PT = Nemerle.Compiler.Parsetree;
using PExpr = Nemerle.Compiler.Parsetree.PExpr;
using SR = System.Reflection;
using SRE = System.Reflection.Emit;
using SCG = System.Collections.Generic;

namespace Nemerle.Compiler
{
  /// This class stores information extracted from a referenced external library.
  [ManagerAccess]
  public partial class LibraryReference
  {
    /// The assembly associated with this object
    [Accessor (Assembly)] private _library : SR.Assembly;

    /// The location of this library
    private mutable _location : Location;

    [Accessor]
    private _isFriend : bool;

    public IsUserReference : bool { get; }

    /// If set to true, the current assembly declares itself
    /// to be generated by the Nemerle compiler.
    _is_generated_by_nemerle : bool;

    public LibRefManager : LibraryReferenceManager;

    private static load_attr_from (assembly : SR.Assembly, attr_name : string, attr : ref System.Type, attr_loc : ref string) : void
    {
      def ext = assembly.GetType (attr_name);

      // HACK: VladD2: In .Net 4.5 ExtensionAttribute define twice.
      when (ext != null && attr != null && attr.FullName != "System.Runtime.CompilerServices.ExtensionAttribute")
      {
        Message.Warning ($"$attr_name attribute from $assembly is ignored");
        Message.HintOnce ($"$attr_name is first defined in $attr_loc");
      }

      def new_attr_loc = assembly.ToString();

      when (ext != null && (attr == null || attr_loc == new_attr_loc))
      {
        attr = ext;
        attr_loc = new_attr_loc;
      }
    }

    /// Load an assembly. Extracts and processes the custom attributes array.
    internal this (mgr : LibraryReferenceManager, assembly : SR.Assembly, isUserReference : bool)
    {
      LibRefManager = mgr;
      Manager = mgr.Manager;
      _library = assembly;
      IsUserReference = isUserReference;
      _location = Location (Location.GetFileIndex (mgr.getAssemblyLocation(assembly)), 0, 0);
      _location.MarkAsGenerated();

      // Scans the assembly custom attributes looking for something interesting...
      def attrs = _library.GetCustomAttributes (typeof (SR.AssemblyConfigurationAttribute), false);

      foreach (x :> SR.AssemblyConfigurationAttribute in attrs)
        _is_generated_by_nemerle = _is_generated_by_nemerle || x.Configuration == "ContainsNemerleTypes";

      load_attr_from (assembly, "Nemerle.Internal.ExtensionAttribute",
                      ref SystemTypeCache.ExtensionAttribute,
                      ref SystemTypeCache.ExtensionAttributeAssembly);
      load_attr_from (assembly, "System.Runtime.CompilerServices.ExtensionAttribute",
                      ref SystemTypeCache.SQ_ExtensionAttribute,
                      ref SystemTypeCache.SQ_ExtensionAttributeAssembly);

      _isFriend = this.GetIsFriend();
    }

    private GetIsFriend() : bool
    {
      def currentAssemblyName = Path.GetFileNameWithoutExtension(this.Manager.Options.OutputFileName);
      def customAttributes = _library.GetCustomAttributes(typeof(InternalsVisibleToAttribute), false);
      def snKey() : SR.StrongNameKeyPair
      {
        using (keyFile = File.Open(this.Manager.Options.StrongAssemblyKeyName, FileMode.Open, FileAccess.Read))
          SR.StrongNameKeyPair(keyFile)
      }
      def toHexString(bytes : array[byte]) : string
      {
        def hex = System.BitConverter.ToString(bytes);
        hex.Replace("-","");
      }
      def generatePublicKeyToken(publicKey : array[byte]) : array[byte]
      {
        def sha = System.Security.Cryptography.SHA1Managed();
        def hash = sha.ComputeHash(publicKey);
        def len = 8;
        mutable result : array[byte] = array(len);
        System.Array.Copy(hash, hash.Length - len , result, 0, len);
        System.Array.Reverse(result, 0, len);
        result;
      }
      def checkFriend(att : InternalsVisibleToAttribute) : bool
      {
        def assemblyName = att.AssemblyName;
        def parts = assemblyName.Replace(" ", "").SplitToList(array[',']);
        match (parts)
        {
          | [asmName] when currentAssemblyName == asmName => true;
          | [asmName, pKey] when string.IsNullOrEmpty(this.Manager.Options.StrongAssemblyKeyName)
                                 && currentAssemblyName == asmName
            =>
            match(pKey.ToLower().SplitToList(array[',']))
            {
              | ["publickey", key] when toHexString(snKey().PublicKey).ToLower() == key.ToLower() => true;
              | ["publickeytoken", key]
                 when toHexString(generatePublicKeyToken(snKey().PublicKey)).ToLower() == key.ToLower()
                  => true;
              | _ => false
            }

          | _ => false
        }
      }

      customAttributes.Exists(a => checkFriend(a :> InternalsVisibleToAttribute))
    }

    internal LoadContents () : void
    {
      LibRefManager.LoadTypesFrom(this);
      LibRefManager.LoadMacrosFrom(_library);
    }

    public override ToString () : string
    {
      if (_location == Location.Default) Assembly.ToString()
      else if (Assembly != null) _location.ToString()
      else base.ToString()
    }

    /// Turns a Framework type into something edible by Nemerle's type system
    internal TypeOfType (_tenv : Map [string, StaticTypeVar], framework_type : System.Type) : FixedType
    {
      // Message.Debug (framework_type.ToString ());
      if (framework_type.Equals(SystemTypeCache.Void))
        InternalType.Void
      else if (framework_type.IsArray)
        FixedType.Array(TypeOfType(_tenv, framework_type.GetElementType()), framework_type.GetArrayRank())
      else if (framework_type.IsByRef)
      {
        Message.Error($ "ref type referenced $framework_type");
        TypeOfType(_tenv, framework_type.GetElementType())
      }
      else if (framework_type.IsGenericParameter)
      {
        match (_tenv.Find(framework_type.Name))
        {
          | Some(tv) => FixedType.StaticTypeVarRef(tv)
          | None =>
            // TODO: VladD2: Add autoload of referenced assembly
//                _tenv.Iter(fun(x,y) { Message.Debug($"$x - $y") });
            Util.ice($"$framework_type from $(framework_type.DeclaringType)")
        }
      }
      else
      {
        def tc = TypeInfoOfType(framework_type);
//            Message.Debug($"tinfo $tc contains generic framework_type.ToString());
        def parms =
          if (framework_type.IsGenericType)
            framework_type.GetGenericArguments().MapToList(t => TypeOfType(_tenv, t));
          else [];

        if (framework_type.Namespace == "Nemerle.Builtins")
        {
          def make_tupl(l)
          {
            | [x] => x
            | []  => InternalType.Void
            | _   => FixedType.Tuple(l)
          }

          if (tc.Name == "Tuple")
            FixedType.Tuple(parms)
          else if (tc.Name == "FunctionVoid")
            FixedType.Fun(make_tupl(parms), parms.Length, InternalType.Void)
          else
          {
            def (front, last) = parms.DivideLast();
            FixedType.Fun(make_tupl(front), front.Length, last)
          }
        }
        else FixedType.Class(tc, parms);
      }
    }

    mutable doEnsureCached : bool = false;

    // TODO: VladD2: Move this method into LibraryReferenceManager and make it independetnt from LibraryReference!
    internal TypeInfoOfType (framework_type : System.Type) : TypeInfo
    {
      def genericArgsCount = framework_type.GetGenericArguments().Length;
      //assert2(!(framework_type.Name == "Expression" && genericArgsCount > 0));
      def (ns_node, path_to_type) = LibRefManager.framework_nesting(framework_type);
      def ns_node_type = ns_node.Path (path_to_type);

      when (doEnsureCached)
        ns_node_type.EnsureCached();

      match (ns_node_type.LookupType ([], genericArgsCount))
      {
        | Some (tc) => tc
          // protected external types are not fetched automatically from external assembly
          // so sometimes we must load them by hand
        | None =>
          LibraryReferenceManager.GetInternalType (this, framework_type, ns_node_type)
      }
    }

    /// Construct TypeInfo object from given type in current assembly.
    internal ConstructTypeInfo (reflected_type : System.Type, ns_node : NamespaceTree.Node) : TypeInfo
    {
      if (_is_generated_by_nemerle && reflected_type.IsDefined (SystemTypeCache.NemerleAttribute, false))
        ExternalNemerleTypeInfo (this, reflected_type, ns_node)
      else if (reflected_type.IsPrimitive)
        ExternalPrimitiveTypeInfo (this, reflected_type, ns_node)
      else
        ExternalTypeInfo (this, reflected_type, ns_node)
    }

    /// Looks for type named [name] that is internal to current assembly. Used
    /// by type attribute decoder.
    internal LookupInternalType (name : string) : option [TypeInfo]
    {
    //  Message.Debug ($"looking `$(name)'");
      def st = _library.GetType (name);

      if (st == null)
        None ()
      else
      {
        def (ns_node, path_to_type) = LibRefManager.framework_nesting (st);
        def ns = ns_node.Path (path_to_type);
        Some (LibraryReferenceManager.GetInternalType (this, st, ns))
      }
    }

    private MethodOfMethodInfo (tenv : Map [string, StaticTypeVar], meth : SR.MethodInfo) : ExternalMethodInfo
    {
      if (meth == null) null
      else              ExternalMethodInfo(tenv, this, meth)
    }

    public GetCustomAttributes() : list[PExpr * list[PExpr]]
    {
      ConvertCustomAttributesData(SR.CustomAttributeData.GetCustomAttributes(Assembly), this)
    }
    
    internal static ConvertCustomAttributesData(attrData : SCG.IList[SR.CustomAttributeData], library : LibraryReference) : list[PExpr * list[PExpr]]
    {
      def manager = library.Manager;
      def result = SCG.List();

      foreach (attr in attrData)
      {
        def name = PExpr.FromQualifiedIdentifier(manager, attr.Constructor.DeclaringType.FullName);
        def makeArg(a : SR.CustomAttributeTypedArgument) : PExpr
        {
          def lift(value : object) : PExpr
          {
            | value is bool           => <[ $(value :  bool   ) ]>
            | value is string         => <[ $(value :  string ) ]> 
            | value is double         => <[ $(value :  double ) ]> 
            | value is float          => <[ $(value :  float  ) ]> 
            | value is decimal        => <[ $(value :  decimal) ]> 
            | value is int            => <[ $(value :  int    ) ]> 
            | value is uint           => <[ $(value :  uint   ) ]> 
            | value is long           => <[ $(value :  long   ) ]> 
            | value is ulong          => <[ $(value :  ulong  ) ]> 
            | value is short          => <[ $(value :  short  ) ]> 
            | value is ushort         => <[ $(value :  ushort ) ]> 
            | value is byte           => <[ $(value :  byte   ) ]> 
            | value is sbyte          => <[ $(value :  sbyte  ) ]> 
            | value is char           => <[ $(value :  char   ) ]> 
            | value is System.Guid    => <[ System.Guid($(value.ToString() : string)) ]>
            | value is System.Type    => <[ typeof($(library.TypeOfType(null, value) : typed)) ]>
            | col is ReadOnlyCollection[SR.CustomAttributeTypedArgument] => <[ array[..$(col.MapToList(e => lift(e.Value)))] ]>
            | value => Message.FatalError($"Custom atribute value ($value) of type $(value.GetType()) not suported yet.")
          }

          lift(a.Value)
        }
        def args = attr.ConstructorArguments.MapToList(makeArg);
        result.Add((name, args));
      }
      
      result.NToList()
    }
  }
} /* namespace */
