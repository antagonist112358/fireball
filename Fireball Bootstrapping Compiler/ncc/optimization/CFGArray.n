/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent

using Nemerle.Compiler.Typedtree
using Nemerle.IO

namespace CFG
  public class Node
    public mutable prev : list [int]
    public mutable next : list [int]

    public mutable expr : TExpr
    
    public this(e : TExpr)
      prev = []
      next = []
      expr = e 
      
  public class Array
    iNode :  System.Collections.Generic.List[Node]
    public this()
      iNode = System.Collections.Generic.List()
      
    public AddNode(expr : TExpr) : int
      iNode.Add(Node(expr))
      iNode.Count - 1
      
    public AddEdge(i1 : int, i2 : int) : int
      def n1 = iNode[i1]
      def n2 = iNode[i2]
      
      n1.next = i2 :: n1.next
      n2.prev = i1 :: n2.prev        
      i2
      
    public Iterate( f : int * Node  -> bool) : void
      def l(x : int)
        mutable ended = true
        for (mutable i=0; i < iNode.Count; i++)
          ended = f(i, iNode[i]) && ended
          
        assert(x<10000)
        unless (ended)
          l(x+1)
      _ = l(0)
      
      
    public ReverseIterate( f : int * Node  -> bool) : void
      def l(x : int)
        mutable ended = true
        for (mutable i=iNode.Count-1; i>=0; i--)
          ended = f(i, iNode[i]) && ended
          
        assert(x<10000)
        unless (ended)
          l(x+1)
          
      _ = l(0)
            
          
          
    
    public GetUse(i :int) : TExpr.Use
      match (iNode[i].expr)
        | TExpr.Use as e => 
            e
        | _=>
            null
    
    public Count() : int
      iNode.Count
