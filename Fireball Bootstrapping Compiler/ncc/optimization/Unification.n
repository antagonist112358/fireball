/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent
using Nemerle.Assertions
using Nemerle.Collections
using Nemerle.Compiler
using Nemerle.Compiler.CFG
using Nemerle.Compiler.SolverMacros
using Nemerle.Compiler.Typedtree
using Nemerle.Compiler.Typedtree.TExpr
using Nemerle.IO
using Nemerle.Logging
using Nemerle.Utility

using System.Diagnostics.SymbolStore
using System.Reflection
using System.Reflection.Emit

using SCG = System.Collections.Generic

namespace Nemerle.Compiler
  class Unification
    class Graph
      public class NodeData
        public mutable use_count : int
        public mutable neighbours : Set[LocalValue]
        
        public this()
          use_count = 1
          neighbours = Set()
          
      h : Hashtable[LocalValue,NodeData]
      
      public this()
        h = Hashtable()
          
      public AddNode(l : LocalValue) : void
        if (h.Contains(l))
          h[l].use_count++
        else
          h[l] = NodeData()
          
      public AddEdge(l1 : LocalValue, l2 : LocalValue) : void 
        def AddOneEdge(x1,x2)
          unless (h[x1].neighbours.Contains(x2))
            h[x1].neighbours = h[x1].neighbours.Add(x2)          
          
        AddOneEdge(l1, l2)
        AddOneEdge(l2, l1)
        
      public AddCliqueEdges(locals : list[LocalValue]) : void
        def Cross(_)
          | x1::xs =>
            foreach (x2 in xs)
              AddEdge(x1, x2)
            Cross(xs)
          | _ =>
            ()
        Cross(locals)
        
      public GetNodes() : list[LocalValue]
        h.Keys.NToList()
        
      public GreedyColor(union : Hashtable[LocalValue,LocalValue], cmp : (NodeData * NodeData) -> int ) : void
        def IsDep(w,c)
          match (h[w].neighbours.Find( (x) => {union.Contains(x) && union[x].Equals(c)}))
            | Some =>
              true
            | None =>
              false
              
        mutable hsort = h.Keys.NToArray ()
        System.Array.Sort(hsort, (k1, k2) => { cmp(h[k1], h[k2])  }); 
        
        for (mutable i = 0; i < hsort.Length; i++)
          def c = hsort[i]
          when (!union.Contains(c))
            for (mutable j = i; j < hsort.Length; j++)
              def w = hsort[j]
              when (!union.Contains(w) && !IsDep(w,c))
                union[w] = c
    
    public static Calculate(cfg : CFG.Array, e_ExprUsed : array [DefUseInOut], fp : list [TParameter]) : Hashtable[LocalValue, LocalValue]
      def col = Graph()      
      
      def CountLocalRefs(_, v : CFG.Node)
        match (v.expr)
          | TExpr.Use(TExpr.LocalRef(l), _ ) | TExpr.Def(TExpr.LocalRef(l), _) =>
            col.AddNode(l)
          | _ =>
            ()
        true
      cfg.Iterate(CountLocalRefs)
     
      foreach (i in col.GetNodes())
        foreach (j in col.GetNodes())
          unless (i.Type.Equals(j.Type))
            col.AddEdge(i,j)
      
      def AddEdges(k, v : CFG.Node)
        // catch nonused variables
        mutable locals = match(v.expr)
          | TExpr.Def(TExpr.LocalRef(l), _) =>
            [l]
          | _ =>
            []
        foreach (i in e_ExprUsed[k].In)
          match (cfg.GetUse(i).expr)
            | TExpr.LocalRef(l) =>
                locals = l::locals
            | _ =>
              assert(false)
        col.AddCliqueEdges(locals)
        true
      cfg.Iterate(AddEdges)
      
      def sc(l1 : Graph.NodeData,  l2 : Graph.NodeData)
        match(l2.use_count - l1.use_count)
          | 0 => l2.neighbours.Count - l1.neighbours.Count
          | x => x
        
      def union = Hashtable()
      foreach (i in fp)
        union[i.decl] = i.decl
        
      col.GreedyColor(union, sc)
      union
      
    public static Apply(e : TExpr, m : Hashtable[LocalValue, LocalValue]) : TExpr
      def GetUnited(e)
        m[e]
    
      def Replace(_)
        | TExpr.Use(e, def_of) =>
            TExpr.Use(e.Walk(Replace), def_of)
        | TExpr.Def(e, into) =>
            TExpr.Def(e.Walk(Replace), into)
        | TExpr.LocalRef(l) => 
            TExpr.LocalRef(l.Type, GetUnited(l))
        | TExpr.MultipleAssign(assigns) as e =>
            TExpr.MultipleAssign(e.Type, assigns.Map( ((l,e)) => { (GetUnited(l) , e.Walk(Replace)) } ))
        | _ =>
            null
        
      e.Walk(Replace) 
