/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent
using Nemerle.Collections
using Nemerle.Utility
using Nemerle.Logging

using Nemerle.Compiler
using Nemerle.Compiler.Typedtree
using Nemerle.Compiler.Typedtree.TExpr
using Nemerle.IO

using SCG = System.Collections.Generic

namespace Nemerle.Compiler
  class CFG
    public class DefUseInOut
      public mutable Def : Set[int]
      public mutable Use : Set[int]
      public mutable In  : Set[int]
      public mutable Out : Set[int]
      
      public this(d : Set[int], u : Set[int], i : Set[int], o : Set[int])
        Def = d
        Use = u
        In = i
        Out = o
        
    public class GenKillInOut
      public mutable Gen  : Set[int]
      public mutable Kill : Set[int]
      public mutable In   : Set[int]
      public mutable Out  : Set[int]
      
      public this(g : Set[int], k : Set[int], i : Set[int], o : Set[int])
        Gen = g
        Kill = k
        In = i
        Out = o
        
    static public BuildCFG(expr : TExpr) : CFG.Array
      def cfg = CFG.Array()
      mutable gotolist = []
      def labels = Hashtable()

      def BuildCFG(mutable node : int, expr : TExpr) : int
        def NodesAdd(expr : TExpr) : TExpr
          def NodesAddFromList(exprs : list [TExpr])
            _ = exprs.Map( (e) => e.Walk(NodesAdd) )

          match(expr)
            | Def | Use =>
                node = cfg.AddEdge(node, cfg.AddNode(expr))
                expr
                
            | Assign(e1, e2) =>
                _ = e2.Walk(NodesAdd)            
                _ = e1.Walk(NodesAdd)
                expr                

            | If(cond, e_then, e_else, _, _) =>
                node = BuildCFG(node, cond)
                def c1 = BuildCFG(node, e_then)
                def c2 = BuildCFG(node, e_else)
                def e =  cfg.AddNode(null)
                _ = cfg.AddEdge(c1, e)
                node = cfg.AddEdge(c2, e)
                expr

            | Switch(indexing_expr /*TExpr*/, default /*option[TExpr]*/, cases /*list[int * TExpr]*/) =>
                //assert2(false);
                def startNode = BuildCFG(node, indexing_expr)
                def e = cfg.AddNode(null)
                foreach ((_, caseExpr) in cases)
                  def cCase = BuildCFG(startNode, caseExpr)
                  node = cfg.AddEdge(cCase, e)
                when (default is Some(defExpr))
                  def cDefault = BuildCFG(startNode, defExpr)
                  node = cfg.AddEdge(cDefault, e)
                expr

            | Array (exprs, sizes) =>
                NodesAddFromList(sizes)
                NodesAddFromList(exprs)
                expr                
                
            | Label(id, _) =>
                node = cfg.AddEdge(node, cfg.AddNode(null))
                labels[id] = node
                null
  
            | Goto (id, _) =>
                gotolist = (node, id)::gotolist
                node = cfg.AddNode(null)
                expr
                
            | MethodAddress | ImplicitValueTypeCtor | MacroEnvelope => null
            | Base | ArrayIndexer | PointerIndexer | Sequence | MultipleAssign | Tuple | TypeOf | Throw | HasType | TupleIndexer => null
            | Call | OpCode | MethodRef | StaticRef | FieldMember | Literal | DefaultValue | TypeConversion | This => null
            | DebugInfo =>  null //patch for combinig -optimize and -debug+ options
            | _ => null
  
        _ = expr.Walk(NodesAdd)
        node
        
      _ = BuildCFG(cfg.AddNode(null), expr)

      foreach ((node, id) in gotolist)
        _ = cfg.AddEdge(node, labels[id])
      cfg        
      
      
    static public BuildExprAvail(cfg : CFG.Array) : array [GenKillInOut]
      def use = UseSet()
      
      def DefGather(i, n)
        match (n.expr)
          | TExpr.Def(e, en) =>
            use.Insert(e, i)
            unless (en == null)
              def StripUse(_)
                | TExpr.Use(expr, _) =>
                  expr.Walk(StripUse)
                | _ =>
                  null
              use.Insert(en.Walk(StripUse), i)
          | _ =>
            ()
        true
            
      cfg.Iterate(DefGather)
      
      def e_ExprAvail = array(cfg.Count())
      def ExprAvailInit(i ,n)
        e_ExprAvail[i] = match (n.expr)
          | TExpr.Def(e, _) =>
            GenKillInOut(Set().Add(i), use.Get(e).Filter((x) => x!=i), Set(), use.GetAllUsed().Remove(i))
          | _ =>
            GenKillInOut(Set(), Set(), Set(), Set())
        true

      cfg.Iterate(ExprAvailInit)
      e_ExprAvail[0] = GenKillInOut(Set(),Set(),Set(),Set())
      

      def ExprAvailPropagate(i, n)
        def ea = e_ExprAvail[i]
        
        ea.In = match (n.prev)
          | [] =>
            Set()
          | hd::tl =>
            mutable newin = e_ExprAvail[hd].Out
            foreach (prev in tl)
              newin = newin.Intersect(e_ExprAvail[prev].Out)
            newin

        def old_out = ea.Out
        ea.Out = ea.Gen.Sum(ea.In.Subtract(ea.Kill))            
        ea.Out.Count == old_out.Count
      
      cfg.Iterate(ExprAvailPropagate)
      e_ExprAvail

    static public BuildExprUsed(cfg : CFG.Array) : array [DefUseInOut]
      def use = UseSet()
      
      def UseGather(i, n)
        match (n.expr)
          | TExpr.Use(e, _) =>
            use.Insert(e, i)
          | _ =>
            ()
        true
      cfg.Iterate(UseGather)

      def e_ExprUsed = array(cfg.Count())
      def ExprUsedInit(i ,n)
        e_ExprUsed[i] = match (n.expr)
          | TExpr.Def(expr, _) =>
            DefUseInOut(use.Get(expr), Set(), Set(), Set())
          | TExpr.Use =>
            DefUseInOut(Set(), Set().Add(i), Set(), Set())
          | _ =>
            DefUseInOut(Set(), Set(), Set(), Set())
        true
      cfg.Iterate(ExprUsedInit)

      def ExprUsedPropagate(i, n)
        def eu = e_ExprUsed[i]
        mutable nout = Set()
        foreach (next in n.next)
          nout = nout.Sum(e_ExprUsed[next].In)
        eu.Out = nout
        def oldin = eu.In          
        eu.In = eu.Use.Sum(nout.Subtract(eu.Def))
        eu.In.Count == oldin.Count

      cfg.ReverseIterate(ExprUsedPropagate)
      e_ExprUsed
