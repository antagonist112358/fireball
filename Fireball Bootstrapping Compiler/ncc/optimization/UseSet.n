/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent
using Nemerle.Collections
using Nemerle.Compiler.Typedtree
using Nemerle.Compiler
using Nemerle.IO
using SCG = System.Collections.Generic

public class UseSetComparer : SCG.IEqualityComparer [TExpr]
  public this ()
    ()
    
  public GetHashCode(x : TExpr) : int
    | TExpr.LocalRef(decl) =>
        decl.GetHashCode()
    | _ =>
      assert(false)
    
  public static equals(x : TExpr, y : TExpr) : bool
    | (TExpr.LocalRef(name1), TExpr.LocalRef(name2)) =>
        name1.Equals(name2)
    | _ =>
      assert(false)
      
  public Equals(x : TExpr, y : TExpr) : bool
    UseSetComparer.equals(x, y)
 
public class UseSet : Hashtable [TExpr, Set[int]]
  mutable used : Set[int]

  public this ()
    base(UseSetComparer())
    used = null
    ()

  public Insert(e : TExpr, i : int) : void
    def addd(expr)
      | TExpr.LocalRef =>
          if (Contains(expr))
            unless (this[expr].Contains(i)) // unless already exists
              this[expr] = this[expr].Add(i)
          else 
            this[expr] = Set().Add(i)
          expr
      | TExpr.Use =>
          assert(false)

      | _ =>
          null      
    _ = e.Walk(addd)
          
  public new Get(e : TExpr) : Set [int]
    match (e)
      | TExpr.LocalRef =>
          if (Contains(e))
            this[e]
          else
            def empty = Set()
            this[e] = empty
            empty
      | _ =>
          assert(false)
  
  public GetAllUsed() : Set [int]
    when (used == null)
      used = Set()
      foreach ((_, v) in KeyValuePairs)
        used = used.Sum(Set(v))
    
    used

  public override ToString() : string
    mutable str = "{ "
    foreach ((k, v) in KeyValuePairs)
      str = str + k.ToString() + ":" + v.ToString() + " "
    str + "}"
