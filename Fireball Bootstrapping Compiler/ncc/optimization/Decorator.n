/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent
using Nemerle.Collections
using Nemerle.Utility
using Nemerle.Logging

using Nemerle.Compiler
using Nemerle.Compiler.Typedtree
using Nemerle.Compiler.SolverMacros
// using Nemerle.Compiler.Parsetree
using Nemerle.IO

namespace Nemerle.Compiler
  public class Decorator
  
    //only standalone expressions
    private static Propagatable(expr : TExpr) : bool
      | TExpr.Literal | TExpr.LocalRef | TExpr.Use =>
          true
      | TExpr.Call (TExpr.OpCode, [parm1, parm2], _) =>
          Propagatable(parm1.expr) && Propagatable(parm2.expr)
      | TypeConversion(expr, _, _, _) =>
          Propagatable(expr)
      | Tuple(args) =>
          args.ForAll(Propagatable)          
      | FieldMember (expr, _) =>
          Propagatable(expr) && expr.Type.ToString().StartsWith("list.Cons")
      | _ =>
          false
    
    private static SetDefOf(expr : TExpr, def_of : TExpr.Def) : void
      def Inject(expr : TExpr) : TExpr
        | TExpr.Use as u =>
            u.def_of = def_of
            u
        | _ =>
            null
      _ = expr.Walk(Inject)
      
  
    private static MultipleAssignResolver(expr : TExpr.MultipleAssign) : TExpr
      | TExpr.MultipleAssign(assigns) =>
          def LayDefs(assigns : list[LocalValue * TExpr]) : TExpr
            | [(l, _)] =>
              TExpr.Def(TExpr.LocalRef(l), null)
            | (l, _)::xs =>
              TExpr.Sequence(TExpr.Def(TExpr.LocalRef(l), null), LayDefs(xs))
            | _ =>
              assert(false)
            
          TExpr.Sequence(TExpr.MultipleAssign(expr.Type, assigns.Map(((l,e)) => (l,e.Walk(decorate)))), LayDefs(assigns))
     
      
    private static decorate(expr : TExpr) : TExpr
      | TExpr.Assign(LocalRef(local) as lr, expr) =>
          def expr2 = expr.Walk(decorate)
          if (local.CanInline && Propagatable(expr2))
            def d = TExpr.Def(lr, expr2)
            _ = SetDefOf(expr2, d)
            TExpr.Assign(d, expr2)
          else
            TExpr.Assign(TExpr.Def(lr, null), expr2)

      | TExpr.LocalRef as lr =>
          TExpr.Use(lr, null)

      | TExpr.MultipleAssign as ma =>
          MultipleAssignResolver(ma)

      | _ =>
          null
      
    public static Decorate(expr : TExpr) : TExpr
      expr.Walk(decorate)

    public static Undecorate(expr : TExpr) : TExpr
      def undecorate(exp : TExpr) : TExpr
        | TExpr.Sequence(TExpr.MultipleAssign(assigns) as ma, TExpr.Sequence(TExpr.Def,_ )) | TExpr.Sequence(TExpr.MultipleAssign(assigns) as ma, TExpr.Def) =>
            TExpr.MultipleAssign(ma.Type, assigns.Map(((l,e)) => (l,e.Walk(undecorate))))
        | TExpr.Def(null ,_) =>
            assert(false)            
        | TExpr.Def(expr, _) | TExpr.Use(expr, _) =>
            expr.Walk(undecorate)
        | TExpr.Assign(TExpr.Def(null ,_), _) =>
           TExpr.Literal(Literal.Void())
        | _ =>
            null

      expr.Walk(undecorate)
