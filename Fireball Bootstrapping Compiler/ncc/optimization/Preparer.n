/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent
using Nemerle.IO
using Nemerle.Collections
using Nemerle.Utility
using Nemerle.Logging

using Nemerle.Compiler
using Nemerle.Compiler.Typedtree
using Nemerle.Compiler.SolverMacros
using SCG = System.Collections.Generic

namespace Nemerle.Compiler
  class Preparer
    static public AddDefs(e : TExpr, parms : list [TParameter]) : TExpr
    {
      def defined = Hashtable();
      
      def CountLocals(e)
      {
        | TExpr.DefValIn(name, expr, body) when name.IsCache && name.Type.Fix().IsValueType => TExpr.DefValIn(name, expr, body)
        | TExpr.LocalRef(x) =>
            defined[x] = if (defined.Contains(x)) defined[x] + 1 else
                         {
                           x.EverUsed = true;
                           1
                         }
            e
        | _ => null
      }
      
      mutable ex = e.Walk(CountLocals);

      foreach (p in parms)
        defined.Remove(p.decl);

      def kv = defined.KeyValuePairs;
      System.Array.Sort(kv, (lv1, lv2) => { lv1[1] - lv2[1] });

      foreach ((localval, _) in kv)
        ex = TExpr.DefValIn(ex.Type, localval, TExpr.DefaultValue(localval.Type), ex);

      ex
    }
    
    static public RemoveDefs(e : TExpr) : TExpr
     def Remove(e : TExpr) : TExpr
      | TExpr.DefValIn(_ , TExpr.DefaultValue, body) =>
          RemoveDefs(body)

      | TExpr.DefValIn(name, expr, body) when !(name.IsCache && name.Type.Fix().IsValueType) =>
        TExpr.Sequence(TExpr.Assign(TExpr.LocalRef(name.Type, name), RemoveDefs(expr)), RemoveDefs(body))

      | _ =>
          null

     e.Walk(Remove)

    public static TupleDismounter(e : TExpr) : TExpr
      def tuple2strip = Hashtable()

      def GatherTrivialTuple(e : TExpr) : TExpr
        | TExpr.DefValIn(name, TExpr.Tuple, _) =>
            tuple2strip[name] = true
            null
        | TExpr.TupleIndexer(TExpr.LocalRef, _, _) =>
            e
        | TExpr.LocalRef(refer) when tuple2strip.Contains(refer) =>
            tuple2strip.Remove(refer)
            e
        | TExpr.MultipleAssign(assigns) =>
            foreach ((l, _) in assigns)
              when (tuple2strip.Contains(l))
                tuple2strip.Remove(l)
            null
        | _ =>
            null

      def tuple2locals = Hashtable()

      def SplitTrivialTuple(e : TExpr) : TExpr
        | TExpr.DefValIn(name, TExpr.Tuple(args), body) when tuple2strip.Contains(name) =>
            def nameprefix = Util.tmpname(name.Name)
            def CreateLocalValues(i, args)
              | (_, []) =>
                []
              | (i, x::xs) =>
                def lv = LocalValue(name.DefinedIn, $"$(nameprefix)_$(i)", x.Type, LocalValue.Kind.Plain(), true)
                lv.UseFrom(name.DefinedIn)
                lv::CreateLocalValues(i+1, xs)

            def LayDefs(lvs, args, b)
              | ([], [], b) =>
                b
              | (l::ls, arg::args, b) =>
                TExpr.DefValIn(l, arg , LayDefs(ls,args,b))
              | _ =>
                assert(false)

            def localvalues = CreateLocalValues(0, args)
            tuple2locals[name] = localvalues.ToArray()
            LayDefs(localvalues, args, body.Walk(SplitTrivialTuple))

        | TExpr.TupleIndexer(TExpr.LocalRef(l), idx, _) when tuple2locals.Contains(l) =>
            TExpr.LocalRef(tuple2locals[l][idx])

        | _ =>
            null

      e.Walk(GatherTrivialTuple).Walk(SplitTrivialTuple)


    static public Strip(e : TExpr) : TExpr
      def usedlabels = Hashtable()
      def WalkerGatherUsedLabels(x : TExpr) : TExpr
        | TExpr.Goto(k, _) =>
            usedlabels[k] = true
            null
//        expands code size !!!!!
//        | TExpr.TypeConversion(e2, tt, _, _) when e2.Type.Equals(tt) =>
//            e2.Walk(WalkerGatherUsedLabels)
        | TExpr.Call(OpCode("=="), parms, _) =>
            match  (parms.Tail.Head.expr)
              | TExpr.Literal(Literal.Bool (true)) =>
                  parms.Head.expr.Walk(WalkerGatherUsedLabels)
              | _ =>
                  null
        | TExpr.MultipleAssign([(l, expr)]) =>
            TExpr.Assign(x.Type ,TExpr.LocalRef(l.Type, l), expr.Walk(WalkerGatherUsedLabels))
        | _ =>
            null

      def WalkerStripLabels(expr : TExpr) : TExpr
        | TExpr.Label (k, body) when !usedlabels.ContainsKey(k) =>
            body.Walk(WalkerStripLabels)
        | _ =>
            null

      e.Walk(WalkerGatherUsedLabels).Walk(WalkerStripLabels)

