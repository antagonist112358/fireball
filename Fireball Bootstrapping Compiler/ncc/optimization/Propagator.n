/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent
using Nemerle.Collections
using Nemerle.Utility
using Nemerle.Logging

using Nemerle.Compiler
using Nemerle.Compiler.Typedtree
using Nemerle.Compiler.Typedtree.TExpr
using Nemerle.Compiler.SolverMacros
using Nemerle.IO

using Nemerle.Assertions

using System.Reflection
using System.Reflection.Emit
using System.Diagnostics.SymbolStore


using Nemerle.Compiler.CFG

using SCG = System.Collections.Generic

namespace Nemerle.Compiler
  class Propagator
    public static Worthy(count : int, expr : TExpr) : bool
      if (count <= 1)
        true
      else
        mutable v = 0
        def ExprSize(e)
          | TExpr.Use(e, _) =>
            e.Walk(ExprSize)
          | _ =>
            v++
            null
        
        _ = expr.Walk(ExprSize)
        v < 2
            
    public static Propagate(cfg : CFG.Array, e_ExprAvail : array [GenKillInOut], e_ExprUsed : array [CFG.DefUseInOut]) : bool
      mutable propagated = false
      def Propagator(k, v : CFG.Node)
        match (v.expr)
          | TExpr.Def(_, into)  as d when into != null =>
              def usedby = e_ExprUsed[k].Out.Intersect(e_ExprUsed[k].Def)
          
              def CanPropagate(t : int) : bool
                e_ExprAvail[t].In.Contains(k) && into.ty.Equals(cfg.GetUse(t).ty)
              
              when (usedby.ForAll (CanPropagate) && Worthy(usedby.Count, into))
                propagated = true
                foreach (t in usedby)
                  def use = cfg.GetUse(t)
                  use.expr = into
                  when (use.def_of != null)
                    use.def_of.into = null
                d.expr = null // we don't need that variable anymore
                
          | _ =>
            ()
        true
      cfg.Iterate(Propagator)
      propagated
