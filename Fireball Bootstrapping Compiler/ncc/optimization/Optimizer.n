/*
 * Copyright (c) 2006-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
#pragma indent
using Nemerle.Collections
using Nemerle.Utility
using Nemerle.Logging

using Nemerle.Compiler
using Nemerle.Compiler.Typedtree
using Nemerle.Compiler.SolverMacros
// using Nemerle.Compiler.Parsetree
using Nemerle.IO

namespace Nemerle.Compiler
  public class Optimizer
    mutable e : TExpr;
    the_method : MethodBuilder
    static mutable OptCounter = 0
    public static mutable ignoreOptRange = false
    
    public static mutable opt = -1
    
    public this(the_method' : MethodBuilder)
      the_method = the_method'      
      e = 
        match(the_method.Header.body)
          | FunBody.Typed(e') =>
              e'
          | _ =>
              assert(false)
          
    public static StrippedOptimization(e : TExpr, parms : list [TParameter]) : bool
      mutable compile = true
      def CheckFun(e : TExpr) : TExpr
        | TExpr.Call(_, parms, _) =>
            foreach (p in parms)
              when ((p.kind == ParmKind.Ref) || (p.kind == ParmKind.Out))
                compile = false
            null

        | Try | TryFinally  =>
            compile = false
            null
                
        | _ =>
            null        

      def CheckParm(parms : list [TParameter])
        foreach (p in parms)
          when (p.kind == ParmKind.Out || p.kind == ParmKind.Ref)
            compile = false
      
      _ = e.Walk(CheckFun)
      CheckParm(parms)
      compile 


    public Run() : void
     OptCounter++
     when (StrippedOptimization(e, the_method.Header.Parameters))
      e = Preparer.Strip(e)
      when (ManagerClass.Instance.Options.Optimize["tuple"] == 1)
        e = Preparer.TupleDismounter(e)
      
      e = Preparer.RemoveDefs(e)

      when (ManagerClass.Instance.Options.Optimize["propagate"] == 1)
        mutable propagate = true
        while (propagate)
          e = Decorator.Decorate(e)
          def cfg = CFG.BuildCFG(e)
          propagate = Propagator.Propagate(cfg, CFG.BuildExprAvail(cfg),  CFG.BuildExprUsed(cfg));
          e = Decorator.Undecorate(e)

      when (ManagerClass.Instance.Options.Optimize["unify"] == 1)
        e = Decorator.Decorate(e)
        def cfg = CFG.BuildCFG(e)
        e = Unification.Apply(e, Unification.Calculate(cfg, CFG.BuildExprUsed(cfg), the_method.Header.Parameters));
        e = Decorator.Undecorate(e)
      
      
      e = Preparer.AddDefs(e, the_method.Header.Parameters)
      when (ManagerClass.Instance.Options.Optimize["print"] == 1)
        print("\n$e\n")
      the_method.Header.body = FunBody.Typed(e)
