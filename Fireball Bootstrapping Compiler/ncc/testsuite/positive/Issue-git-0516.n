using System.Console;

public module ClassAExtensions
{
  public Foo[T](this _a : A) : void where T : struct
  {
    WriteLine($"Foo with generic parameter of $(typeof(T))");
  }
}

module Program
{
  Main() : void
  {
    A().Foo.[int]();
  }
}

public class A
{
}

/*
using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Compiler.Typedtree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

namespace NccDebugMacros
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro DefFunc(typeBuilder : TypeBuilder)
  {
    DefFuncImpl.DoTransform(Macros.ImplicitCTX(), typeBuilder)
  }
  
  module DefFuncImpl
  {
    public DoTransform(typer : Typer, typeBuilder : TypeBuilder) : void
    {
      Macros.DefineCTX(typer);
      def code = <[
              // comment before block 1
              {
                // comment before text 1
                WriteLine("text 1"); // end line comment 1
                WriteLine("text 2"); // end line comment 2
                
              }
              // comment before text 3
              WriteLine("text 3"); // end line comment 3
        ]>;
      // TODO: Add implementation here.
      typeBuilder.Define(<[ decl:
          public class Test
          {
            public Method1() : void
            {
              $code
            }
          }
      ]>);
    }
  }
}
*/
/*
BEGIN-OUTPUT
Foo with generic parameter of System.Int32
END-OUTPUT
*/
