using System.Console;
using System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

namespace Core.Engine.Combers
{
  public variant Expression
  {
    | Monad { value : Unit }
  }
  
  public variant Unit 
  {
    | Plugin { value : IExtention }
    | Variable { value : string }
  }
  
  public interface IExtention { }
  
  public class LowIndexExtention : IExtention
  {
    public E : Expression { get; set; }
    public Power : Expression { get; set; }
  }
  
  public class HiIndexExtention : IExtention
  {
    public E : Expression { get; set; }
    public Power : Expression { get; set; }
  }
  
  public class FullIndexExtention : IExtention
  {
    public E : Expression { get; set; }
    public Hi : Expression { get; set; }
    public Low : Expression { get; set; }
  }

  public class IndexConstComber
  {
    static Main() : void
    {
      def x = IndexConstComber.PreFolder();
      
      def value1 = FullIndexExtention();
      value1.E   = Expression.Monad(Unit.Variable(""));
      value1.Hi  = Expression.Monad(Unit.Variable(""));
      value1.Low = Expression.Monad(Unit.Variable(""));
      
      x.Clone(value1);

      def value2    = LowIndexExtention();
      value2.E      = Expression.Monad(Unit.Variable(""));
      value2.Power  = Expression.Monad(Unit.Variable(""));
      
      x.Clone(value2);
      
      def value3    = HiIndexExtention();
      value3.E      = Expression.Monad(Unit.Variable(""));
      value3.Power  = Expression.Monad(Unit.Variable(""));
      
      x.Clone(value3);
      
      def value4    = HiIndexExtention();
      value4.E      = Expression.Monad(Unit.Plugin(value4));
      value4.Power  = Expression.Monad(Unit.Variable(""));
      
      x.Clone(value4);
    }
    
    public class PreFolder
    {
      public Clone(extention : IExtention) : void 
      {
        match(extention)
        {
          | LowIndexExtention where ( 
              E = Expression.Monad(Unit.Variable(_arg)),
              Power = Expression.Monad(Unit.Variable(_number))
            ) => WriteLine("good 1")
          | HiIndexExtention where ( 
              E = Expression.Monad(Unit.Variable(_arg)),
              Power = Expression.Monad(Unit.Variable(_number))
            ) => WriteLine("good 2")
          | FullIndexExtention where ( 
              E = Expression.Monad(Unit.Variable(_arg)),
              Hi = Expression.Monad(Unit.Variable(_hi)),
              Low = Expression.Monad(Unit.Variable(_low))
            ) => WriteLine("bad")
          | _ => WriteLine("default")
        }
      }
    }
  }
}

/*
BEGIN-OUTPUT
bad
good 1
good 2
default
END-OUTPUT
*/
