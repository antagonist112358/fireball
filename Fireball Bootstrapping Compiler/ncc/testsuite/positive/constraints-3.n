using System;
using System.Console;

class Context1 : Context
{
  public XSymbol2 : Symbol2 = null;

  public sealed override Bind[T](name : string) : option[T]
  {
    match (XSymbol2)
    {
      | _x is T => ()
      | _ => ()
    }
    
    match (Bind2(name))
    {
      | [one] =>
        match (one)
        {
          | r is T => Some(r)
          | _ => None()
        }

      | _ => None()
    }
  }

  Bind2(name : string) : list[Symbol]
  {
    | "x" => [Symbol1("x")]
    | "y" => [Symbol2("y")]
    | _   => []
  }
}

public class Symbol {}

public abstract class Context
{
  public abstract Bind[T](name : string) : option[T]
    where T : Symbol
}

public class Symbol1 : Symbol
{
  private _name : string;
  public this(name : string) { _name = name }
  public override ToString() : string { _name }
}

public class Symbol2 : Symbol
{
  private _name : string;
  public this(name : string) { _name = name }
  public override ToString() : string { _name }
}

module Program
{
  Main() : void
  {
    def context = Context1();
    WriteLine(context.Bind.[Symbol1]("x"));
    WriteLine(context.Bind.[Symbol2]("y"));
    WriteLine(context.Bind.[Symbol2]("z"));
  }
}

/*
BEGIN-OUTPUT
Some (x)
Some (y)
None
END-OUTPUT
*/
