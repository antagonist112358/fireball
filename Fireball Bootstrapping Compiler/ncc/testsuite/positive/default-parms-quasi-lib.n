// REFERENCE: Nemerle.Compiler
using System.Console;
using Nemerle;
using Nemerle.Compiler;

namespace MacroLibrary1
{
  public class Test2
  {
  }
  
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro DefaultParmsQuasi(tb : TypeBuilder) 
  {
    DefineDefaultParmsQuasiImpl.DoTransform(tb)
  }

  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro DefaultParmsQuasi(tb : TypeBuilder) 
  {
    DefineDefaultParmsQuasiImpl.DoTransform2(tb)
  }

  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro DefaultParmsQuasi(tb : TypeBuilder) 
  {
    DefineDefaultParmsQuasiImpl.DoTransform3(tb)
  }
  
  module DefineDefaultParmsQuasiImpl
  {
    public DoTransform(tb : TypeBuilder) : void
    {
      def param = <[ parameter: [NotNull] a : Test2 = null ]>;
      def param = match (param)
                  {
                     | <[ parameter: ..$attr $(n : name) : $t = $e ]> => <[ parameter: ..$attr $n : $t = $e ]>
                     | p                                              => p
                  }
      def mess = if (param.modifiers.custom_attrs.Exists(_ is <[ NotNull ]>)) "ok" else "fail";
      param.modifiers.CustomAttributes = [];
      def parms = param :: [];
      def mess = $"Test parameter null $mess";
      _ = tb.Define(<[decl: public PTest(..$parms) : void { _ = a; WriteLine($mess) } ]>);
    }

    public DoTransform2(tb : TypeBuilder) : void
    {
      def expr = <[ 0 ]>;
      def parms = <[parameter: a : int = $expr ]> :: [];
      _ = tb.Define(<[decl: public PTest3(..$parms) : void { _ = a; WriteLine("Test parameter int") } ]>);
    }

    public DoTransform3(tb : TypeBuilder) : void
    {
      
      _ = tb.Define(<[decl: public PTest4[T](_ : T, _ : T = default(_)) : void { WriteLine("Test parameter default2") } ]>);
      _ = tb.Define(<[decl: public PTest2[T](_ : T, _ : T = default(T)) : void { WriteLine("Test parameter default") } ]>);
    }
    
  }
}
