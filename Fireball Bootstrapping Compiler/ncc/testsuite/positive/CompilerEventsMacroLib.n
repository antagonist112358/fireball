// REFERENCE: Nemerle.Compiler

using Nemerle.Compiler;

namespace CompilerEventsMacro
{
  [Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Class, Inherited = false, AllowMultiple = false)]
  public macro Macro1(tb : TypeBuilder)
  {
    Impl.DoWork(Nemerle.Macros.ImplicitCTX(), tb);
  }
  
  module Impl
  {
    OnTypeTreeBuildFinish(manager : ManagerClass) : void
    {
      manager.TypeTreeBuildFinish -= OnTypeTreeBuildFinish;
      
      match (manager.UserData["class name"])
      {
        | typeBuilders is list[TypeBuilder] => 
          match (typeBuilders.Find(tb => tb.Name == "Program"))
          {
            | Some(tb) => 
              def typeNames = $<#..$(typeBuilders.Rev(); ", "; _.FullName)#>;
              _ = tb.DefineWithSource(<[ decl: public static Method() : string { $(typeNames : string) } ]>);
              
            | _ => ()
          }
            
        | _                   => ()
      }
      
    }
  
    public DoWork(typer : Typer, tb : TypeBuilder) : void
    {
      def manager  = typer.Manager;
      def userData = manager.UserData;
      
      match (userData["class name"])
      {
        | lst is list[TypeBuilder] => userData["class name"] = tb :: lst
        | null                     => 
          manager.TypeTreeBuildFinish += OnTypeTreeBuildFinish;
          userData["class name"] = [tb]
        | _                        => Message.Error(<#The typer.Manager.UserData["class name"] contains data which not subtype of TypeBuilder#>);
      }
    }
  }
}