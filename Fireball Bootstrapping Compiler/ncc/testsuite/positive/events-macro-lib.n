// REFERENCE: Nemerle.Compiler
using Nemerle;
using Nemerle.Compiler;
using PT = Nemerle.Compiler.Parsetree;

namespace Lib
{
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  public macro CreateEvents(tb : TypeBuilder)
  {
    Helper.CreateEvents(tb, ["Foo", "Bar"], ["Baz", "Bla"], ["1", "2"]);
  }

  module Helper
  {
    public CreateEvents(tb :TypeBuilder, events_1 : list[string], events_2 : list[string], events_3 : list[string]) : void
    {
      tb.Define(<[ decl: public event OnDoSomething : System.EventHandler; ]>);

      foreach(name in events_1)
        tb.Define(<[ decl: public event $(name : usesite) : System.EventHandler; ]>);

      foreach(name in events_2)
        tb.Define(<[ decl:
            public event $(name + "_suffix" : usesite) : System.EventHandler
            {
              add { System.Console.WriteLine(value); }
              remove { def _ = value; }
            }
          ]>);

      foreach(name in events_3)
      {
        def symbol = Macros.NewSymbol(name);

        tb.Define(<[ decl:
            public event $(symbol : name) : System.EventHandler
            {
              add { System.Console.WriteLine(value); }
              remove { def _ = value; }
            }
          ]>);
      }
    }
  }
}