// REFERENCE: System.Core
// REFERENCE: Nemerle.Linq
using Nemerle.Utility;

using System;
using System.Console;
using System.Linq;
using System.Linq.Expressions;

[assembly: ExtensionPattern(Expression,
  Lambda(delegateType, body, parameters)
  = LambdaExpression where(Type=delegateType, Body=body, Parameters=parameters))]
[assembly: ExtensionPattern(Expression,
  Add(left, right)
  = BinaryExpression where(NodeType=ExpressionType.Add, Left=left, Right=right))]
[assembly: ExtensionPattern(Expression,
  AddChecked(left, right)
  = BinaryExpression where(NodeType=ExpressionType.AddChecked, Left=left, Right=right))]

module Program
{
  TestExpressionTree[T1, T2](expr : Expression[Func[T1, T2]], value : T1) : void
  {
    match (expr)
    {
      | Lambda(_, Add(Add(e1, e2), e3), parameters) =>
        WriteLine($"We found the x + y + z expression! Here it is: $e1 + $e2 + $e3");
        foreach (p in parameters)
          WriteLine($"  Parameter: $(p.Name) : $(p.Type)");

      | Lambda(_, body, parameters) =>
        WriteLine($"Lambda(body='$body')");
        foreach (p in parameters)
          WriteLine($"  Parameter: $(p.Name) : $(p.Type)");
    }

    def f   = expr.Compile();
    def res = f(value);

    WriteLine(res);
  }

  Main() : void
  {
    TestExpressionTree(x => x + 2 + 3, 42);
    TestExpressionTree(x => x - 2L, 7L);
    //_ = ReadLine();
  }
}

/*
BEGIN-OUTPUT
We found the x + y + z expression! Here it is: x + 2 + 3
  Parameter: x : System.Int32
47
Lambda(body='(x - Convert(2))')
  Parameter: x : System.Int64
5
END-OUTPUT
*/
