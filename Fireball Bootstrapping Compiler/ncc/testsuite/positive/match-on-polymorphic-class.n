using System;
using System.Console;
using Nemerle.Utility;

[Record]
class A
{
  public Field1 : int;
  public Field2 : A;
  public override ToString() : string { $<#A($Field1, '$Field2')#> }
}

[Record]
class B : A
{
  public Field3 : string;
  public override ToString() : string { $<#B($Field1, '$Field2', "$Field3")#> }
}

module Program
{
  Main() : void
  {
    def test1 (a : A)
    {
      | B where (Field1 = 1) as x      => WriteLine($"1 $x");
      | A where (Field1 = 1) as x      => WriteLine($"2 $x");
      | B where (Field3 = "test") as x => WriteLine($"3 $x");
      | _ => WriteLine("fail");
    }
    
    test1(A(1, null));
    test1(B(1, null, "test"));
    test1(B(2, null, "test"));

    WriteLine();

    def test2 (a : A)
    {
      | (1, B where (Field1 = 1))                => WriteLine($"1 $a");
      | (1, A where (Field1 = 1) as x)           => WriteLine($"2 x=$x");
      | (1, B where (Field3 = "test") as x) as y => WriteLine($"3 x=$x y=$y");
      | _                                        => WriteLine("fail");
    }
    
    test2(A(1, B(1, null, "test")));
    test2(A(1, A(1, null)));
    test2(B(1, A(1, null), "test"));
    test2(A(1, B(2, null, "test")));
    
    //_ = ReadLine();
  }
}

/*
BEGIN-OUTPUT
2 A(1, '')
1 B(1, '', "test")
3 B(2, '', "test")

1 A(1, 'B(1, '', "test")')
2 x=A(1, '')
2 x=A(1, '')
3 x=B(2, '', "test") y=A(1, 'B(2, '', "test")')
END-OUTPUT
*/
