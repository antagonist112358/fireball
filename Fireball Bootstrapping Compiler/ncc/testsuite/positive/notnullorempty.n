using System.Console;
using Nemerle.Assertions;
using Nemerle.IO;

module M
{
  TestNotNullOrEmpty([NotNullOrEmpty] s : string) : void
  {
    WriteLine(s);
  }
  
  Main() : void
  {	
    System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
    System.Threading.Thread.CurrentThread.CurrentUICulture = System.Globalization.CultureInfo.InvariantCulture;
    
    try
    {
      TestNotNullOrEmpty(null);
    }
    catch
    {
      | e is System.ArgumentException =>
        WriteLine(e.ParamName);

        def see = ". See ";
        def seeIndex = e.Message.IndexOf(see);
      
        def pos = "positive/";
        def posIndex  = e.Message.IndexOf(pos);
      
        print (e.Message.Substring(0, seeIndex + see.Length) +
               e.Message.Substring(posIndex) + "\n");        
    }
   
    try
    {
      TestNotNullOrEmpty("");
    }
    catch
    {
      | e is System.ArgumentException =>
        WriteLine(e.ParamName);
        
        def see = ". See ";
        def seeIndex = e.Message.IndexOf(see);
      
        def pos = "positive/";
        def posIndex  = e.Message.IndexOf(pos);
      
        print (e.Message.Substring(0, seeIndex + see.Length) +
               e.Message.Substring(posIndex) + "\n");
    }
    
    // Must not throw
    TestNotNullOrEmpty("a");
  }
}

/*
BEGIN-OUTPUT
s
The ``NotNullOrEmpty'' contract of parameter ``s'' has been violated. See positive/notnullorempty.n:7:39:7:40: .
Parameter name: s
s
The ``NotNullOrEmpty'' contract of parameter ``s'' has been violated. See positive/notnullorempty.n:7:39:7:40: .
Parameter name: s
a
END-OUTPUT
*/