// REFERENCE: System.Data
// REFERENCE: System.Web

using System.Console;
using System.Data;

namespace AccessibilityCheckNotTooRestrictive
{
  internal class Foo 
  {
    internal interface Bar { }  
  }
  
  public class Baz : Foo.Bar { }
}

class RecursiveAccessiblity
{
  private enum A
  {
    | B
    | C
  }
  
  protected class N { public foo () : N { null } }
}


public class aspx : System.Web.UI.Page, System.Web.SessionState.IRequiresSessionState 
{
  // overriding protected (and even special name) property
  protected override AutoHandlers : int
  {
    get { 0  }
    set { ignore (value)  }
  }
}

namespace Bug594
{
  class Ax
  {
    class Bx : Ax { x : Bx; }
  }
}

namespace Bug595 
{
  class Ax 
  {
    protected x : int = 6;
  }
  
  class Bx:Ax 
  {
    class Cx
    {
      public foo(b : Bx) : void { _ = b.x; }
    }
  }
}

namespace UninitializedSubtyping
{
  class A : DataRow
  {
    this (builder : DataRowBuilder)
    {
      base (builder);
    }
  }

  public class Test
  {
    public class Foo
    {
      protected interface IBar {}
    }

    interface G [T] { }

    private class Bar : Foo, G [Foo.IBar]
    {
    }

    private class Bar1 [A] : Foo where A : Foo.IBar { }
  }
}

namespace ProtectedAccessCheck
{
  public class A
  {
    protected mutable _field : int;
    
    public Print() : void { WriteLine(_field) }

    public MakeB() : B
    {
      def b = B();
      b._field = 1;
      b
    }
  }

  public class B : A
  {
    public Update_x()   : void { _field   = 2; }
    public Set_x(d : D) : void { d._field = 3; }
    public Set_x(b : B) : void { b._field = 4; }
  }

  public class D : B { }

  module Program
  {
    Main() : void
    {
      def a = A();
      a.Print();
      def b1 = a.MakeB();
      b1.Print();
      def b2 = B();
      b2.Print();
      b2.Update_x();
      b2.Print();
      def d = D();
      b2.Set_x(d);
      d.Print();
      b2.Set_x(b1);
      b1.Print();
    }
  }
}

/*
BEGIN-OUTPUT
0
1
0
2
3
4
END-OUTPUT
*/ 