class A {
  public this (a : ref int, b : int, c : ref int) {
    System.Console.WriteLine ($"Got $a $b $c");
    a = 2;
    System.Console.WriteLine ($"Is now $a $b $c");
  }
}

class B : A {
  x : int;
  
  public this () {
    mutable i = 10;
    this (ref i, 5);
  }

  public this (a : ref int, b : int) {
    System.Console.WriteLine ($"B(_,_) got $a $b");
    base (ref a, { def res = b + 1; System.Console.WriteLine (b); res}, ref a);
    x = try { 123 } finally {};
    System.Console.WriteLine ($"B(_,_) has now $a $b, x = $x");
  }
}

struct S {
  public this (a : int) {
    mutable i = 10;
    this (ref i, try { a } finally {});
  }

  public this (a : ref int, b : int) {
    System.Console.WriteLine ($"S(_,_) got $a $b");
  }

  
  public Method (a : int) : void {
    mutable i = 10;
    Method (ref i, try { a } finally {});
  }

  public Method (a : ref int, b : int) : void {
    System.Console.WriteLine ($"Method(_,_) got $a $b");
  }

  public ModifyMe () : void {
    this = try { S(); } finally {}
  }
}

class C {
  mutable field : int;
  
  take_parm (b : bool) : void {
    System.Console.WriteLine (b);
  }

  static Modify (x : ref int) : void {
    x = try { x + 1} finally {}
  }
  
  static Main () : void {
    System.Console.WriteLine ("{0}", try { 1 } finally {});
    C().take_parm (try { false } finally {});
    _ = B ();
    def s = S (5);
    s.Method (6);
    s.ModifyMe ();
    
    def ar1 = array [4, 5, try { 6 } finally {}, 7];
    System.Console.WriteLine (Nemerle.Collections.NList.FromArray (ar1));
    
    def ar2 = array.[2] [[4, 5], [try { 6 } finally {}, 7]];
    System.Console.WriteLine ($"$(ar2.GetLength (0)) $(ar2.GetLength (1)) [[$(ar2[0, 0]), $(ar2[0, 1])], [$(ar2[1, 0]), $(ar2[1, 1])]]");
    def tuple = (5, try { 6 } finally {}, 7) : object;
    System.Console.WriteLine (tuple);

    def c = C ();
    c.field = try { 5 } finally {};
    System.Console.WriteLine (c.field);
    Modify (ref c.field);
    System.Console.WriteLine (c.field);

    (try {ar1} finally {}) [try {0} finally {}] = try {42} finally {};
    System.Console.WriteLine ((try {ar1} finally {}) [try {0} finally {}]);
    
    (try {ar2} finally {}) [try {0} finally {}, try {0} finally {}] = try {5} finally {};
    System.Console.WriteLine ((try {ar2} finally {}) [try {0} finally {}, try {0} finally {}]);
  }
}
/*
BEGIN-OUTPUT
1
False
B(_,_) got 10 5
5
Got 10 6 10
Is now 2 6 2
B(_,_) has now 2 5, x = 123
S(_,_) got 10 5
Method(_,_) got 10 6
[4, 5, 6, 7]
2 2 [[4, 5], [6, 7]]
(5, 6, 7)
5
6
42
5
END-OUTPUT
*/
