
public interface IMonad[A]
{
     /*
      * a static unit (return in haskell) method should be part of the interface
      * unit(o:object):Monad --could just be the ctor
      */
    bind[B](f : (A -> IMonad[B])) : IMonad[B];
}

public class Continuation[R,A]:IMonad[A]
{
    
    private value : (A -> R) -> R;
  
    public static return (a : A): Continuation[R,A]{ 
        Continuation(fun(k){k(a)}) 
    }
    public static CallCC[B](f : (A -> Continuation[R,B]) -> Continuation[R,A]) : Continuation[R,A]{
        Continuation(fun(k)
                     {
                         def g(a)
                         {
                             Continuation(fun(_){k(a)})
                         };
                         (f(g)).value(k)
                     })
    }
    public this(f : (A -> R) -> R ){ 
        value = f;
    }
    public bind[B](f : (A -> IMonad[B])) : IMonad[B]{
        Continuation(fun(k)
                     { 
                         value(fun (a)
                               {
                                 def g = f(a) :> Continuation[R,B]; 
                                 g.value(k) 
                               })
                     })
    }
    public run(f : A -> R):R
    {
       value(f)
    }
    
}

public class Driver{
    public static Main():void{
        def myTry[A,B] (f : ((A -> Continuation[B,A]) * A)  -> Continuation[B,A], x){
            Continuation.CallCC(fun(e)
                                {
                                    f(e,x)
                                })
        };
        def tryEntry(e, x){
          Continuation[int,int].return(3).bind(fun (a){
                Continuation[int,int].return(4).bind(fun(b){
                    Continuation[int,int].return(2).bind(fun(c){
                        match (x){
                            -45 => e(0)
                            |_  => Continuation[int,int].return(x).bind(fun(whoops){
                                  Continuation[int,int].return(9).bind(fun(d){
                                      Continuation[int,int].return(a + b + c + whoops + d)
                                  })
                            })}
                    })
                })
            }) :> Continuation[int,int]
        };
        def simpleTryEntry(_, _){
             Continuation.return(3)
        }

        System.Console.WriteLine(myTry(tryEntry, 7).run(fun(a){a}).ToString());
        System.Console.WriteLine(myTry(simpleTryEntry, 7).run(fun(a){a}).ToString())
    }
}

/*
25
3
*/
