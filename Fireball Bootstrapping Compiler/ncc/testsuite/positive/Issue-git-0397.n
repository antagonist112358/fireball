// REFERENCE: Nemerle.Unsafe.dll
using System.Runtime.InteropServices;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using Nemerle.Unsafe;

module Program
{
  Test1() : void
  {
    pinned (p1 = str)
    {
      WriteLine(p1[2].ToString());
      WriteLine((p1[3] : int).ToString());
      WriteLine(p1[0]);
      UnsafeMethod(p1);
   }
  }
  
  mutable i = 0;

  ary = array[42, 2, 3];
  str = "abc";
  mutable _ptr : char*;
  
  TupleTest1(_tup : int * string) : void
  {
  }

  TupleTest2(_tup : int * string * (int * long)) : void
  {
  }
  
  UnsafeMethod(ptr : char*) : void
  {
    _ptr = ptr;
    WriteLine(*ptr);
    WriteLine(*(ptr + 1));
  }

  Test2() : void
  {
    WriteLine(*(_ptr + 1));
    
    pinned (p1 = str)
    {
      WriteLine(string(p1, 1, 2));
      
      def len = str.Length;

      WriteLine("for with index");
      
      for (mutable i = 0; i < len; i++)
        WriteLine(p1[i]);
        
      WriteLine("for with pinter");
      
      for (; *p1 != '\0'; p1++)
        WriteLine(*p1); 

      WriteLine("end for");
    }

    i = 0;
    
    pinned (p2 = ary)
    {
      WriteLine(p2[i]);
      p2 += 2;
      WriteLine(*p2);
    }
  }
  
  Test3(ptrIn : int*) : void
  {
    WriteLine("Test3()");
    WriteLine(*ptrIn);
    mutable ptr = ptrIn;
    ptr += 10000;
    WriteLine(ptr[-10000]);
    ptr = ptrIn + 100;
    WriteLine(ptr[-100]);
    ptr = ptrIn + 3;
    WriteLine(ptr[-2]);
    ptr = ptrIn + 3;
    WriteLine(ptr[-1]);
    ptr = ptrIn;
    WriteLine(ptr[1 - 1]);
    WriteLine(ptr[0]);
    WriteLine(ptr[1]);
    WriteLine(ptr[2]);
    ptr = ptrIn + -6;
    WriteLine(ptr[8]);
    ptr = ptrIn + -10000;
    WriteLine(ptr[10000]);
  }
  
  
  Main() : void
  {
    Test1();
    Test2();
    pinned (p = ary)
      Test3(p);
      
    def h = GCHandle.Alloc("qwe", GCHandleType.Pinned);
    UnsafeMethod(h.AddrOfPinnedObject() :> char*);
    h.Free();
  }
}

/*
BEGIN-OUTPUT
c
0
a
a
b
b
bc
for with index
a
b
c
for with pinter
a
b
c
end for
42
3
Test3()
42
42
42
2
3
42
42
2
3
3
42
q
w
END-OUTPUT
*/
