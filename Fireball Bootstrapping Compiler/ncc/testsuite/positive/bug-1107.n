using System;
using System.Console;
using Nemerle.Utility;
using System.Collections.Generic;

module Program
{
  class A : IEqualityComparer[int * double]
  {
    public Equals(m1 : int*double, m2 : int*double) : bool
    {
      m1[0] == m2[0] && m1[1] == m2[1];
    }
    
    public GetHashCode(m: int*double) : int
    {
      m[0].GetHashCode() ^ m[1].GetHashCode();
    }
  }
  
  struct B : IComparable[int*double]
  {
    public CompareTo(m : int*double) : int
    {
      m[0];
    }
  }
  
  Main() : void
  {
    Test(TestA, "A");
    Test(TestB, "B");
  }
  
  Test(f : void -> void, m : string) : void
  {
    try
    {
      f();
      Console.WriteLine($"'$m' test is good");
    }
    catch
    {
      | e is TypeLoadException => WriteLine($"'$m' test failed.$(Environment.NewLine)$e");
      | e is Exception => WriteLine(e);
    }
  }
  
  TestA() : void
  {
    _ = typeof(A);
  }
  
  TestB() : void
  {
    _ = typeof(B);
  }
}

/*
BEGIN-OUTPUT
'A' test is good
'B' test is good
END-OUTPUT

*/