using System;
using System.Reflection;
using System.Runtime.InteropServices;

using System.Console;

module DllNames
{
  public MyDll = "my.dll";
  public Ext = ".dll"
}

public module Program
{
  [DllImport(DllNames.MyDll)]
  public extern Foo1() : void;

  [DllImport("my" + DllNames.Ext)]
  public extern Foo2() : void;

  Main() : void
  {
    def checkDllImport(m, dllName)
    {
      if(m.Attributes %&& MethodAttributes.PinvokeImpl)
      {
        def dllImport = m.GetCustomAttributes(
          typeof(System.Runtime.InteropServices.DllImportAttribute),
          false)[0]
          :> System.Runtime.InteropServices.DllImportAttribute;
        if(dllImport.Value == dllName)
          WriteLine("OK");
        else
          WriteLine("dll name mismatch");
      }
      else
        WriteLine("no PInvoke");
    }

    checkDllImport(typeof(Program).GetMethod("Foo1"), "my.dll");
    checkDllImport(typeof(Program).GetMethod("Foo2"), "my.dll");
  }
}
/*
BEGIN-OUTPUT
OK
OK
END-OUTPUT
*/