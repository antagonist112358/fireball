using System;
using System.Console;
using SCG = System.Collections.Generic;

using Nemerle.Imperative;

class Unit {
  private this() {}
  public static Instance : Unit = Unit();
}

variant coroutine[A, B]
{
  | Some { x : B; f : A -> coroutine[A, B]; }
  | None
}

type generator[T] = coroutine[Unit, T];

module Program {

  public range(start : int, stop : int, step : int = 1) : generator[int]
  {
    if (start == stop)
      generator.None()
    else
      generator.Some(start, (_) => range(start + 1, stop, step))
  }

  public enumerateGenerator[A](g : generator[A]) : SCG.IEnumerable[A]
  {
    mutable gen : generator[A] = g;
    while (true) {
      match (gen) {
        | None() => break
        | Some(x, more) => { 
          yield x;
          gen = more(Unit.Instance)
        }
      }
    }
  }

  Main() : void {
    foreach (x in enumerateGenerator(range(0,10)))
      WriteLine(x)
  }

}
/*
BEGIN-OUTPUT
0
1
2
3
4
5
6
7
8
9
END-OUTPUT
*/