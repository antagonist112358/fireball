using System;
using System.Console;
using System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

module Program
{
  Main() : void
  {
    DbCore().Save([A(Guid.Empty)]);
  }
}

public class DbCore
{
  public Save[T](objs : IEnumerable[T]) : void
    where T: DerivedClass[T]  // changing to where T:BaseClass doesn't help
  {
    def Insert(o : T)
    {
      WriteLine(o.Serialize());  // this code leads to internal compiler error
    }

    foreach (o in objs)
      Insert(o)
  }
}
[Serializable]
[Record]
public class BaseClass
{
  public ID : Guid;
  
  protected internal Serialize() : list[string * object]  // changing to PUBLIC solves the problem
  {
    ("ID", ID : object) :: []
  }
}

[Serializable]
[Record]
public abstract class DerivedClass[T] : BaseClass
  where T: DerivedClass[T]
{
}

[Record]
public class A : DerivedClass[A]
{
}

/*
BEGIN-OUTPUT
[(ID, 00000000-0000-0000-0000-000000000000)]
END-OUTPUT
*/
