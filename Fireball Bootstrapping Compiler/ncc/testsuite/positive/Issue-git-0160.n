// REFERENCE: System.Core

using System;
using System.Console;
using System.Reflection;
using System.Linq;

//public enum E { | X | Y }  // we can't use E because SRE 3.5 has bug!

[Record] public class A : Attribute
{
  public Prop : object  { get; set; }
  public override ToString() : string { Program.ToStr(Prop) }
}
[Record] public class B_byte  : Attribute
{
  public Prop : array[byte]  { get; set; }
  public override ToString() : string { Program.ToStr(Prop) }
}
[Record] public class B_E     : Attribute
{
  public Prop : array[ConsoleKey] { get; set; }
  public override ToString() : string { Program.ToStr(Prop) }
}
[Record] public class B_float : Attribute
{
  public Prop : array[float] { get; set; }
  public override ToString() : string { Program.ToStr(Prop) }
}


[A(array[] : array[int])]
[B_float(array[])]
[B_float(array[1.1f])]
[B_E(array[ConsoleKey.A, ConsoleKey.B : ConsoleKey])]
[B_byte(array[1 : byte, 2 : byte])]
[A(array[ConsoleKey.A : object])]
[A(array["t" : object, typeof(int), array[typeof(long) : object, 42]])]
[A(array[1 : byte, 2b])]
module Program
{
  public ToStr(o : object) : string
  {
    match (o)
    {
      | null => "null"
      | xs is array[byte]   => $"array(byte)[..$xs]"
      | xs is array[float]  => $"array(float)[..$xs]"
      | xs is array[ConsoleKey] => $"array(ConsoleKey)[..$xs]"
      | xs is array[object] => $<#array[..$(xs; ", "; ToStr)]#>
      | x is string => $<#"$x"#>
      | x is Type => $<#typeof($x)#>
      | _ => o.ToString()
    }
  }
  
  Main() : void
  {
    // Because we deal with floats it should not depend on national formatting
    System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
    
    def attrs = Assembly.GetExecutingAssembly().GetTypes()
      .SelectMany(t => t.GetCustomAttributes(false))
      .Select(a => $"$(a.GetType().Name)($a)")
      .OrderBy(x => x);
    
    foreach (a in attrs)
      WriteLine(a);
  }
}

/*
BEGIN-OUTPUT
A(array["t", typeof(System.Int32), array[typeof(System.Int64), 42]])
A(array[])
A(array[1, 2])
A(array[A])
B_byte(array(byte)[1, 2])
B_E(array(ConsoleKey)[A, B])
B_float(array(float)[])
B_float(array(float)[1.1])
END-OUTPUT
*/
