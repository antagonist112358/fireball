using System;
using System.Console;
using Nemerle;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using System.Linq;

module Test 
{

  public Former(e : PExpr, typer : Typer) : void
  {
    def fld_type = match (e)
    {
      | <[ $(name : name) : $type ]> => type
      | _                            => null
    }

    def fieldTypes(ty) //здесь проблема, если убрать TypeInfo!
    {
      def fields = match (ty)
                    {
                      | ty is TypeBuilder => ty.GetParsedMembers().OfType.[ClassMember.Field]().Select(f => typer.BindFixedType(f.ty).TypeInfo)
                      | _                 => ty.GetFields(BindingFlags.Public %| BindingFlags.NonPublic %| BindingFlags.Instance).Select(x => x.GetMemType().TypeInfo)          
                    }
      fields.Where(_ != null)
    }

    def isPrimitiveValue(ty)                          
    {
      ty.IsValueType && (ty.IsPrimitive || fieldTypes(ty).All(isPrimitiveValue))
    }

    def ti = typer.BindFixedType(fld_type);
    when (isPrimitiveValue(ti.TypeInfo)) 
    {
    }
  }
} 
