using System;
using System.Console;
using Nemerle;
using Nemerle.Utility;

module Program {

    // Haskell-like
    Fix[T](f : LazyValue[T] -> T) : T {
        f(lazy(Fix(f)))
    }

    // C#-like
    Fix[A, B](f : (A -> B) -> (A -> B)) : A -> B {
        f(x => Fix(f)(x))
    }

    Main() : void {
        // 1 - Haskell
        def factCore = f => x => if(x <= 0) 1 else x * f.Value(x - 1);
        def fact = Fix(factCore);
        WriteLine(fact(5));


        // 2 - C#
        def factCore = f => x => if(x <= 0) 1 else x * f(x - 1);
        def fact = Fix(factCore);
        WriteLine(fact(5));


        // 3 - Haskell
        def genCore = f => (index, item) => if(index <= 0) [] else item :: f.Value(index - 1, item);
        def gen = Fix(genCore);
        WriteLine(gen(5, 42));


        // 4 - C#
        def genCore = f => (index, item) => if(index <= 0) [] else item :: f( (index - 1, item) );
        def gen = Fix(genCore);
        WriteLine(gen(5, 42));

        // 5 - C#
        def genCore = f => (index, item) => if(index <= 0) [] else item :: f(index - 1, item);
        def gen = Fix(genCore);
        WriteLine(gen(5, 42));
    }
}

/*
BEGIN-OUTPUT
120
120
[42, 42, 42, 42, 42]
[42, 42, 42, 42, 42]
[42, 42, 42, 42, 42]
END-OUTPUT
*/