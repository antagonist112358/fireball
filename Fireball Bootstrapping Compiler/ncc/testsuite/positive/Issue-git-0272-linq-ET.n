// REFERENCE: System.Core
// REFERENCE: Nemerle.Linq
using Nemerle.Linq;
using System.Linq.Expressions;

using System;
using System.Console;

public module Program
{
  Exec[R](e : Expression[Func[R]]) : R { e.Compile()() }
  
  Main() : void
  {
    Threading.Thread.CurrentThread.CurrentCulture = Globalization.CultureInfo.InvariantCulture;

    def test1(value : DateTime, nullableValue : DateTime?) : void
    {
      DebugPrint(Exec(() => value));
      DebugPrint(Exec(() => nullableValue));
      WriteLine();
      DebugPrint(Exec(() => nullableValue == value));
      DebugPrint(Exec(() => nullableValue != value));
      DebugPrint(Exec(() => nullableValue <  value));
      DebugPrint(Exec(() => nullableValue <= value));
      DebugPrint(Exec(() => nullableValue >  value));
      DebugPrint(Exec(() => nullableValue >= value));
      WriteLine();
      DebugPrint(Exec(() => value == nullableValue));
      DebugPrint(Exec(() => value != nullableValue));
      DebugPrint(Exec(() => value <  nullableValue));
      DebugPrint(Exec(() => value <= nullableValue));
      DebugPrint(Exec(() => value >  nullableValue));
      DebugPrint(Exec(() => value >= nullableValue));
    }

    def test2(nullable_1 : DateTime?, nullable_2 : DateTime?) : void
    {
      DebugPrint(Exec(() => nullable_1));
      DebugPrint(Exec(() => nullable_2));
      WriteLine();
      DebugPrint(Exec(() => nullable_2 == nullable_1));
      DebugPrint(Exec(() => nullable_2 != nullable_1));
      DebugPrint(Exec(() => nullable_2 <  nullable_1));
      DebugPrint(Exec(() => nullable_2 <= nullable_1));
      DebugPrint(Exec(() => nullable_2 >  nullable_1));
      DebugPrint(Exec(() => nullable_2 >= nullable_1));
      WriteLine();
      DebugPrint(Exec(() => nullable_1 == nullable_2));
      DebugPrint(Exec(() => nullable_1 != nullable_2));
      DebugPrint(Exec(() => nullable_1 <  nullable_2));
      DebugPrint(Exec(() => nullable_1 <= nullable_2));
      DebugPrint(Exec(() => nullable_1 >  nullable_2));
      DebugPrint(Exec(() => nullable_1 >= nullable_2));
    }

    def value = DateTime(2012, 1, 1);

    test1(value, value);
    WriteLine();
    test1(value, value.AddDays(1));
    WriteLine();
    test1(value, null);

    WriteLine();
    WriteLine();

    test2(value, value);
    WriteLine();
    test2(value, value.AddDays(1));
    WriteLine();
    test2(value, null);
    WriteLine();
    test2(null, null);
  }
}

/*
BEGIN-OUTPUT
Exec(() => value) ==> 01/01/2012 00:00:00
Exec(() => nullableValue) ==> 01/01/2012 00:00:00

Exec(() => nullableValue == value) ==> True
Exec(() => nullableValue != value) ==> False
Exec(() => nullableValue < value) ==> False
Exec(() => nullableValue <= value) ==> True
Exec(() => nullableValue > value) ==> False
Exec(() => nullableValue >= value) ==> True

Exec(() => value == nullableValue) ==> True
Exec(() => value != nullableValue) ==> False
Exec(() => value < nullableValue) ==> False
Exec(() => value <= nullableValue) ==> True
Exec(() => value > nullableValue) ==> False
Exec(() => value >= nullableValue) ==> True

Exec(() => value) ==> 01/01/2012 00:00:00
Exec(() => nullableValue) ==> 01/02/2012 00:00:00

Exec(() => nullableValue == value) ==> False
Exec(() => nullableValue != value) ==> True
Exec(() => nullableValue < value) ==> False
Exec(() => nullableValue <= value) ==> False
Exec(() => nullableValue > value) ==> True
Exec(() => nullableValue >= value) ==> True

Exec(() => value == nullableValue) ==> False
Exec(() => value != nullableValue) ==> True
Exec(() => value < nullableValue) ==> True
Exec(() => value <= nullableValue) ==> True
Exec(() => value > nullableValue) ==> False
Exec(() => value >= nullableValue) ==> False

Exec(() => value) ==> 01/01/2012 00:00:00
Exec(() => nullableValue) ==>

Exec(() => nullableValue == value) ==> False
Exec(() => nullableValue != value) ==> True
Exec(() => nullableValue < value) ==> False
Exec(() => nullableValue <= value) ==> False
Exec(() => nullableValue > value) ==> False
Exec(() => nullableValue >= value) ==> False

Exec(() => value == nullableValue) ==> False
Exec(() => value != nullableValue) ==> True
Exec(() => value < nullableValue) ==> False
Exec(() => value <= nullableValue) ==> False
Exec(() => value > nullableValue) ==> False
Exec(() => value >= nullableValue) ==> False


Exec(() => nullable_1) ==> 01/01/2012 00:00:00
Exec(() => nullable_2) ==> 01/01/2012 00:00:00

Exec(() => nullable_2 == nullable_1) ==> True
Exec(() => nullable_2 != nullable_1) ==> False
Exec(() => nullable_2 < nullable_1) ==> False
Exec(() => nullable_2 <= nullable_1) ==> True
Exec(() => nullable_2 > nullable_1) ==> False
Exec(() => nullable_2 >= nullable_1) ==> True

Exec(() => nullable_1 == nullable_2) ==> True
Exec(() => nullable_1 != nullable_2) ==> False
Exec(() => nullable_1 < nullable_2) ==> False
Exec(() => nullable_1 <= nullable_2) ==> True
Exec(() => nullable_1 > nullable_2) ==> False
Exec(() => nullable_1 >= nullable_2) ==> True

Exec(() => nullable_1) ==> 01/01/2012 00:00:00
Exec(() => nullable_2) ==> 01/02/2012 00:00:00

Exec(() => nullable_2 == nullable_1) ==> False
Exec(() => nullable_2 != nullable_1) ==> True
Exec(() => nullable_2 < nullable_1) ==> False
Exec(() => nullable_2 <= nullable_1) ==> False
Exec(() => nullable_2 > nullable_1) ==> True
Exec(() => nullable_2 >= nullable_1) ==> True

Exec(() => nullable_1 == nullable_2) ==> False
Exec(() => nullable_1 != nullable_2) ==> True
Exec(() => nullable_1 < nullable_2) ==> True
Exec(() => nullable_1 <= nullable_2) ==> True
Exec(() => nullable_1 > nullable_2) ==> False
Exec(() => nullable_1 >= nullable_2) ==> False

Exec(() => nullable_1) ==> 01/01/2012 00:00:00
Exec(() => nullable_2) ==>

Exec(() => nullable_2 == nullable_1) ==> False
Exec(() => nullable_2 != nullable_1) ==> True
Exec(() => nullable_2 < nullable_1) ==> False
Exec(() => nullable_2 <= nullable_1) ==> False
Exec(() => nullable_2 > nullable_1) ==> False
Exec(() => nullable_2 >= nullable_1) ==> False

Exec(() => nullable_1 == nullable_2) ==> False
Exec(() => nullable_1 != nullable_2) ==> True
Exec(() => nullable_1 < nullable_2) ==> False
Exec(() => nullable_1 <= nullable_2) ==> False
Exec(() => nullable_1 > nullable_2) ==> False
Exec(() => nullable_1 >= nullable_2) ==> False

Exec(() => nullable_1) ==>
Exec(() => nullable_2) ==>

Exec(() => nullable_2 == nullable_1) ==> True
Exec(() => nullable_2 != nullable_1) ==> False
Exec(() => nullable_2 < nullable_1) ==> False
Exec(() => nullable_2 <= nullable_1) ==> False
Exec(() => nullable_2 > nullable_1) ==> False
Exec(() => nullable_2 >= nullable_1) ==> False

Exec(() => nullable_1 == nullable_2) ==> True
Exec(() => nullable_1 != nullable_2) ==> False
Exec(() => nullable_1 < nullable_2) ==> False
Exec(() => nullable_1 <= nullable_2) ==> False
Exec(() => nullable_1 > nullable_2) ==> False
Exec(() => nullable_1 >= nullable_2) ==> False
END-OUTPUT
*/ 