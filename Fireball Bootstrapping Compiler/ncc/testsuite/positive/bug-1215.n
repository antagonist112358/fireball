using Nemerle.Text;
using Nemerle.Utility;

using System;

module A
{
  [Record]
  public class X[T]
  {
    [Accessor]
    _s : string;
    
    public static Parse(s : string) : X[T]
    {
      X(s)
    }
  }
  
  [Record]
  public class Y
  {
    [Accessor]
    _s : string;
    
    public static Parse(s : string) : Y
    {
      Y(s)
    }
  }
  
  public Main() : void
  {
    // Generic match
    regexp match("ab[c][d]")
    {
      | @"(?<m : X>ab\[c\]\[d\])" => Console.WriteLine(m.S);
      | _ => Console.WriteLine("No match");
    }
    
    // Generic match with specified type
    regexp match("ab[c][d]")
    {
      | @"(?<m : X[string]>ab\[c\]\[d\])" => Console.WriteLine(m.S);
      | _ => Console.WriteLine("No match");
    }
    
    // Generic match with specified type using dot
    // Currently not supported
    //regexp match("ab[c][d]")
    //{
    //  | @"(?<m : X.[string]>ab\[c\]\[d\])" => Console.WriteLine(m.S);
    //  | _ => Console.WriteLine("No match");
    //}
    
    // Regular match
    regexp match("ab[c][d]")
    {
      | @"(?<m : Y>ab\[c\]\[d\])" => Console.WriteLine(m.S);
      | _ => Console.WriteLine("No match");
    }
  }
}

/*
BEGIN-OUTPUT
ab[c][d]
ab[c][d]
ab[c][d]
END-OUTPUT
*/
