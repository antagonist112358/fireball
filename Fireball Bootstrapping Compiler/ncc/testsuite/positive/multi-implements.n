class foo {}
class bar {}

interface  I ['a] {}

class C1 : I [foo] {}

class C2 : C1, I [foo] {}

interface I2 : I [foo] {}

class C3 : C1, I2 {}

interface IFoo {
  Foo () : void;
}

class Explicit : IFoo {
  public Foo () : void implements IFoo.Foo {
    System.Console.WriteLine ("foo");
  }
}

interface IProp {
  H : int {
    get;
    set;
  }

  event E : System.EventHandler;

  event E1 : System.EventHandler {
    add;
    remove;
  }
}

class BProp : IProp {
  H : int implements IProp.H {
    get { 2; }

    set { ignore (value) }
  }

  public event E : System.EventHandler;
  public event E1 : System.EventHandler;
}

interface IDo {
  Do() : void;
}

class Bug996 : IDo {
  internal Do() : void implements IDo.Do {
  }
}


module M {
  Main () : void {
    def x = Explicit () : IFoo;
    x.Foo ();
    def y = BProp () : IProp;
    System.Console.WriteLine (y.H);
  }
}

/*
BEGIN-OUTPUT
foo
2
END-OUTPUT
*/
