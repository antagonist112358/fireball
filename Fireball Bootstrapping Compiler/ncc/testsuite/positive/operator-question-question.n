using System;
using System.Console;
using Nemerle.Utility;
using Nemerle.Collections;
using Program.Test;

using SCG = System.Collections.Generic;

module Program
{   
  module Test
  {
    public class SchemePointBase {}
    [Record]
    public class SchemeLine
    {
      public mutable P1: SchemePointBase;
      public mutable P2: SchemePointBase;
    }
    
    public CreatePointToLinesCache(lines: Seq[SchemeLine]): Hashtable[SchemePointBase, SCG.List[SchemeLine]]
    {
      def result = Hashtable();
      def AddToCache(point, line)
      {
        def getLines()
        {
          result.GetValueOrDefault(point) ??  
          {
            def lines = SCG.List();
            result[point] = lines;
            lines;  
          }
        }
        
        def lines = getLines();
        _ = lines.Add(line);
      };
      

      foreach (line in lines)
      {
        AddToCache(line.P1, line);
        AddToCache(line.P2, line);
      }
      result;
    }
  }
   
  Main() : void
  { 
    _ = Test.CreatePointToLinesCache([SchemeLine(SchemePointBase(), SchemePointBase())]);
    def x : int? = null;
    WriteLine(x ?? 2);
    def y : int? = 1;
    WriteLine(y ?? 2);
    def z : string = null;
    WriteLine(z ?? "default");
    def a : string = "test";
    WriteLine(a ?? "default");
    def b : option[string] = None();
    WriteLine(b ?? "default");
    def c : option[string] = Some("test2");
    WriteLine(c ?? "default");
  }
}

/*
BEGIN-OUTPUT
2
1
default
test
default
test2
END-OUTPUT
*/