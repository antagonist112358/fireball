using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Assertions;

using System;
using System.Collections.Generic;
using System.Console;
using System.IO;

public interface IMethodSignature
{
  ParameterCount : uint { get; set; }
}

public interface IMethodSignatureReader[TSignature]
  where TSignature : IMethodSignature
{
  Read(stream : Stream) : TSignature;
}

public abstract class MethodSignatureReader[TSignature, TSignatureImpl] : IMethodSignatureReader[TSignature]
    where TSignature : IMethodSignature
    where TSignatureImpl : TSignature, new()
{
  public Read([NotNull] stream : Stream) : TSignature
      requires stream.CanRead
      requires stream.Position < stream.Length otherwise throw InvalidOperationException("Unable to read past the end of the stream. (Did you forget to reset the stream pointer?)")
      ensures !ReferenceEquals(value, null)
  {
    ignore(stream);
    
    def signature = TSignatureImpl();
    signature.ParameterCount = 1u;
    signature
  }
}

module Program
{
  Main() : void
  {
  }
}