// REFERENCE: Nemerle.Compiler
using Nemerle;
using System;
using System.Console;
using System.IO;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.IO;

module Test
{

  Main() : void
  {
    def _ = match (null : IMember)
             {
               | IProperty => 1
               | _         => 0
             }

    def lst = null : IMember :: [];
    def _ = lst.MapToArray(e => match (e) { | IProperty => 1 | _ => 2 });
    def ty = Some(1) : option[_];
    _ = match (ty)
         {
           | Some(x) => x
           | None    => 0
         }

    def _ = match (null : object)
             {
               | o is int    => o.ToString()
               | o is sbyte  => o.ToString()
               | o is byte   => o.ToString()
               | o is short  => o.ToString()
               | o is ushort => o.ToString()
               | o is uint   => o.ToString()
               | o is long   => o.ToString()
               | o is ulong  => o.ToString()
               | _           => assert(false)
             }

    def equalExprs(a : PExpr, b : PExpr) 
    {
      | (Ref(a), Ref(b)) when a.Id == b.Id =>
          true
      | (Tuple(a), Tuple(b)) when (a is [] || b is [_]) =>
          true
      | (TypeEnforcement(a, a_ty), TypeEnforcement(b, b_ty)) when equalExprs(a, b) && equalExprs(a_ty, b_ty) =>
          true
      | _ =>
          false
    }

    _ = equalExprs(null : PExpr.Ref, null : PExpr.Ref);

    def macros(expr : A)
    {
      | A.B(ns) =>
          match(ns)
          {
            | E.ESub(m) when (m is c || m is d) => null : PExpr.Ref
            | _                                 => null : PExpr.Ref
          }
      | _  => null : PExpr.Ref
    }



    def _ = macros(null : A.B);

    def a = E.ESub(c());
    
     _ = match (a)
         {
           | E.ESub        => 1 // W: redundant
           | E             => 2 // W: redundant
           | System.Object => 3 // W: redundant
           | _             => 4 // W: match clause is unused
         }
         
     _ = match (a)
         {
           | E             => 2 // W: redundant
           | _             => 4 // W: match clause is unused
         }
  }

  interface IInterface
  {

  }

  class c : IInterface
  {

  }

  class d : IInterface
  {
  }

  variant E 
  {
    | ESub { val : IInterface; }
  }

  variant A
  {
    | B { val : E; }
  }

  enum LicenseAccessLevelType
  {
    | Growing
    | Supplemental
  }

  [Record]
  class LicenseManager['t] where 't : enum
  {
    _current : 't;
    _licenseAccessLevelType : LicenseAccessLevelType = LicenseAccessLevelType.Growing;

    public Validate(required : 't) : bool
    {
      def curInt = (_current:System.IConvertible).ToInt32(null);
      def reqInt = (required:System.IConvertible).ToInt32(null);

      match(_licenseAccessLevelType)
      {
        | Growing      => (curInt < reqInt);
        | Supplemental => (curInt & reqInt) != curInt;
        | _            => throw System.NotImplementedException();
      }
    }
  }
}
