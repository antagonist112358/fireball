using System;
using System.Console;

class Context1 : Context, IBinder[Symbol1]
{
  public override GetBinder[W]() : IBinder[W]
  {
    if (this is IBinder[W])
      this :> IBinder[W]
    else
      null
  }

  Bind(name : string) : Symbol1
    implements IBinder[Symbol1].Bind
  {
    Symbol1(name)
  }
}

abstract class Context
{
  public abstract GetBinder[T]() : IBinder[T]
    where T : Symbol
}

class Symbol {}

class Symbol1 : Symbol
{
  private _name : string;
  public this(name : string) { _name = name }
  public override ToString() : string { _name }
}

interface IBinder[T]
  where T : Symbol
{
  Bind(name : string) : T
}

module Program
{
  Main() : void
  {
    def context = Context1();
    def binder = context.GetBinder.[Symbol1]();
    WriteLine(binder.Bind("x"));
  }
}



/*
BEGIN-OUTPUT
x
END-OUTPUT
*/