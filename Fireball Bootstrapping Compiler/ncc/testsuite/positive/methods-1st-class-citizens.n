using Nemerle.Collections;

class Adder {
  val : int;
  public m (x : int) : void { System.Console.WriteLine (x + val) }
  public m2 () : void { NList.Iter ([10,11,12], m); }
  public this (x : int) { val = x; }
}

namespace ComposeAndPipeline {
  using System.Console;
  using System.Math;
    
  module Do {
    public Run () : void {
      def t2str(x : int * int) : string { x.ToString() }
      def tup() : int * int { (1,2) }
      
      WriteLine((tup >> t2str)());
      def strlen(x : string) : int { x.Length }
      
      WriteLine((tup >> t2str >> strlen)());
      
      WriteLine((t2str >> strlen)(1,2));
      
      def isqrt = Sqrt >> Ceiling; // instead of x => Ceiling(Sqrt(x))
      WriteLine(isqrt(1235432));
      
      WriteLine((Sqrt(1235432) |> Floor) : double);
      
      Sqrt(1235432) |> Floor |> (WriteLine : double -> void);
    }
  }
}


module M {
  public Main () : void {
    def l = [1,2,3];
    def a1 = Adder (1);
    def a2 = Adder (2);
    NList.Iter (l, a1.m);
    NList.Iter (l, a2.m);
    a1.m2();
    a2.m2();
    ComposeAndPipeline.Do.Run ();
  }
}

/*
BEGIN-OUTPUT
2
3
4
3
4
5
11
12
13
12
13
14
(1, 2)
6
6
1112
1111
1111
END-OUTPUT
*/
