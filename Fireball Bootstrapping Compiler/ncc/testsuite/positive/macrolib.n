// REFERENCE: Nemerle.Compiler

using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.IO;
using System;
using System.Xml;


public interface IFoo
{
  Foo () : void;
}

public enum MyEnum {
  | A
  | B
  | C
}

public class MyAttribute : Attribute  { }

macro generateIFoo ()
{
  def ifaces = [<[ IFoo ]> ];
  def tb = Nemerle.Macros.ImplicitCTX ().Env.Define (<[ decl:
    public class BlahBle : ..$ifaces
    {
      public Foo () : void
      {
        Console.Write ("Hello!\n");
      }
    }
  ]>);
  tb.Compile ();
  <[ BlahBle () ]>
}

macro TestMemberAccessCreation()
{
      def nameExpr = <[ Member ]>;
      <[ obj.$nameExpr ]>
}

macro forp (i_in_n, m : int, body)
syntax ("forpermutation", "(", i_in_n, "to", m, ")", body)
{
  def (i, n) =
    match (i_in_n) {
      | <[ $i in $(n : int) ]> => (i, n)
      | _ => Message.FatalError ("syntax error")
    }
  def a = array (m - n + 1);
  for (mutable j = 0; j < m - n + 1; j = j + 1)
    a[j] = j + n;
  mutable p = [];
  def r = System.Random ();
  for (mutable k = m - n; k >= 0; k = k - 1) {
    def rand = r.Next (k + 1);
    p = <[ $(a[rand] : int) ]> :: p;
    a[rand] <-> a[k];
  };
  <[
    def p = array [..$p];
    for (mutable j = 0; j < $(m - n + 1 : int); j = j + 1) {
      $i = p[j];
      $body
    }
  ]>
}

macro generate_power (n : int) {
  def sqr (x) { <[ def y = $x; y * y ]> };

  def pow (n, x) {
    if (n == 0)
      <[ 1.0 ]>
    else
      if (n % 2 == 0) // even
        sqr (pow (n / 2, x))
      else
        <[ $x * $(pow (n - 1, x)) ]>
  }
  <[ fun (x) { $(pow (n, <[ x ]>)) } ]>
}

namespace A {
  macro gg (a)
  syntax ("g_gg", a) { a  }
}

macro ala()
{
  _ = <[ mutable somevar; somevar = 1 ]>;

  /// test for <[ ]> matching
  match (<[ def (1,2) = 3; ]> : Nemerle.Compiler.Parsetree.PExpr) {
    | <[ def $_ = $_ ]> => ()
    | _ => assert(false)
  }

  unless (Nemerle.Macros.ImplicitCTX ().InErrorMode) {
    def tb = Nemerle.Macros.ImplicitCTX ().Env.Define (<[ decl:
      public class haha {
        x : int;
        public this(){
          Console.WriteLine ("creating haha");
        }
      }
    ]>);

    tb.Compile ();
  }
  <[ Console.WriteLine ("proba") ]>;
}

public interface ISerializable
{
  Serialize () : void;
}

[Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Class, Inherited = true)]
macro Serializable (t : TypeBuilder)
{
  t.AddImplementedInterface (<[ ISerializable ]>)
}


[Nemerle.MacroUsage (Nemerle.MacroPhase.WithTypedMembers, Nemerle.MacroTargets.Class, Inherited = true)]
macro Serializable (t : TypeBuilder)
{
  def bla = t.DefineNestedType (<[ decl:
    public class Bla
    {
      public this () { }
      public f () : string { "f()" }

      public static Bla () : void  { Console.WriteLine ("from Bla.Bla") }
    }
  ]>);
  bla.Compile ();

  /// here we list its fields and choose only those, which are not derived
  /// or static
  def fields = t.GetFields (BindingFlags.Instance | BindingFlags.Public %|
                            BindingFlags.NonPublic | BindingFlags.DeclaredOnly);

  /// now create list of expressions which will print object's data
  mutable serializers = [];

  /// traverse through fields, taking their type constructors
  foreach (x : IField in fields)
  {
    def tc = x.GetMemType().TypeInfo;
    def nm = Macros.UseSiteSymbol(x.Name);

    if (tc != null)
      if (tc.IsValueType)
        /// we can safely print value types as strings
        serializers = <[
                         printf ("<%s>", $(x.Name : string));
                         System.Console.Write ($(nm : name));
                         printf ("</%s>\n", $(x.Name : string));
                       ]>
                       :: serializers;
      else if (x.GetMemType().Require(<[ ttype: ISerializable ]>)) // we can try to check, if type of given field also implements ISerializable
          serializers = <[
                           printf ("<%s>\n", $(x.Name : string));
                           if ($(nm : name) != null)
                             $(nm : name).Serialize ()
                           else
                             printf ("<null/>\n");
                           printf ("</%s>\n", $(x.Name : string));
                         ]>
                         :: serializers;
        else
          /// and finally, we encounter case when there is no easy way to serialize
          /// given field
          Message.FatalError ("field `" + x.Name + "' cannot be serialized");
    else
      Message.FatalError ("field `" + x.Name + "' cannot be serialized");
  }

  // after analyzing fields, we create method in our type, to execute created expressions
  t.Define (<[ decl:  public Serialize () : void  implements ISerializable.Serialize
                      {
                        .. $serializers
                      }
            ]>);

  t.Define (<[ decl: public foo : int = 5; ]>);
}

macro myif1 (cond, then, el)
syntax ("mif", "(", cond, ")", then, Optional (";"), "else", el)
{
  <[ if ($cond) $then else $el ]>
}

macro myif2 (cond, then)
syntax ("mif", "(", cond, ")", then, Optional (";"))
{
  <[ when ($cond) $then ]>
}

macro thr (exc = null)
syntax ("_throw", Optional (exc))
{
  <[ throw $exc ]>
}

macro arr1_macro (params inits : list [PExpr])
syntax ("arrr", "[", inits, "]")
{
  <[ array [..$inits] ]>
}

macro arr2_macro (rank, params inits : list [PExpr])
syntax ("arrr", ".", "[", rank, "]", "[", inits, "]")
{
  <[ array .[$rank] [..$inits] ]>
}

macro arr3_macro (params dims : list [PExpr])
syntax ("arrr", "(", dims, ")")
{
  assert(<[ fun () { } ]> is <[ fun [ ..$_tparms] (..$_args) : $_ty where ..$_tconstrs $_body ]>);
  <[ array (..$dims) ]>
}

macro tokenizer (tok : Token)
syntax ("xml", tok)
{
  def buf = Text.StringBuilder ();

  foreach (t in tok)
    ignore (buf.Append(t.ToString()));

  <[
     def document = XmlDocument();
     def frag = document.CreateDocumentFragment();

     frag.InnerXml = $(buf.ToString() : string);
     _ = document.AppendChild(frag);
     document
  ]>
}

macro oper (o)
syntax ("%%", o)
{
  def x = o.ToString ();

  <[ System.Console.WriteLine ($(x : string));
     $o
  ]>
}

macro permute'(data, p_expr)
{
  def expr_to_array (expr)
  {
    // we must convert syntax tree of array into array itself
    | <[ array [..$p_list] ]> =>
      def permutation = array (p_list.Length);
      mutable count = 0;

      foreach (<[ $(x : int) ]> in p_list)
      {
        permutation [count] = x;
        count++;
      }

      permutation

    | _ => throw System.ArgumentException ("only constant arrays are allowed")
  }

  def permutation = expr_to_array (p_expr);
  def visited = array (permutation.Length);

  mutable result = [];

  for (mutable i = 0; i < permutation.Length; i++)
  {
    mutable pos = i;

    while (!visited [pos])
    {
      visited [pos] = true;
      def next_pos = permutation[pos];

      unless (visited [next_pos])
      {
        result = <[ $data [$(pos : int)] <-> $data [$(next_pos : int)] ]> :: result;
        pos = next_pos;
      }
    }
  }

  <[ {..$result } ]>
}


[Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Method, Inherited = true)]
macro MyRequire (_ : TypeBuilder, m : ParsedMethod, expr, thor = null)
syntax ("requ", expr, Optional ("otherwise", thor))
{
  def newBody = Util.locate(m.Body.Location,
    <[ assert($expr, "requ"); $(if (thor != null) <[ $thor ]> else m.Body) ]>);

  m.Body = newBody;
}

[Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Method, Inherited = true)]
macro MyAsync (_ : TypeBuilder, m : ParsedMethod)
syntax ("asyn")
{
  def newBody = Util.locate(m.Body.Location,
    <[ System.Console.WriteLine ("I could be asynced"); $(m.Body); ]>);

  m.Body = newBody;
}

[Nemerle.MacroUsage(Nemerle.MacroPhase.WithTypedMembers, Nemerle.MacroTargets.Method, Inherited = true)]
macro MyAsync (_ : TypeBuilder, m : MethodBuilder)
syntax ("asyn")
{
  def newBody = Util.locate(m.Body.Location,
    <[ System.Console.WriteLine ("I could be asynced with members");
       $(m.Body); ]>);

  m.Body = newBody;
}

macro MyExprAsync(expr)
syntax ("asyn", expr)
{
  <[ System.Console.WriteLine ("my precious asyn"); $expr ]>
}


[Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Assembly)]
macro AssemblyMac (x)
{
  match (x)
  {
    | <[ $_.$_ ]> => ()
    | _ => assert(false)
  }
}

macro @myfor(_init, _cond, _change, _retval, _body)
syntax ("myfor", "(", Optional (_init), ";", Optional (_cond),
        ";", Optional (_change), Optional(";", _retval), ")", _body)
{
  <[ () ]>
}

namespace Ops
{
  [assembly: Nemerle.Internal.OperatorAttribute ("Ops", "and", false, 160, 161)]

  macro @and (e1, e2)
  {
    <[ $e1 && $e2 ]>
  }

  [assembly: Nemerle.Internal.OperatorAttribute ("Ops", "not", true , 281, 280)]

  macro @not(e)
  {
    <[ ! $e ]>
  }

}

macro metaclass(className, body)
syntax ("metaclass", className, body)
{
  def ctx = Nemerle.Macros.ImplicitCTX();

  unless (ctx.InErrorMode)
  {
    mutable code = [];

    match ((className, body))
    {
      | (<[ $(nm : name) ]>, <[ { .. $props } ]>) =>
        foreach(<[ $(n : name) : $(t : name) ]> in props)
        {
          code ::= <[ decl:
            [Nemerle.Utility.Accessor]
            mutable $(n.NewName("_" + n.Id) : name) : $(t : name);
          ]>;
        }

        def builder = ctx.Env.Define(<[ decl: [Record] public class $(nm : name) { .. $(code.Reverse()) } ]>);
        builder.Compile();

      | _ => Message.FatalError($"Invalid metaclass syntax, expected properties definition, got $body");
    }

    def t = ctx.Env.Define(<[ decl:
      public interface IEmpty { } ]>);
    t.Compile();

    def t = ctx.Env.Define(<[ decl:
      public class GenericGeneratedClass['a] where 'a : System.IComparable ['a]
      {
        public this(_value : 'a) {}
      }
    ]>);
    t.Compile();

    def beta = Nemerle.Compiler.Macros.NewSymbol ("'b");
    def t = ctx.Env.Define(<[ decl:
      public class GenericSplGeneratedClass[$(beta : name)] where $(beta : name) : System.IComparable [$(beta : name)]
      {
        public this(_value : $(beta : name)) {}
      }
    ]>);
    t.Compile();

    def t = ctx.Env.Define(<[ decl:
      public delegate GeneratedDelegate(_u : string) : void;
    ]>);
    t.Compile();
  }

  <[ () ]>
}


macro ulongLiteral()
{
  def result = <[ $(1UL : ulong) ]>;
  result
}

macro MarkWithMy()
{
  // Dont use this technics in real project. It cause fail in IDE! Use macroattributes for this purpose.
  Nemerle.Macros.ImplicitCTX().CurrentType.GetModifiers().AddCustomAttribute(<[ My ]>);
  <[ () ]>
}


[Nemerle.MacroUsage (Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Class)]
macro addVersion(tb : TypeBuilder)
{
   tb.TyManager.AddAssemblyAttribute (tb.GlobalEnv, <[ System.Reflection.AssemblyCompany("foo") ]>);
}

macro create_enum(val)
{
  match (val)
  {
    | <[ 1 ]> => <[ $(MyEnum.A : enum) ]>
    | <[ 2 ]> => <[ $(MyEnum.B : enum) ]>
    | _       => <[ $(MyEnum.C : enum) ]>
  }
}

macro create_initialized_field()
{
  def tb = Nemerle.Macros.ImplicitCTX().CurrentTypeBuilder;
  def n = Macros.NewSymbol("log4net_logger");
  tb.Define (<[ decl: private static $(n : name) : object = object(); ]>);
  tb.GlobalEnv.Define(<[ decl:
    public variant V
    {
      | o1
    }
  ]>).Compile ();

  <[ $(n : name) ]>
}

macro bug740(expr)
{
 def typer = Nemerle.Macros.ImplicitCTX();
 def texpr = typer.TypeExpr(expr);
 <[ $(texpr : typed).GetType() ]>
}

namespace Bug798
{
  macro test(_name, _code)
  syntax ("test", _name, _code)
  {
    <[ () ]>
  }
}

// for syntax_extension_custom_members.n
[Nemerle.MacroUsage(Nemerle.MacroPhase.BeforeInheritance, Nemerle.MacroTargets.Method)]
macro abrakadabra(type_builder : TypeBuilder, method_builder : ParsedMethod, name : Token, _body : Token)
syntax("abrakadabra", "(", name, ")", _body)
{
  def prop = <[ decl:
      public static $(name.ToString().Trim() : dyn) : string
      {
        get { $(method_builder.modifiers.ToString() : string) }
      }
    ]>;

  type_builder.Define(prop);
}

module TestModule
{
  public TestMethod() : void
  {
     def actions = [<[decl: public TestQuotedMethod() : void { } ]>];

     _ = <[decl:
       module TestQuotedModule
       {
          ..$(actions) // bug 1225
       }]>;
  }
}
