// REFERENCE: conditional-1-lib.dll

#define Foo
#undef Bar

using System;
using System.Console;
using System.Diagnostics;

[Conditional("Bar"), Conditional("Foo")]
public class A : Attribute {}

[Conditional("Bar")]
public class B : Attribute {}

public class AncestorClass1 : BaseClass
{
  public override X() : void { WriteLine("Fail"); }

  [Conditional("Bar")]
  public virtual Y() : void {}
}

public class AncestorClass2 : AncestorClass1
{
  public override Y() : void { WriteLine("Fail"); }
}

[A, B]
module Program
{
  [Conditional("Foo")]
  Foo() : void { WriteLine("OK") }

  [Conditional("Bar")]
  Bar1() : void { WriteLine("Fail") }

  [Conditional("Bar")]
  Bar2(_ : int) : void { }

  Main() : void
  {
    Foo();
    Bar1();
    Bar2({ WriteLine("Fail"); 0 });

    External.Foo();
    External.Bar();

    AncestorClass1().X();
    AncestorClass2().Y();

    if(typeof(Program).GetCustomAttributes(typeof(A), false).Length == 1)
      WriteLine("OK");
    else
      WriteLine("Fail");

    if(typeof(Program).GetCustomAttributes(typeof(B), false).Length == 0)
      WriteLine("OK");
    else
      WriteLine("Fail");
  }
}
/*
BEGIN-OUTPUT
OK
OK
OK
OK
END-OUTPUT
*/