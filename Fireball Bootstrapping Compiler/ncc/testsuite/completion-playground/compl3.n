using Nemerle.Compiler;
using Nemerle.Completion;
using Nemerle.Collections;
using Nemerle.Utility;
using System;
using System.IO;
using System.Console;

def engine = Engine ();
def files = Hashtable ();
def rawArgs = System.Environment.GetCommandLineArgs ().ToList();
def (progName, args) = rawArgs.Head :: rawArgs.Tail;

when (args.Length == 0)
{
  WriteLine(
    $"usage: $progName <filename>\n" +
     "       <filename> is the Nemerle source code you want to pass to the \n" +
     "       code completion engine");
  System.Environment.Exit(1);
}

foreach (path in args)
{
  def source = File.ReadAllText (path);
  engine.Sources.Add (path, source);
  files [path] = source;
}

def type_tree = engine.GetTypesTree ();
//def _second_tree = engine.GetTypesTree ();
// mutable the_method = null;

mutable count = 0;
mutable completionMember : MethodBuilder;

def loop (x)
{
  foreach (node in x.Children.Values)
  {
    count++;
    //WriteLine (node.Name.ToString("."));
    match (node.Value)
    {
      | NamespaceReference => loop (node);
      | Cached(tycon)      =>
          match (tycon)
          { | tb is TypeBuilder =>
              WriteLine (tb.FrameworkTypeName);
              foreach (n in tb.GetMembers ())
              {
                //match (n.GetKind ())
                //{ | Field (field)   => WriteLine (field);  // IField
                //  | Method (method) => WriteLine (method); // IMethod
                //      when (method.Name == "Bar")
                //        completionMember = method; 
                //  | Property (prop) => WriteLine (prop);   // IProperty
                //  | Type (tycon)    => WriteLine (tycon);  // TypeInfo
                //  | Event (body)    => WriteLine (body);   // IEvent
                //}
                match (n.GetKind ())
                { | Method (method) => // IMethod
                      when (method.Name == "Bar")
                      completionMember = method :> MethodBuilder;
                  | _    => ()
                }
              }
            | _                 => ();
          }
      | _                  => ()
    }
  }
}

WriteLine ("Found types\n===========");
loop (type_tree);
WriteLine ($"\n $count types found \n===========");

WriteLine ("\n================================================");
WriteLine ($" Completion member: $(completionMember.Name)");

def try_completion (body)
{
  def PrintLine(color = ConsoleColor.White)
  {
    ForegroundColor = color;
    WriteLine ("=================================================");
    ResetColor ();
  }

  // Execute function f and colorize it console output.
  def ColorizeOut[T](color, f : void -> T) : T
  {
    ForegroundColor = color;
    mutable result;
    try { result = f() } finally { ResetColor(); }
    result
  }

  try
  {
    PrintLine(ConsoleColor.Cyan);

    // If success return body without completion sybmbol and completion 
    // position. Otherwise return empty strung and -1 in completionPosition.
    def ExtractCompletionPosition(body)
    {
      def completionPosition = body.IndexOf('?');
      if (completionPosition < 0)
        ("", -1)
      else
      {
        def part1 = body.Substring(0, completionPosition);
        def part2 = body.Substring(completionPosition + 1);
        def complBody = part1 + part2;

        // Print method body with highlight completion position.
        Write("'" + part1);
        ForegroundColor = ConsoleColor.Yellow;
        Write ("?");
        ResetColor ();
        WriteLine (part2 + "'");

        (complBody, completionPosition)
      }
    }

    def (complBody, complPosition) = ExtractCompletionPosition(body);

    if (complPosition < 0)
      ColorizeOut(ConsoleColor.Red, () => WriteLine(
        $"No completion position! Please, specify it by '?' symbol: '$body'"));
    else
    {
      def completionResult = ColorizeOut(ConsoleColor.Yellow, () => 
        engine.RunCompletionEngine(completionMember, complBody, complPosition));

      if (completionResult == null)
        WriteLine ("  No member found!!!");
      else
        ColorizeOut(ConsoleColor.Magenta, () => 
        {
          WriteLine ("  Type of the member: " 
            + Engine.GetNameFromType (completionResult.ObjectType));
          WriteLine ("  Member found:");

          foreach (overl in completionResult.Overloads)
          {
            //Diagnostics.Debug.Assert(false);
            def isExtension = overl.ExtensionMethodObject != null;

            def typ = if (isExtension)
              match ((overl.Member :> IMethod).GetParameters ())
              {
                | extParam :: _ => extParam.ty
                | _ => throw Exception();
              }
            else
              null;
            
            if (overl is LocalValueCompletionPossibility)
              WriteLine ($"    local value ==> $overl");
            else
              WriteLine ($"    $(overl.Member.Name)  ==> $overl"
                " $(overl.Member.Attributes) Is extension "
                "method $isExtension $typ");
          }
        });
    }
  }
  catch { | ex => ColorizeOut(ConsoleColor.Red, () => WriteLine(ex)) }

  PrintLine(ConsoleColor.Cyan);
  ColorizeOut(ConsoleColor.Cyan, () => WriteLine("Finished"));
  PrintLine(ConsoleColor.Cyan);
}

//FixMe: Bugs
try_completion (@"def green = 1; g?");

try_completion (@"def fun1 = param1 => pa?");

try_completion (@"
  def color1 : MyColor = MyColor.Rgb(255, 0, 255);
  match (color1)
  {
  | MyColor.Rg?
  }
");

try_completion (@"
  def color1 : MyColor = MyColor.Rgb(255, 0, 255);
  match (color1)
  {
  | Rg?
  }
");

try_completion (@"
  def color1 : MyColor = MyColor.Rgb(255, 0, 255);
  match (color1)
  {
  | MyCol?
  }
");

try_completion ("def arr = array[1, 2, 3]; arr.M?"); // this requires filtering out extension methods in Typer.n:2366  / NAZGUL 
try_completion ("1.Map?");

//TODO: Imlement this.
try_completion (" ? ");           // this should yield running typer with PExpr.ToComplete (Name ("", ..)), it seems to crash on parsing  / NAZGUL 
try_completion ("def _ = 0; ? ");


// Work fine:
try_completion (@"
  def color1 : MyColor = MyColor.Rgb(255, 0, 255);
  match (color1)
  {
  | Rgb(_, green, _) => gr?
  }
");

try_completion (@"
  def name = 1;
  na?
           ");
try_completion ("Fo?");
try_completion ("this.Fo?");
try_completion (@"
           def x = Dictionary();
           def y = x.Count;
           do
           {
             ihg kjhg khg @#|45z6;
             x[""a""] = 1;
             //x[""a""];
             x[""a""].ToString().Su?
             //kljshdflkjh lkdhjfsk;
             //this.
           }
           while (false);
           ");

try_completion (@"
  def x = ['1', '2', '3'];
  match (x)
  {
    | [a] => a
    | [_, b, _] => b
    | lst => lst.?
  }
");
try_completion ("NArray.M?");
try_completion ("def a = \"a\"; a.?");
try_completion ("int.?");
try_completion ("System.?");
try_completion ("System.Reflection.?");
try_completion ("string.For?");
try_completion ("string.?");
try_completion ("Q?");
try_completion ("def s = System.Collections.Generic.List (); s.?");
