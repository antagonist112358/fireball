//
// Nested anonymous methods and capturing of variables test
//
using System;

delegate D () :  void;

class X {

  static Main () :  int
  {
    mutable  x =  X();
    x.M ();
    e ();
                Console.WriteLine ("J should be 101= {0}", j);
    if (j != 101)
    {
       3;
    }
    else
  {
  {
    Console.WriteLine ("OK");
     0;
  }
  }
  }

  static  mutable  j : int = 0;
  static  mutable  e : D;
  
   M () : void
  {
    mutable  l = 100;

    mutable  d = fun() {
      mutable  b = Nemerle.Extensions.DefaultValue (int);
      b = 1;
      Console.WriteLine ("Inside d");
      e = fun() {
          Console.WriteLine ("Inside e");
          j = l + b;
          Console.WriteLine ("j={0} l={1} b={2}", j, l, b);
      };
    };
    Console.WriteLine ("Calling d");
    d ();
  }
  
}
/*
BEGIN-OUTPUT
Calling d
Inside d
Inside e
j=101 l=100 b=1
J should be 101= 101
OK
END-OUTPUT
*/
