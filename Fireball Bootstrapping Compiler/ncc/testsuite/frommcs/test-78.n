//
// This test exhibits an old bug where we did not
// go into the underlying type for an enumeration, and
// hence implicit and explicit casts were not working when
// they were going from a type to an enum
//

namespace N1
{  
  public enum A
  {
    | A_1 | A_2 | A_3
  }

  public class B
  {
    static ShortCasting () :  bool
    {
      mutable  i = 0s;
      mutable  a = N1.A.A_1;

      i = ( a :> short);  //<- crash
      a = (i :> N1.A);//<- used to fail, can't convert

      if (a != N1.A.A_1)//<- used to fail, can't convert

      {
         false;//<- used to fail, can't convert

      }//<- used to fail, can't convert

      else
       true;
    }

    static IntCasting () :  bool
    {
      mutable  i = 0;
      mutable  a = N1.A.A_1;

      i = ( a :> int);//<- works fine
      a = (i :> N1.A);//<- used to fail, can't convert

      if (a != N1.A.A_1)//<- used to fail, can't convert

      {
         false;//<- used to fail, can't convert

      }//<- used to fail, can't convert

      else
    {
    {
       true;
    }
    }
    }
  
    static Main () :  int
    {
      if (!IntCasting ())
      {
         1;
      }
      else
    {
    {
      if (!ShortCasting ())
      {
         2;
      }
      else
    {
    {
       0;
    }
    }
    }
    }
    }

  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
