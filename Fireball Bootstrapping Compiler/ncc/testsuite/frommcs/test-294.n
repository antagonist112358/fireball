// Compiler options:   

using System;

[Obsolete]
class ObsoleteClass
{
}

public class Test
{
  private  mutable  _name : string;

  [Obsolete()]
  public this()
  {  this("layout", false); 
  }

  [Obsolete()]
  public this( a : string, _writeToErrorStream :  bool)
  {
    Name = a; 
  }

  [Obsolete()]
  public Name : string
  {
    get {  _name; }
    set { _name = value; }
  }
}

[Obsolete]
public class DerivedTest : Test
{
         mutable  member : ObsoleteClass; 
    
        [Obsolete]
  public this( a : string)
        {  base(a, false); 
    Name = a; 
  }
        
        public Method () :  string
        {
             base.Name; 
        }
        
        public static Main () :  void {}
}



[Obsolete] 
class ObsoleteClass2: ObsoleteClass
{
}

class ObsoleteClass3
{
  public static XSmall : double = 0.6444444444444;

  [Obsolete ("E1")]
  public X_Small : double = XSmall; 

  [Obsolete ("E2")]
  public static X_Small2 : double = XSmall; 
}


class ObsoleteClass4
{
  [Obsolete]
  public  T () :void
  {
    lock (typeof (ObsoleteClass4)) {}
    lock (typeof (ObsoleteClass2)) {} 
  }
}

/*
BEGIN-OUTPUT
END-OUTPUT
*/
