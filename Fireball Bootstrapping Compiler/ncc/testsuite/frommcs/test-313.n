using System.Reflection;
using System;
using A;

namespace A {
  interface B {
     METHOD () : void;
  }
}


class D : B {
   B_METHOD () : void implements B.METHOD
  {
  ();
  }

  static Main () :  int
  {
    mutable  mi = typeof (D).GetMethods (BindingFlags.Instance %| BindingFlags.NonPublic);
    mutable  m = null : MethodInfo;
    
    {
    
    mutable temp_1_break_loop_ = false;
    
    foreach ( j : MethodInfo in mi)
    
    when (!temp_1_break_loop_ ){
      when (j.Name.IndexOf ("_METHOD") != -1){
        m = j;
        temp_1_break_loop_ = true;
      }
    }
    if (m == null)
    {
       1;
    }
    else
    
    {
    
    {

    if (m.Name != "B_METHOD")

    {{
      Console.WriteLine ("Incorrect method name, expecting: {0} got {1}",
             "B_METHOD", m.Name);
       2;
    }

    }

    else
    
    {
    
    {

     0;
    
    }
    
    }
    
    }
    
    }
    
    }
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
