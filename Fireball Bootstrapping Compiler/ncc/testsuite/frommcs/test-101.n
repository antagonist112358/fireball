using System;
using System.Reflection;

namespace Test {
  
  public class MyAttribute: Attribute {
    public  mutable  val : string;
    public this ( stuff : string) {
      Test.sorted_info [Test.pos] = stuff;
                        Test.pos++;
      val = stuff;
    }
  }
  
  public class My2Attribute: MyAttribute {
    public  mutable  ival : int;
    public this ( stuff : string, blah :  int) {  base (stuff);
      Test.sorted_info [Test.pos] = "ctor with int val"+stuff;
                        Test.pos++;
      ival = blah;
    }
  }

  [Flags ]
  enum X {
    | A | B
  }
  
  [My("testclass")]
  [My2("testclass", 22)]
  public class Test {
          public static sorted_info : array [string];
          public static mutable pos : int;
          static this () { sorted_info = array (5); pos = 0; }

    static public Main() :  int {
      mutable  info = typeof (Test);
      mutable  attributes = info.GetCustomAttributes (false);

      for (mutable  i = 0; i < attributes.Length; i += 1) {
        sorted_info [pos] = attributes[i].ToString ();
                                pos++;
      }
                        System.Array.Sort (sorted_info, System.Collections.CaseInsensitiveComparer.DefaultInvariant);
                        foreach (x in sorted_info)
        System.Console.WriteLine(x);

      if (attributes.Length != 2)
      {
         1;
      }
      else {
      mutable  attr = ( attributes [0] :> MyAttribute);
      if (attr.val != "testclass")
      {
         2;
      }
      else {
       0;
    }
    }
    }
  }
}
/*
BEGIN-OUTPUT
ctor with int valtestclass
Test.My2Attribute
Test.MyAttribute
testclass
testclass
END-OUTPUT
*/
