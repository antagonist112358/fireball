//
// This is a compile test, submitted by Joe.   We really need
// a more thorough set of tests for the user defined explicit
// conversions
//
using System;

class A {
  public static @:> ( _foo : A) :  X
  {
    mutable  myX =  X();

     myX;
  }
}

class X {
}

class Y : X {
}

class blah {
  public static Main () :  int
  {
    mutable  testA =  A();
    
    mutable  _testX = ( testA :> X);

    {

    mutable temp_2_return_ = Nemerle.Extensions.DefaultValue(int);

    mutable temp_1_break_loop_ = false;

    try {
      mutable  _testY = (( testA  :> X) :> Y); ();
    } catch {  | _ is InvalidCastException => {
      {
      temp_1_break_loop_ = true;
      temp_2_return_ =  0;
      }
    } }

    if( temp_1_break_loop_ )

    {

     temp_2_return_;

    }

    else

    {

    {

    //
    // We should have thrown the exception above
    //
     1;

    }

    }

    }
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
