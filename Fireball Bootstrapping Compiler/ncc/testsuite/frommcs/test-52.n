//
// Tests the foreach on strings, and tests the implicit use of foreach
// to pull the enumerator from the class and identify the pattern to be called
//
using System;
using System.Collections;

class Y {
   mutable  count : int = 0;
  
  public MoveNext () :  bool
  {
    count++;
     count != 10;
  }
  
  public Current : object {
    get {
       count;
    }
  }
}

class X {

  static  mutable  a :  array [string] =  array[
    "one", "two", "three"
  ];

  public GetEnumerator () :  Y
  {
      Y ();
  }
  
  static Main () :  int
  {
    //
    // String test
    //
    mutable  total = "";
    
    foreach ( s : string in a){
      total = total + s;
    }
    if (total != "onetwothree")
    {
       1;
    }
    else
  {

    //
    // Pattern test
    //
    mutable  x =  X ();

    mutable  t = 0;
    foreach ( o : object in x){
      t += ( o :> int);
    }
    if (t != 45)
    {
       2;
    }
    else
  {

    //
    // Looking for GetEnumerator on interfaces test
    //
    mutable  xx =  Hashtable ();
    xx.Add ("A", 10);
    xx.Add ("B", 20);

    mutable  vars = xx;
    mutable  total2 = "";
    foreach ( name :> string in vars.Keys){
      total2 = total2 + name;
    }

    if ((total2 != "AB") && (total2 != "BA"))

    {
       3;

    }

    else
  {

    mutable  list_ =  ArrayList ();
    _ = list_.Add ("one");
    _ = list_.Add ("two");
    _ = list_.Add ("three");
    mutable  count = 0;

    //
    // This test will make sure that `break' inside foreach will
    // actually use a `leave' opcode instead of a `br' opcode
    //
    {

    //
    // This test will make sure that `break' inside foreach will
    // actually use a `leave' opcode instead of a `br' opcode
    //
    mutable temp_1_break_loop_ = false;

    //
    // This test will make sure that `break' inside foreach will
    // actually use a `leave' opcode instead of a `br' opcode
    //
    foreach ( s :> string in list_)

    //
    // This test will make sure that `break' inside foreach will
    // actually use a `leave' opcode instead of a `br' opcode
    //
    when (!temp_1_break_loop_ ){
      when (s == "two"){
        temp_1_break_loop_ = true;
      }
      when( !temp_1_break_loop_ )
      {
      count++;
      }
    }
    if (count != 1)
    {
       4;
    }
    else

    //
    // This test will make sure that `break' inside foreach will
    // actually use a `leave' opcode instead of a `br' opcode
    //
    {
    
    Console.WriteLine ("test passes");
     0;

    //
    // This test will make sure that `break' inside foreach will
    // actually use a `leave' opcode instead of a `br' opcode
    //
    }

    //
    // This test will make sure that `break' inside foreach will
    // actually use a `leave' opcode instead of a `br' opcode
    //
    }
  }
  }
  }
  }
}
/*
BEGIN-OUTPUT
test passes
END-OUTPUT
*/
