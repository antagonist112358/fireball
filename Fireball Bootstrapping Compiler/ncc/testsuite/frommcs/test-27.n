using System;

public interface Hello {

   MyMethod (mutable  i : int) : bool;
}

public interface Another : Hello {

   AnotherMethod (mutable  i : int) : int;
}

public class Foo : Hello, Another {

  public MyMethod (mutable  i : int) :  bool
  {
    if (i == 22)
    {
       true;
    }
    else
    {
       false;
    }
  }

  public AnotherMethod (mutable  i : int) :  int
  {
     i * 10;
  }
  
}

public interface ITest {

   TestMethod (mutable  i : int,mutable  j :  float) : bool;
}

public class Blah : Foo {

  public delegate MyDelegate (mutable  i : int,mutable  j :  int) :  void;

   Bar (mutable  i : int,mutable  j :  int) : void
  {
    Console.WriteLine (i+j);
  }
  
  public static Main () :  int
  {
    mutable  k =  Blah ();

    mutable  f = k : Foo;

    mutable  o = k : object;
  {

    when (f is Foo) // W: using the ``is'' pattern here is redundant, please use ``:''
      Console.WriteLine ("I am a Foo!");

    mutable  ihello = f : Hello;

    mutable  ianother = f;

    ihello = ianother; 

    mutable  _b = f.MyMethod (22);

    mutable  del =  MyDelegate (k.Bar);

    del (2, 3);
    
    mutable  tmp = del : Delegate;

    // Explicit reference conversions
    
    mutable  adel = ( tmp :> MyDelegate);

    adel (4, 7);

    mutable  l = ( o :> Blah);

    l.Bar (20, 30);

    l = ( f :> Blah);

    l.Bar (2, 5);

    f = ( ihello :> Foo);

    // The following cause exceptions even though they are supposed to work
    // according to the spec

    // This one sounds ridiculous !
    // ITest t = (ITest) l;
    
    // ITest u = (ITest) ihello;

     0;

  }

  }
}
/*
BEGIN-OUTPUT
I am a Foo!
5
11
50
7
END-OUTPUT
*/
