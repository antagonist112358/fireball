using System.Collections;
abstract class A {
        protected abstract Item [ a : int] : int { get; }

  public EmulateIndexer ( a : int) :  int
  {
     this [a];
  }
}

class B : A {
  protected override Item [ a : int] : int { get {  a;}  }

  public M () :  int
  {
     this [0];
  }
  
}
class X {
   mutable  v1 : int;
   mutable  v2 : int;
  
   Item [ a : int] : int {
    get {
      if (a == 0)
      {
         v1;
      }
      else
      {
         v2;
      }
    }

    set { {
      if (a == 0)
        v1 = value;
      else
        v2 = value;
    }
    }
  }

  static Main () :  int
  {
    mutable  x =  X ();

    x [0] = 1;
    if (x.v1 != 1)
    {
       1;
    }
    else
  {

    if (x [0] != 1)

    {
       2;

    }

    else
  {

    mutable  bb =  B ();

    if (bb.EmulateIndexer (10) != 10)

    {
       3;

    }

    else
  {

    //
    // This tests that we properly set the return type for the setter
    // use pattern in the following indexer (see bug 36156)
    mutable  a =  Hashtable ();
    mutable  b = ( (({ a [0] = 1; a [0] })) :> int);
    if (b != 1)
    {
       4;
    }
    else
  {
      B ().M ();
  }
  }
  }
  }
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
