using System;

interface IA
{
   Add( i : int) : int;
}

interface IB
{
   Add( i : int) : int;  
}

interface IC : IA, IB {}

interface IE : ICloneable, IDisposable {
   doom () : void;
}

class D : IC, IB
{
   IA_Add ( _i : int) : int implements IA.Add {
     5;
  }
  
   IB_Add ( _i : int) : int implements IB.Add {
     6;
  }
}

class E: IE, IC {
  public this() {
  }
  public doom () :  void {
    ();
  }
  public Clone () :  Object {
     null;
  }
  public Dispose () :  void {}
   IA_Add ( _i : int) : int implements IA.Add {
     7;
  }
  
   IB_Add ( _i : int) : int implements IB.Add {
     8;
  }
}

class C
{
  static Test( n : IC) :  int {
    mutable  a = ( n :> IA);
    if (a.Add(0) != 5)
    {
       1;
    }
    else {

    if (((n :> IA)).Add(0) != 5)

    {
       1;

    }

    else {

    if (((n :> IB)).Add(0) != 6)

    {
       1;

    }

    else {


     0;
  }
  }
  }
  }

  static Test2( ie : IE) :  void {
    ie.doom ();
    _ = ie.Clone();
    ie.Dispose ();
  }

  static Main() :  int
  {
    mutable  d =  D();
    mutable  e =  E();
    _ = Test (e);
    Test2 (e);
    
     Test (d);
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
