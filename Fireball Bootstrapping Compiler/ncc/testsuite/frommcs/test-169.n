//
// Test for overloaded properties.
//
using System;

public class basec {
  public virtual Message : string {
    get {
       "base";
    }
  }
}

public class der : basec {
  public override Message : string {
    get {
       "der";
    }
  }
}

class Base {
         mutable  thingy : int = 0;
        public virtual Thingy : int {
                get {  thingy; }
                set { thingy = value; }
        }
}

class Derived : Base {
        public BaseThingy : int {
                get {  Thingy; }
        }

        public override Thingy : int {
                // override the set constructor
                set { ignore (value) }
        }
}

class D {

  static Main () :  int
  {
    //
    // These tests just are compilation tests, the new property code
    // will excercise these
    //
    mutable  d =  der ();
    if (d.Message != "der")
    {
       1;
    }
    else
  {

    mutable  b =  basec ();
    if (b.Message != "base")
    {
       2;
    }
    else
  {

    mutable  dd =  Derived ();
    dd.Thingy = 10;
    if (dd.BaseThingy != 0)
    {
       3;
    }
    else
  {

    Console.WriteLine ("Test ok");
     0;
  }
  }
  }
  }
}
/*
BEGIN-OUTPUT
Test ok
END-OUTPUT
*/
