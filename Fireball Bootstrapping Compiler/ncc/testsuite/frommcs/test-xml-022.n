// Compiler options: -doc:xml-022.xml
//
// Combined tests (for detecting incorrect markup targeting).
//
using System;

/// <summary>
/// xml comment is not allowed here.
/// </summary>
namespace Testing
{
  /// <summary>
  /// </incorrect>
  public class Test2
  {
    /**
      another documentation style (Java-mimic)
    */
    public static Foo () :  void
    {
      /// here is an extraneous comment
    }

    public static Main () :  void
    {
    }
  }

  /// testing indentation <summary> test test ;-)
  /// comment for struct
  /// </summary>
  public struct StructTest
  {
  }

  /// <summary>
  /// comment for interface
  /// </summary>
  public interface InterfaceTest
  {
  }

  /// <summary>
  /// comment for enum type
  /// </summary>
  public enum EnumTest
  {
    /// <summary>
    /// comment for enum field
    /// </summary>
    | Foo
    | Bar
  }

  /// <summary>
  /// comment for dummy type
  /// </summary>
  public class Dummy {}

  /// <summary>
  /// comment for delegate type
  /// </summary>
  public delegate MyDelegate (mutable  o : object,mutable  e :  EventArgs) :  void;

  /// <summary>
  /// description for class Test
  /// </summary>
  public class Test
  {
    /// comment for const declaration
    static Constant :  string = "CONSTANT STRING";

    /// comment for public field
    public  mutable  BadPublicField : string;

    /// comment for private field
    private  mutable  PrivateField : string;

    /// comment for public property
    public PublicProperty : string {
      /// comment for private property getter
      get {  null; }
    }

    /// comment for private property
    private PrivateProperty : string {
      get {  null; }
      /// comment for private property setter
      set { ignore (value) }
    }

     mutable  x : int;

    /// public event EventHandler MyEvent ;-)
    public event MyEvent :  EventHandler;

     mutable  y : int;

    /// here is a documentation!!!
    public static Foo () :  void
    {
    }

    /// here is a documentation with parameters
    public static Foo (mutable  _l : long,mutable  _t :  Test,mutable  _al :  System.Collections.ArrayList) :  void
    {
    }

    /// comment for indexer
    public Item [mutable  _i : int] : string {
      get {  null; }
    }

    /// comment for indexer wit multiple parameters
    public Item [mutable  _i : int,mutable  _t :  Test] : string {
      get {  null; }
    }

    /// <summary>
    /// comment for unary operator
    /// </summary>
    public static @! ( _t : Test) :  bool
    {
       false;
    }

    /// <summary>
    /// comment for binary operator
    /// </summary>
    public static @+ ( _t : Test, b :  int) :  int
    {
       b;
    }

    /// comment for destructor
    protected override Finalize  () : void 
    {
    }

    /// comment for .ctor()
    public this ()
    {
    }

    /// comment for .ctor(string arg, string [] args)
    public this (mutable  _arg : string,mutable  _args :   array [string])
    {
    }

    /// comment for internal class
    public class InternalClass
    {
    }

    /// comment for internal struct
    public struct InternalStruct
    {
    }
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
