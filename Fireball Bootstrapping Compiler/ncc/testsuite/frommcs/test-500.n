using System;
using System.Reflection;

[AttributeUsage(AttributeTargets.Field, AllowMultiple=false)]
class SomeCustomAttribute : Attribute {
  public this ()
  {
  }
}

class MainClass {

  [SomeCustomAttribute]
  public  mutable  a : int;

  [SomeCustomAttribute]
  public  mutable  x : int;

  [SomeCustomAttribute]
  public  mutable  y : int;

  public static Main () :  int
  {
    mutable  t = typeof (MainClass);
    mutable  fia = t.GetFields();

    {

    mutable temp_2_return_ = Nemerle.Extensions.DefaultValue(int);

    mutable temp_1_break_loop_ = false;

    foreach ( fi :> FieldInfo in fia)

    when (!temp_1_break_loop_ ) {
      mutable  ca = fi.GetCustomAttributes(typeof (SomeCustomAttribute), false);
    //  System.Console.WriteLine ("Field: {0} [{1}]", fi.Name, ca.Length);
      when (ca.Length != 1)
        {
        temp_1_break_loop_ = true;
        temp_2_return_ =  1;
        }
    }

    if( temp_1_break_loop_ )

    {

     temp_2_return_;

    }

    else

    {

    {
    
    Console.WriteLine ("OK");
    
     0;

    }

    }

    }
  }
}
/*
BEGIN-OUTPUT
OK
END-OUTPUT
*/
