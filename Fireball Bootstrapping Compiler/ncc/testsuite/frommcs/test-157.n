using System;
using System.Reflection;

namespace Test {
  
  public class MyAttribute: Attribute {
    public  mutable  val : string;
    public this (mutable  stuff : string) {
      System.Console.WriteLine (stuff);
      val = stuff;
    }
  }

        public interface ITest {
                 TestProperty : string {
                        [My ("testifaceproperty")] get;
                }
        }
  
  [My("testclass")]
  public class Test {
    static public Main () :  int {
      mutable  info = typeof (Test);
      mutable  attributes = info.GetCustomAttributes (false);
      for (mutable  i = 0; i < attributes.Length; i ++) {
        System.Console.WriteLine(attributes[i]);
      }
      if (attributes.Length != 1)
      {
         1;
      }
      else {
      mutable  attr = ( attributes [0] :> MyAttribute);
      if (attr.val != "testclass")
      {
         2;
      }
      else {

                        info = typeof (ITest).GetMethod ("get_TestProperty");
      attributes = info.GetCustomAttributes (false);
      for (mutable  i = 0; i < attributes.Length; i ++) {
        System.Console.WriteLine(attributes[i]);
      }
      if (attributes.Length != 1)
      {
         3;
      }
      else {

                        attr = ( attributes [0] :> MyAttribute);
      if (attr.val != "testifaceproperty")
      {
         4;
      }
      else {
                        
       0;
    }
    }
    }
    }
    }
  }
}
/*
BEGIN-OUTPUT
testclass
Test.MyAttribute
testifaceproperty
Test.MyAttribute
END-OUTPUT
*/
