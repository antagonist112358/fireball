//
// This test shows that the current way in which we handle blocks
// and statements is broken.  The b [q,w] code is only executed 10
// times instead of a 100
//
using System;

class X {

  static dob (b :  array [2,int]) :  int
  {
    mutable  total = 0;
    
    foreach ( i : int in b)
      total += i;

     total;
  }

  //
  // This tests typecasting from an object to an array of ints
  // and then doing foreach
  //
  static count ( o : object) :  int
  {
    mutable  total = 0;

    foreach ( i : int in ( o :>  array [int]))
      total += i;

     total;
  }
  
  static Main () :  int
  {
    mutable  b =  array(10,10);

    for (mutable  q = 0; q < 10; q += 1)
      for (mutable  w = 0; w < 10; w += 1)
        b [q,w] = q * 10 + w;

    if (dob (b) != 4950)

    {
       1;

    }

    else
  {

    mutable  a =  array(10);
    for (mutable  i = 0; i < 10; i += 1)
      a [i] = 2;

    if (count (a) != 20)

    {
       2;

    }

    else
  {
    
     0;
  }
  }
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
