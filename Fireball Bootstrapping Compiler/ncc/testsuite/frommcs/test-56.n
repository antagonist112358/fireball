//
// Stress test properties and the various modes of 
// declarations (virtual, overrides, abstract, new)
//
using System;

interface I {
   P : int {
    get; set;
  }
}

abstract class A : I {
  public  mutable  p : int;
  public  mutable  q : int;
  
  public P : int {
    get {  p; }
    set { p = value; }
  }

  public abstract Q : int { get; set; }

  public  mutable  r : int;
  public virtual R : int { get {  r; } set { r = value; } }
}

class B : A {
  public  mutable  bp : int;

  public new P : int
  {
    get {  bp; }
    set { bp = value; }
  }

  public override Q : int {
    get {  q; }
    set { q = value; }
  }
}

class C : A {
  public override Q : int {
    get {  q; }
    set { q = value; }
  }

  public  mutable  rr : int;
  public override R : int { get {  rr; } set { rr = value; } }
}

class M {

  static Main () :  int
  {
    mutable  b =  B ();

    b.P = 1;
    b.R = 10;
    b.Q = 20;
         
    if (b.P != 1)
         
    {
       1;
         
    }
         
    else
  {
    if (b.bp != 1)
    {
       2;
    }
    else
  {

    if (b.R != 10)

    {
       3;

    }

    else
  {
    if (b.r != 10)
    {
       4;
    }
    else
  {

    if (b.Q != 20)

    {
       5;

    }

    else
  {
    if (b.q != 20)
    {
       6;
    }
    else
  {

    mutable  c =  C ();

    c.R = 10;
    c.Q = 20;
    c.P = 30;
    if (c.R != 10)
    {
       7;
    }
    else
  {
    if (c.rr != 10)
    {
       8;
    }
    else
  {
    if (c.P != 30)
    {
       9;
    }
    else
  {
    if (c.p != 30)
    {
       10;
    }
    else
  {

    Console.WriteLine ("Test passes");
     0;
  }
  }
  }
  }
  }
  }
  }
  }
  }
  }
  }
}
/*
BEGIN-OUTPUT
Test passes
END-OUTPUT
*/
