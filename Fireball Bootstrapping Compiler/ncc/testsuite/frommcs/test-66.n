//
// This tests checks out field access to arrays
//
using System;

struct A {
  public  mutable  a : int;
}

class Y {
  public  mutable  a : object;
}

class X {
  static  mutable  a_single :  array [A] =  array(10);
  static  mutable  a_double :  array [2,A] =  array(10,10);
  static  mutable  o_single :  array [Y] =  array(10);
  static  mutable  o_double :  array [2,Y] =  array(10,10);

  static FillOne () :  void
  {
    a_single [0].a = 1;
  }
  
  static FillSingle () :  void
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    
    for (i = 0; i < 10; i++){
      a_single [i].a = i + 1;
    }
  }

  static FillDouble () :  void
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    mutable  j = Nemerle.Extensions.DefaultValue (int);
    
    for (i = 0; i < 10; i++)
      for (j = 0; j < 10; j++)
        a_double [i,j].a = i * j;
  }

  static FillObject () :  void
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    
    for (i = 0; i < 10; i++){
      o_single [i] =  Y ();
      o_single [i].a = (i + 1);
    }
  }

  static FillDoubleObject () :  void
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    mutable  j = Nemerle.Extensions.DefaultValue (int);
    
    for (i = 0; i < 10; i++)
      for (j = 0; j < 10; j++){
        o_double [i,j] =  Y ();
        o_double [i,j].a = i * j;
      }
  }
  
  static TestSingle () :  int
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);{
    
    mutable temp_1_break_loop_ = false;
    
    mutable temp_2_return_ = Nemerle.Extensions.DefaultValue(int);
    
    if( temp_1_break_loop_ )
    
    {
    
     temp_2_return_;
    
    }
    
    else{
    
    for (i = 0; i < 10 && !temp_1_break_loop_; i++){
      when (a_single [i].a != i + 1)
        {
        temp_1_break_loop_ = true;
        temp_2_return_ =  1;
        }
    }
     0;}}
  }

  static TestDouble () :  int
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    mutable  j = Nemerle.Extensions.DefaultValue (int);{

    mutable temp_5_break_loop_ = false;

    mutable temp_6_return_ = Nemerle.Extensions.DefaultValue(int);

    if( temp_5_break_loop_ )

    {

     temp_6_return_;

    }

    else{

    for (i = 0; i < 10 && !temp_5_break_loop_; i++){{    
      mutable temp_3_break_loop_ = false;    
      mutable temp_4_return_ = Nemerle.Extensions.DefaultValue(int);    
      when( temp_3_break_loop_ )    
      {    
      temp_5_break_loop_ = true;    
      temp_6_return_ =  temp_4_return_;    
      }    
      when( !temp_5_break_loop_ )    
      {    
      for (j = 0; j < 10 && !temp_3_break_loop_; j++)
        when (a_double [i,j].a != (i *j))
          {
          temp_3_break_loop_ = true;
          temp_4_return_ =  2;
          }    
      }}
    }

     0;}}
  }

  static TestObjectSingle () :  int
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);{
    
    mutable temp_7_break_loop_ = false;
    
    mutable temp_8_return_ = Nemerle.Extensions.DefaultValue(int);
    
    if( temp_7_break_loop_ )
    
    {
    
     temp_8_return_;
    
    }
    
    else{
    
    for (i = 0; i < 10 && !temp_7_break_loop_; i++){
      when (((o_single [i].a) :> int) != i + 1)
        {
        temp_7_break_loop_ = true;
        temp_8_return_ =  1;
        }
    }
     0;}}
  }

  static TestObjectDouble () :  int
  {
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    mutable  j = Nemerle.Extensions.DefaultValue (int);{

    mutable temp_11_break_loop_ = false;

    mutable temp_12_return_ = Nemerle.Extensions.DefaultValue(int);

    if( temp_11_break_loop_ )

    {

     temp_12_return_;

    }

    else{

    for (i = 0; i < 10 && !temp_11_break_loop_; i++){{    
      mutable temp_9_break_loop_ = false;    
      mutable temp_10_return_ = Nemerle.Extensions.DefaultValue(int);    
      when( temp_9_break_loop_ )    
      {    
      temp_11_break_loop_ = true;    
      temp_12_return_ =  temp_10_return_;    
      }    
      when( !temp_11_break_loop_ )    
      {    
      for (j = 0; j < 10 && !temp_9_break_loop_; j++)
        when (((o_double [i,j].a :> int)) != (i *j))
          {
          temp_9_break_loop_ = true;
          temp_10_return_ =  2;
          }    
      }}
    }

     0;}}
  }
  
  static Main () :  int
  {
    FillSingle ();
    FillDouble ();
    FillObject ();
    FillDoubleObject ();
    
    if (TestSingle () != 0)
    
    {
       1;
    
    }
    
    else
  {
    
    if (TestDouble () != 0)
    
    {
       2;
    
    }
    
    else
  {

    if (TestObjectSingle () != 0)

    {
       3;

    }

    else
  {

    if (TestObjectDouble () != 0)

    {
       4;

    }

    else
  {

    Console.WriteLine ("test passes");
     0;
  }
  }
  }
  }
  }
}
/*
BEGIN-OUTPUT
test passes
END-OUTPUT
*/
