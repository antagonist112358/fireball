using System;
using System.Reflection;

public class Foo[S]
{ }

public struct Bar[T]
{ }

public class Test[U]
{
  public static Func (mutable  u : U) :  void
  {
    Console.WriteLine (u.GetType());
  }
}

class X
{
  static Test (mutable  t : Type,mutable  arg :  object) :  void
  {
    mutable  mi = t.GetMethod ("Func");
    _ = mi.Invoke (null,    array[ arg ]);
  }

  static Main () :  void
  {
    Test (typeof (Test[Foo[int]]),  Foo .[int]());
    Test (typeof (Test[Bar[int]]),  Bar .[int]());
    Test (typeof (Test[Bar[string]]),  Bar .[string]());
    Test (typeof (Test[Foo[DateTime]]),  Foo .[DateTime]());
    Test (typeof (Test[DateTime]), DateTime.Now);
    Test (typeof (Test[string]), "Hello");
  }
}

/*
BEGIN-OUTPUT
Foo`1[System.Int32]
Bar`1[System.Int32]
Bar`1[System.String]
Foo`1[System.DateTime]
System.DateTime
System.String
END-OUTPUT
*/
