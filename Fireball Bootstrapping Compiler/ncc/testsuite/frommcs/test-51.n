//
// This test is used to test the `base' implementation
//
using System;

class Base {
  public  mutable  b_int_field : int;
  public  mutable  b_string_field : string;

  public static b_const_three :   int = 3;
  
  public    b_int_property : int {
    get {
       b_int_field;
    }

    set {
      b_int_field = value;
    }
  }

  public b_get_id () :  string
  {
     "Base";
  }

  public this ()
  {
    b_int_field = 1;
    b_string_field = "base";
  }
}

class Derived : Base {
  new  mutable  b_int_field : int;
  new  mutable  b_string_field : string;
  new static b_const_three :  int = 4;

  new b_int_property : int {
      get {
         b_int_field;
      }


      set {
        b_int_field = value;
      }

    }
  
  public this ()
  {
    b_int_field = 10;
    b_string_field = "derived";
  }
  
  public Test () :  int
  {
    if (b_int_field != 10)
    {
       1;
    }
    else
  {
    if (base.b_int_field != 1)
    {
       2;
    }
    else
  {
    if (base.b_string_field != "base")
    {
       3;
    }
    else
  {
    if (b_string_field != "derived")
    {
       4;
    }
    else
  {
    base.b_int_property = 4;
    if (b_int_property != 10)
    {
       5;
    }
    else
  {
    if (b_int_property != 10)
    {
       6;
    }
    else
  {
    if (base.b_int_property != 4)
    {
       7;
    }
    else
  {
    if (b_const_three != 4)
    {
       8;
    }
    else
  {
    if (Base.b_const_three != 3)
    {
       9;
    }
    else
  {
    System.Console.WriteLine ("All tests pass");
     0;
  }
  }
  }
  }
  }
  }
  }
  }
  }
  }
}

class boot {
  static Main () :  int
  {
    mutable  d =  Derived ();
     d.Test ();
  }
}
/*
BEGIN-OUTPUT
All tests pass
END-OUTPUT
*/
