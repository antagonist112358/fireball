using System;

interface ITargetInfo
{
   TargetIntegerSize : int {
    get;
  }
}

interface ITargetMemoryAccess : ITargetInfo
{
}

interface IInferior : ITargetMemoryAccess
{
}

interface ITest
{
   Item [mutable  index : int] : int {
    get;
  }
}

class Test : ITest
{
  public Item [mutable  _index : int] : int {
    get {  5; }
  }

  ITestItem [mutable  _index : int] :int implements  ITest.Item {
    get {  8; }
  }
}

class D : IInferior
{
  public TargetIntegerSize : int {
    get {  5; }
  }

   Hello (mutable  inferior : IInferior) : int
  {
     inferior.TargetIntegerSize;
  }

  static Main () :  int
  {
    mutable  d =  D ();

    if (d.Hello (d) != 5)

    {
       1;

    }

    else
  {
  {

    mutable  test =  Test ();
    mutable  itest = test : ITest;

    if (test [0] != 5)

    {
       2;

    }

    else
  {
  {
    if (itest [0] != 8)
    {
       3;
    }
    else
  {
  {

     0;
  }
  }
  }
  }
  }
  }
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
