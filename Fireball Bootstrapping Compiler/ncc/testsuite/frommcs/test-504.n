// Compiler options: 

// This ensures that any "unreachable code" warning will error out
// rather than generate invalid IL

class Foo
{
  public static  mutable  y : int = 1;
  public static f () :  int {  0; }
  public static Main () :  int
  {
    mutable  x = 0;

    {

    mutable temp_2_return_ = Nemerle.Extensions.DefaultValue(int);

    mutable temp_1_break_loop_ = false;

    do {
      x = f ();
      if (x != 0)
      {
        /*continue*/();
      }
      else { {
      {
      temp_1_break_loop_ = true;
      temp_2_return_ =  0;
      }
    } when( !temp_1_break_loop_ ) { }
    }
    } while (x > y && !temp_1_break_loop_);

    if( temp_1_break_loop_ )

    {

     temp_2_return_;

    }

    else

    {

    {

     1;

    }

    }

    }
  }
}

/*
BEGIN-OUTPUT
END-OUTPUT
*/
