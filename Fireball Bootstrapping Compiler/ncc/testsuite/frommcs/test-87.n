//
// Tests the lookup of names on nested classes.
//
// Tests nested interfaces
//
class Top {

  class X {

  }

  class Y : X {
  }

  interface A {
     get_one () : int;
  }

  interface B : A {
     get_two () : int;
  }

  public class XA : A {
    public get_one () :  int {  1; }
  }

  class XB : B {
    public get_one () :  int {  1; }
    public get_two () :  int {  2; }
  }
  
  static Main () :  int
  {
    mutable  x =  XA ();

    if (x.get_one () != 1)

    {
       1;

    }

    else
  {

    mutable  b =  XB ();
    if (x.get_one () != 1)
    {
       2;
    }
    else
  {
    if (b.get_two () != 2)
    {
       3;
    }
    else
  {

    mutable  _xb = null :  array [XB];

     0;
  }
  }
  }
  }
}

//
// The following tests that the compiler will actually properly
// find the types that are requested (they are nested types)
//
class Other {
  public X () :  void
  {
    mutable  _xa = null : Top.XA;
    mutable  _xb = null :  array [Top.XA]; ()
  }
}
/*
BEGIN-OUTPUT
END-OUTPUT
*/
