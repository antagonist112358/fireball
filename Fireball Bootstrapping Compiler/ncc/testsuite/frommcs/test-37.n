//
// This test excercises array access on single dimension, multi-dimension
// and jagged arrays.
//
using System;

class X {
  static m (mutable  a :  array [int]) :  void
  {
    a [0] = 0xdead;
  }

  static test_int_single_dim () :  int
  {
    mutable  a =  array(10);
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    
    for (i = 0; i < 10; i++)
      a [i] = i;

    m (a);

    if (a [0] != 0xdead)

    {
       1;

    }

    else
  {
  {

    a [0] = 0;
    {
    mutable temp_2_return_ = Nemerle.Extensions.DefaultValue(int);
    mutable temp_1_break_loop_ = false;
    for (i = 9; i >= 0 && !temp_1_break_loop_; i--){
      when (a [i] != i)
        {
        temp_1_break_loop_ = true;
        temp_2_return_ =  2;
        }
    }
    if( temp_1_break_loop_ )
    {
     temp_2_return_;
    }
    else
    {
    {
     0;
    }
    }
    }
  }
  }
  }

  static simple_test_double_dim () :  int
  {
    mutable  b =  array(10, 10);

    b [0, 0] = 1;
    b [4, 4] = 1;

    if (b [0, 0] != b [4, 4])

    {
       20;

    }

    else
  {
  {
    if (b [1, 1] != b [5, 5])
    {
       21;
    }
    else
  {
  {

     0;
  }
  }
  }
  }
  }
  
    static dd (mutable  b :  array [2,int]) :  void
    {
      mutable  i = Nemerle.Extensions.DefaultValue (int);
      mutable  j = Nemerle.Extensions.DefaultValue (int);

      for (i = 0; i < 10; i++)
        for (j = 0; j < 10; j++)
          b [i, j] = b [i, j] + 1;
    }

    static test_int_double_dim () :  int
    {
      mutable  b =  array(10,10);
      mutable  i = Nemerle.Extensions.DefaultValue (int);
      mutable  j = Nemerle.Extensions.DefaultValue (int);
      
      for (i = 0; i < 10; i++)
        for (j = 0; j < 10; j++)
          b [i,j] = i * 10 + j;

      dd (b);
      
      {
      
      mutable temp_8_return_ = Nemerle.Extensions.DefaultValue(int);
      
      mutable temp_7_break_loop_ = false;
      
      for (i = 0; i < 10 && !temp_7_break_loop_; i++)
      
      {
        mutable temp_5_return_ = Nemerle.Extensions.DefaultValue(int);
        mutable temp_4_break_loop_ = false;
        for (j = 0; j < 10 && !temp_4_break_loop_; j++)
          when (b [i,j] != i *10 + j + 1){
            Console.WriteLine ($"Expecting $(i * 10 + j + 1) got: $(b [i,j])");
            {
            temp_4_break_loop_ = true;
            temp_5_return_ =  10;
            }
          }
        when( temp_4_break_loop_ )
        {
        temp_7_break_loop_ = true;
        temp_8_return_ =  temp_5_return_;
        }
      
      }
      
      if( temp_7_break_loop_ )
      
      {
      
       temp_8_return_;
      
      }
      
      else
      
      {
      
      {
      
       0;
      
      }
      
      }
      
      }
    }

    static test_jagged () :  int
    {
      mutable  a =  array(10);
      mutable  i = Nemerle.Extensions.DefaultValue (int);
      
      {
      
      mutable temp_14_return_ = Nemerle.Extensions.DefaultValue(int);
      
      mutable temp_13_break_loop_ = false;
      
      for (i = 0; i < 10 && !temp_13_break_loop_; i++){
        when (a [i] != null)
          {
          temp_13_break_loop_ = true;
          temp_14_return_ =  20;
          }
        when( !temp_13_break_loop_ )
        {
        
        a [i] =  array(10);

        {

        mutable temp_11_return_ = Nemerle.Extensions.DefaultValue(int);

        mutable temp_10_break_loop_ = false;

        for (mutable  j = 0; j < 10 && !temp_10_break_loop_; j++){
          mutable  q = Nemerle.Extensions.DefaultValue (int);
          a [i][j] = j * 10;
          q =({  a [i][j] = j * 10;  a [i][j] });
          
          a [i][j]++;

          when (a [i][j] != q + 1)
            {
            temp_10_break_loop_ = true;
            temp_11_return_ =  21;
            }
        }

        when( temp_10_break_loop_ )

        {

        temp_13_break_loop_ = true;

        temp_14_return_ =  temp_11_return_;

        }

        }when( !temp_13_break_loop_ ){}
        }
      }
      
      if( temp_13_break_loop_ )
      
      {
      
       temp_14_return_;
      
      }
      
      else
      
      {
      
      {

       0;
      
      }
      
      }
      
      }
    }

  static Main () :  int
  {
    mutable  v = Nemerle.Extensions.DefaultValue (int);
    
    Console.WriteLine ("hello");

    v = test_int_single_dim ();

    if (v != 0)

    {
       v;

    }

    else
  {
  {

        v = test_int_double_dim ();
        if (v != 0)
        {
           v;
        }
        else
  {
  {
    
        v = test_jagged ();

    v = simple_test_double_dim ();
    if (v != 0)
    {
       v;
    }
    else
  {
  {

    mutable  a =  array(10);
    mutable  i = Nemerle.Extensions.DefaultValue (int);
    for (i = 0; i < 10; i++){
      a [i] = i;
            a [i]++;
       Console.WriteLine ($"Should be: $(i + 1) it is = $(a [i])");
    }
    Console.WriteLine ("bye");
     0;
  }
  }
  }
  }
  }
  }
  }
}


/*
BEGIN-OUTPUT
hello
Should be: 1 it is = 1
Should be: 2 it is = 2
Should be: 3 it is = 3
Should be: 4 it is = 4
Should be: 5 it is = 5
Should be: 6 it is = 6
Should be: 7 it is = 7
Should be: 8 it is = 8
Should be: 9 it is = 9
Should be: 10 it is = 10
bye
END-OUTPUT
*/
