public abstract class B {
  public abstract Foo() : void;
  public abstract X : string { get; }         // H: hiden definition
}

public class Derived1 : B {
  public Foo() : void {}                      // E: hides abstract method B.Foo
  public X : string { get { "" } }            // E: hides abstract method B.get_X
}

public class Derived2 : B {
  public new Foo() : void {}                  // E: hides abstract method B.Foo
  public new X : string { get { "" } }        // E: hides abstract method B.get_X
}

public class Derived3 : B {
  public override Foo() : void {}             // OK
  public override X : string { get { "" } }   // OK
}

public class Derived4 : Derived3 {
  public new Foo() : void {}                  // OK
  public new X : string { get { "" } }        // OK
}

public class Derived5 : Derived3 {
  public new override Foo() : void {}           // E: both `override' and `new' attributes specified
  public new override X : string { get { "" } } // E: both `override' and `new' attributes specified
}

public abstract class Derived6 : B {
  public new abstract Foo() : void {}           // E: hides abstract method B.Foo
  public new abstract X : string { get { "" } } // E: hides abstract method B.get_X
}

public interface X { foo () : void; }
public interface Y : X { new foo() : void; } // OK