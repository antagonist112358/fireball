using Nemerle.IO;

module Bug941 {
     public Foo() : void {
       def f () : (out int) -> int { // E: nested ref/out type found
        throw System.NotImplementedException()
       }
       _ = f()
    }    
}

module A {

  f (x : ref int) : void // E: cannot store.*in closure
  {
    def g () {
      x = x + 3;
    };
    g ();
    g ();
  }

  id [T] (x : T) : T { x }

  Main () : void
  {
    def _g (_ : ref int) { };    // E: ref/out parameters are not supported in local methods
    mutable x = 3;
    def _ = id (ref x);         // E: in argument #1 \(x\), needed a Normal parameter, got Ref
    ()
  }
}
