using Nemerle.IO;
using System;
using System.Console;

class A {}
class B : A {}

class M
{
  static g(b : B) : A { (b : A) }        // OK
  static f() : int { ("foo" : int) }    // E: expected int.*, got string in type-enforced expression
}

enum Fruit { | Apple | Orange };

module M1 {
  // bug #753
  Foo() : list[string]
  {
    if (true)
      array(0) // E: Cannot implicitly convert type .array.+ to .list\[string\].
      else
        null 
  }

  f() : void
  {
    def f1 (x) { printf ("%s\n", x) };
    printf ("%d", f1 ("foo")); // E: expected int.*, got void in type-enforced expression
    f1 (3); // E: in argument #1 \(x\).*, needed a string.*, got int

    _ = null : System.Int32; // E: expected int.*, got .* in type-enforced expression.*null

    _ = $ "$(foo"; // E: no closing bracket found in `\(foo' \(the closing bracket in format string is probably missing\)
    _ = $ "$(foo +)"; // E: parse error near operator
    _ = $ "$()"; // E: expression without content
    _ = $ ""; // W: empty spliced string
    _ = $ " foo "; // W: spliced string without splices: ' foo '
  }

  g1() : void
  {
    if (true)
      null         // W: ignored computed value of type
    else
      Fruit.Apple; // W: ignored computed value of type Fruit
  }
  
  g2() : void
  {
    _ =
      if (true)
        Fruit.Apple
      else
        null; // E: Cannot implicitly convert type 'object\+' to 'Fruit.'

    _ =
      if (true)
        null
      else
        Fruit.Apple; // E: Cannot implicitly convert type 'Fruit' to '.+'

    def _x : Fruit =
      if (true)
        null // E: Cannot implicitly convert type 'object\+' to 'Fruit'
      else
        Fruit.Apple;
  }

  public c2(a: int): int
  {
      def b()
      {
        if (a == 2)
          (); // E: Cannot implicitly convert type 'void' to 'int\+'.
        else
          1
      }

      if (a == 1)
          b()
      else
          1;
  }

  public c3(a: int): void
  {
    def b()
    {
      if (a == 2)
        1 // W: ignored computed value of type int
      else
        ();
    }

    if (a == 1)
      b()
    else
      1; // W: gnored computed value of type int
  }
  public c1(a: int): int
  {
      if (a == 1)
        () // E: Cannot implicitly convert type 'void' to 'int'
      else
        1;
  }

  public c5(a: int): int
  {
      if (a == 1)
        1
      else
        () // E: Cannot implicitly convert type 'void' to 'int'
  }

  public c4(a: int): void
  {
      if (a == 1)
        1 // W: ignored computed value of type int
      else
        ()
  }

  public c6(a: int) : long
  {
      if (a == 1)
        "s" // E: Cannot implicitly convert type 'string' to 'long'
      else
        1;
  }
  
  public d1() : void
  {
    if (Environment.ProcessorCount > 0)
      ReadLine(); // W: ignored computed value of type string
    else
      WriteLine();

    _ = ReadLine();
  }

  public d2() : void
  {
    if (Environment.ProcessorCount > 0)
      WriteLine();
    else
      ReadLine(); // W: ignored computed value of type string
  }
}
