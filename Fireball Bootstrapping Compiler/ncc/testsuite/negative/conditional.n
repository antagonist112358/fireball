using System.Diagnostics;

interface IFoo
{
  [Conditional("X")] //E: Conditional attribute is not valid on interface members
  X() : void;
}

class Base
{
  public virtual Y() : void { }
}

interface IBar
{
  K() : void;
  M() : void;
}

class Foo : Base, IBar
{
  [Conditional("Foo")] //E: Conditional attribute is not valid on constructor, operator, or explicit interface implementation
  public this() {}

  [Conditional("X")] //E: Conditional attribute is not valid on .* because its return type is not void
  public X() : int { 0 } 
  
  [Conditional("Y")] //E: Conditional attribute is not valid on .* because it is an override method
  public override Y() : void { }

  [Conditional("Z")] //E: conditional member .* cannot have an out parameter
  public Z(p : out int) : void { p = 0 }

  [Conditional("K")] //E: Conditional member .* cannot implement interface member .*
  K() : void implements IBar.K {}

  [Conditional("M")] //E: Conditional member .* cannot implement interface member .*
  public M() : void {}
}


module Program 
{
  delegate D() : void;

  [Conditional("F")]
  F() : void {}
  
  Main() : void
  {
    def x : D = F; //E: cannot create delegate with .* because it has a Conditional attribute
    x();
  }
}