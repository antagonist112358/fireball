using SCG = System.Collections.Generic;
using Nemerle.Collections;
using Nemerle.Compiler.Parsetree;
using Nemerle.Assertions;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  /// <summary>
  /// Description of MainParser_FireballExtensions.
  /// </summary>
  public partial class MainParser
  {

    private static CreateConstructorFor(loc: Location, h: PFunHeader, fun_name: Name, modifiers: AttributesAndModifiers, 
        parameters: Seq[PParameter], baseCallArgs: Seq[PExpr]) : ClassMember.Function
    {
      def body = if (fun_name.Id == ".ctor") 
          <[$(PExpr.This()) (..$baseCallArgs)]>;
        else
          <[$(fun_name : name) (..$baseCallArgs)]>;
            
      def parmsWithoutValue = parameters.MapToList(p => match(p.DefaultValue) {
        | Some(_) => PParameter(p.Location, p.name, p.Type, p.modifiers, None(), p.PatternHack)
        | None => p
      });
      
      def newHeader = PFunHeader(h.Location, h.TypeParameters, h.ParsedSplicableName, h.ParsedReturnType, parmsWithoutValue, h._parsedParametersOpenLocation, h._parsedParametersCloseLocation);
      
      // Create the constructor with nothing specified
      def ctor = ClassMember.Function(header = newHeader, name = newHeader.ParsedSplicableName,  modifiers = modifiers, loc = loc, body = FunBody.Parsed(body), implemented = []);
      ctor.AddCustomAttribute(<[System.Runtime.CompilerServices.CompilerGenerated]>);
      ctor
    }
    
    static generateParameters(parms: list[PParameter]) : list[list[PParameter]] {
      mutable output = [];
      def stack = Nemerle.Collections.Stack(parms.Reverse());
      
      while(stack.Count > 0) {
        output ::= stack.ToListRev();
        _ = stack.Pop();
      }
      
      output.Reverse() + [[]]
    }
    
    static generateParameterPermutations(parms: list[PParameter]) : list[list[PParameter]] {
      def output = System.Collections.Generic.HashSet( EqualityComparer( (a,b) => NList.Equals(a,b) ) );
      def stack = Nemerle.Collections.Stack([parms.Reverse()]);
            
      def createOrderedSubsets(lst: list[PParameter]) : Seq[list[PParameter]] {
          lst.Map(parm => lst.Filter(p => !p.Equals(parm)))
      }
      
      while(stack.Count > 0) {
        def currSet = stack.Pop();
        when (!output.Contains(currSet)) { _ = output.Add(currSet) }
        createOrderedSubsets(currSet).Iter(i => stack.Add(i))
      }
      
      output.NToList().Sort((left, right) => if (left.Length < right.Length) 1 else if (left.Length == right.Length) 0 else -1)
    }
    
    // Generate method perutations from default valued arguments
    static generateMethodPerutations(loc: Location, h : PFunHeader, modifiers : AttributesAndModifiers, body: FunBody, impl: list[PExpr], gen_subsets: bool = false) : list[ClassMember.Function] {
      mutable parms_with_default_value = [];
      mutable parms_without_default_value = [];
      
      // The function name
      def fun_name = h.ParsedSplicableName;
      
      // Any implements details
      def impl_int = if (impl == null) [] else impl;
      
      // Creates a list of arguments to specify to the overloaded method
      def createBaseCallArgs(specified : list[PParameter], allParms: list[PParameter]) : list[PExpr] {
        allParms.Map(parm => {
          if (!specified.Contains(parm)) {
            parm.DefaultValue.Value
          } else {
            <[$(parm.ParsedSplicableName.GetName() : name)]>
          }          
        })
      }     
      
      // All of the parameters
      def allParms = h.Parameters;
      
      // Split the parameters list into non-valued and valued
      allParms.Iter(p => match(p.DefaultValue) {
        | Some(_) => parms_with_default_value ::= p
        | None => parms_without_default_value ::= p
      });     
      
      // If there are no default-valued parameters
      if (parms_with_default_value.IsEmpty()) {
        // Done
        def ctor = ClassMember.Function(header = h, name = fun_name,  modifiers = modifiers, loc = loc, body = body, implemented = impl_int);
        ctor.AddCustomAttribute(<[System.Runtime.CompilerServices.CompilerGenerated]>);
        [ctor]
      } else {        
        // Create the parameter permutations
        def permutations = if (!gen_subsets) { generateParameters(parms_with_default_value) } else { generateParameterPermutations(parms_with_default_value) }
        def all_permutations = permutations.Map(subset => parms_without_default_value + subset);        
        
        // Iterate through all the permutations
        all_permutations.Map(specifiedParms => {
          // Do we have all parms specified?
          if (specifiedParms.Length == allParms.Length) {
            // Transform all the parameters to parameters without default values
            def fixedParms = specifiedParms.Map(p => match(p.DefaultValue) {
              | Some(_) => PParameter(p.Location, p.name, p.Type, p.modifiers, None(), p.PatternHack)
              | None => p
            });
            def freshMods = AttributesAndModifiers(modifiers.mods, modifiers.custom_attrs);
            def newHeader = PFunHeader(h.Location, h.TypeParameters, h.ParsedSplicableName, h.ParsedReturnType, fixedParms, h._parsedParametersOpenLocation, h._parsedParametersCloseLocation);
            ClassMember.Function(header = newHeader, name = newHeader.ParsedSplicableName,  modifiers = freshMods, loc = loc, body = body, implemented = impl_int);
          } else {
            // At least one parameter was excluded from the method signature
            def callArgs = createBaseCallArgs(specifiedParms, allParms);
            CreateConstructorFor(loc, h, fun_name.GetName(), modifiers, specifiedParms, callArgs)
          }
        })
      }            
    }
    
    private with_separated_list[T](f : void -> T) : list[T]
    {
      def loop(acc)
      {
        match (peek_token())
        {
          | Token.Keyword("with") => shift(); loop(f() :: acc)
          | _           => NList.Rev(acc)
        }
      }

      loop([f()])
    }
    
    private ParseGenericParameters() : Typarms
    {      
      def parseNextTyparamName() : option[PExpr] {
        match(maybe_parse_ellipsis()) {
          | Some(e) => Some(e)
          | None =>
          match(peek_token()) {
            | Token.Identifier | Token.Operator("+") | Token.Operator("-") => Some(parse_expr(TokenStoppers.Colon | TokenStoppers.ColonLess))
            | _ => None()
          }
        }
      }
      
      def parseConstraint(tyvar : PExpr) : Splicable * list[Constraint] {
        mutable constraints = [];
        mutable isLowerConstraint = false;
        
        def splicableTyvar = match(tyvar) {
          | <[ + $inner ]> =>
              def tv = make_splicable (inner);
              constraints ::= Constraint(tv, <[ @+ ]>, true);
              tv;
          | <[ - $inner ]> =>
              def tv = make_splicable (inner);
              constraints ::= Constraint(tv, <[ @- ]>, true);
              tv
          | _ => make_splicable (tyvar)
        }
        
        match(peek_token()) {
          | Token.Operator(":") as t
          | Token.Operator(":>") as t =>
            shift();
            when(t is Token.Operator(":>")) { isLowerConstraint = true; }
            match(maybe_parse_ellipsis()) {
              | Some(e) => constraints ::= Constraint(null, <[ ($tyvar, $e) ]>, false)
              | None => constraints += with_separated_list( () =>
                  match(peek_token()) {
                    | Token.Keyword("enum"   as key) as tok
                    | Token.Keyword("class"  as key) as tok
                    | Token.Keyword("struct" as key) as tok =>
                      shift();
                      //(true, PExpr.Ref(tok.Location, MkName(key, tok.Location)))
                      Constraint(splicableTyvar, PExpr.Ref(tok.Location, MkName(key, tok.Location)), true)

                    | Token.Keyword("new") as tok =>
                      shift();
                      match (get_token ())
                      {
                        | Token.RoundGroup(null, _, _) => ()
                        | t => Error(t, "expected `()' after `new' in generic constraint")
                      }
                      //(true, PExpr.Ref(tok.Location, MkName("new", tok.Location)))
                      Constraint(splicableTyvar, PExpr.Ref(tok.Location, MkName("new", tok.Location)), true)
                    | _ => 
                      //(false, parse_expr(TokenStoppers.Braces | TokenStoppers.Where | TokenStoppers.Equal))
                      Constraint(splicableTyvar, parse_expr(TokenStoppers.Braces | TokenStoppers.With | TokenStoppers.Equal), false, isLowerConstraint)
                });
              
          }
          | _ => ()
        }
        
        (splicableTyvar, constraints)
      }            
      
      def loop() : Splicable * list[Constraint] {
        match(parseNextTyparamName()) {
          | Some(tyvar) => parseConstraint(tyvar);            
          | None => 
            Error(get_token(), "expecting type variable declaration");
            (null, [])
        }        
      }
      
      match (peek_token ())
      {
        | Token.SquareGroup (null, _, _) as t =>
          shift ();
          Error (t, "expecting type variables"); 
          Typarms.Empty

        | Token.SquareGroup (children, _, _) as group when children != null =>
            shift (); // now we are after whole '[..]' group
            def (names, constraints) = TokenMap(group, loop).FoldLeft( ([], []), (nameAndCons, acc) => {
              def (nameAcc, consAcc) = acc;
              def (name, cons) = nameAndCons;
              (name :: nameAcc, cons + consAcc)
            });
              
            Typarms(names.Reverse(), constraints)

        | _ => Typarms.Empty
      };
    }
    
    private parse_tuple_extraction_into_fields (
                    _parentType   : string,
                    members       : SCG.List[ClassMember],
                    startLocation : Location,
                    mods          : AttributesAndModifiers,
                    ids           : list[Splicable],
                    mut           : bool,
                    ret_types     : list[PExpr]) : void
    {
      mutable customs : list[Token.SquareGroup] = [];
      def loc = startLocation;
      def parse_tuple_values(group) {
        TokenMap(group, () => parse_expr(TokenStoppers.AllIncludingComma));        
      }
      def make_tuple_extractors(loc: Location, tupleExpr: PExpr.Ref, num) {
        mutable outExprs = [];
        for(mutable i = 0; i < num; i++) {
          def name = PExpr.Literal(loc, Literal.Integer(i, Manager.InternalType.Int32));
          outExprs = <[ $tupleExpr [ $name ] ]> :: outExprs;
        }        
        outExprs.Reverse();
      }
      def make_field(bodyLoc: Location, id: Splicable, mods, val: PExpr, ret_type: PExpr) : ClassMember.Field {
        def floc = loc.Combine(bodyLoc);
        def mods2 = mods.Clone();
        Util.locate (bodyLoc,
          mods2.AddCustomAttribute (<[
            $(MkNameGenerated("Nemerle") : name).InternalMacros.StaticInitializer ($val)
          ]>)
        );
        def result = ClassMember.Field(floc, id, mods2, ret_type, val);
        InitBodyLocations(result, null, bodyLoc);
        result
      }
      def fields = match(peek_token()) {
        | Token.Operator ("=") =>
          shift ();
          match(peek_token()) {
            // Tuple
            | Token.Identifier as tupTok =>
              shift();
              def loc = tupTok.Location;
              def tupleExpr = PExpr.Ref(tupTok.Location, MkNameGenerated(tupTok.name));
              def values = make_tuple_extractors(loc, tupleExpr, ids.Length);
              take_attributes_out (ref customs, System.AttributeTargets.Field, true, mods);
              values.ZipTriple(ids, ret_types).Map( (val, id, ret_type) => make_field(loc, id, mods, val, ret_type) )
            // Tuplized values
            | Token.RoundGroup(toks, _, _) as group =>
              shift();
              def values = parse_tuple_values(group);
              if (values.Length != ids.Length) {
                Error(toks, $"expecting $(ids.Length) values for each declared field. Got $(values.Length) values instead.");
                []
              } else {
                take_attributes_out (ref customs, System.AttributeTargets.Field, true, mods);
                values.ZipTriple(ids, ret_types).Map( (val, id, ret_type) => make_field(loc, id, mods, val, ret_type) )
              }
            | t =>
              Error(t, "expecting either tuple to extract field values from or a tuplized set of values.");
              []
          }
          
        | t => 
          Error (t, "expecting '=' in tuple extracted fields declaration");
          []
      }
      
      when (mut) { mods.mods |= NemerleModifiers.Mutable }

      when (fields != null && fields.Length > 0)
      {
        foreach(field in fields) {
          field._env = env;
          members.Add(field);
        }
      }      
    }   
    
    private create_property_function(loc: Location, bodyLocation: Location, mods: AttributesAndModifiers, id : Splicable, 
                                     body_expr: option[PExpr], prefix: string, returnType: PExpr, pparams: list[PParameter]) : ClassMember.Function
    {
        def body = match(body_expr)
        {
          | Some(expr) => FunBody.Parsed(expr)
          | None => FunBody.Abstract()
        }       
        
        def genLoc = id.Location.AsGenerated();
        def name = AddPrefixToSplicable(prefix + "_", id, genLoc);
        def fh = PFunHeader(genLoc, name, returnType, pparams);
        def bodyMods = AttributesAndModifiers(mods.mods, []);
        def member = ClassMember.Function(loc.FromEnd().AsGenerated(), fh.ParsedSplicableName, bodyMods, fh, [], body);

        InitBodyLocations(member, null, bodyLocation);
        member._env = env;
        member.ReturnValueModifiers = AttributesAndModifiers();
        
        member      
    }
    
    private ParseBlockOrExpression() : PExpr
    {
      match(peek_token())
      {
        | Token.BracesGroup => parse_block([], false)
        | _ => parse_expr()
      }
    }
    
    // Handles parsing of vals and vars at the class level, which could be generated as properties
    private parse_field_as_property (
                    _parentType   : string,
                    members       : SCG.List[ClassMember],
                    startLocation : Location,
                    mods          : AttributesAndModifiers,
                    id            : Splicable,
                    mut           : bool,
                    ret_type      : PExpr) : void
    {
      mutable customs : list[Token.SquareGroup] = [];
      mutable bodyLocation = Location.Default;      
      mutable endLocation = Location.Default;
      def loc = startLocation + ret_type.Location;
      
      
      take_attributes_out (ref customs, System.AttributeTargets.Field, true, mods);
      
      def make_prop_setter(body_expr : option[PExpr], prefix: string, returnType: PExpr) : ClassMember.Function
      {
        def pparams = PParameter(MkNameGenerated("value"), AttributesAndModifiers.Empty, ret_type) :: [];
        
        create_property_function(loc, bodyLocation, mods, id, body_expr, prefix, returnType, pparams)
      }
      def make_prop_getter(body_expr : option[PExpr], prefix: string, returnType: PExpr) : ClassMember.Function
      {
        create_property_function(loc, bodyLocation, mods, id, body_expr, prefix, returnType, [])
      }
      
      def init_expr = match(peek_token())
      {
        | Token.Operator ("=") as toc =>
          shift ();
          endLocation = CalcTokenLocation(stream);
          bodyLocation = toc.Location.FromEnd() + endLocation;
          def body_expr = ParseBlockOrExpression();
          body_expr.Location = bodyLocation; // correct location
          
          Some(body_expr)
          
        | _ => None()
      }
      
      def initializer = init_expr;
      
      def (setter, getter) = if (mut) {
        (Some(make_prop_setter(None(), "set", PExpr.Void())), Some(make_prop_getter(None(), "get", ret_type)))
      } else {
        (None(), Some(make_prop_getter(None(), "get", ret_type)))
      }
      
      def prop = ClassMember.Property(loc + endLocation, id, mods, parameters = [], returnType = ret_type, 
        getter = getter, setter = setter, initializer = initializer);
      
      prop._parsedParametersOpenLocation = if (bodyLocation != Location.Default) bodyLocation.FromStart().AsGenerated() else loc;
      prop._parsedParametersCloseLocation = if (bodyLocation != Location.Default) bodyLocation.FromEnd().AsGenerated() else loc;
      prop.ParsedImplemented = [];
      
      members.Add(prop)      
    }
    
  }
}
