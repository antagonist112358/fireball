/*
 * Copyright (c) 2011 RSDN Team.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

using System;
using System.Text;
using System.IO;
using Nemerle;
using Nemerle.Assertions;
using Nemerle.Utility;

namespace Nemerle.Compiler
{
  public interface ISource
  {
    FileIndex : int { get; }
    GetText() : string;
  }

  [Record]
  public sealed class StringSource : ISource
  {
    public FileIndex : int { get }

    public GetText() : string { text }
    
    private text : string;
  }

  public sealed class FileSource : ISource
  {
    public this ([NotNull] filePath : string, checkDuplicatedFiles : bool, checkLastLineForLF : bool)
    {
      _filePath             = filePath;
      _checkDuplicatedFiles = checkDuplicatedFiles;
      _checkLastLineForLF   = fun () { checkLastLineForLF };
    }

    public this ([NotNull] filePath : string, [NotNull] warnings : WarningOptions)
    {
      _filePath             = filePath;
      _checkDuplicatedFiles = true;
      _checkLastLineForLF   = fun () { warnings.IsEnabled(10002) };
    }

    public FileIndex : int { get { InternalSource.FileIndex } }

    public GetText() : string { InternalSource.GetText() }

    private InternalSource : ISource
    {
      mutable _internalSource : ISource;
      get
      {
        when (null == _internalSource)
          _internalSource = ReadFile(_filePath, checkDuplicatedFiles = _checkDuplicatedFiles, checkLastLineForLF = _checkLastLineForLF());
        _internalSource
      }
    }

    public static ReadFile([NotNull] filePath : string, checkDuplicatedFiles : bool, checkLastLineForLF : bool) : ISource
    {
      try 
      {
        using (file   = FileStream(filePath, FileMode.Open, FileAccess.Read))
        using (stream = StreamReader(file, UTF8Encoding(true, true)))
        {
          def index =
            if (checkDuplicatedFiles)
              Location.AddFile(filePath)
            else
              Location.GetFileIndex(filePath);
          def code = stream.ReadToEnd();
          when (checkLastLineForLF)
          {
            _ = file.Seek (-1 :> Int64, SeekOrigin.End);
            def lastByte = file.ReadByte();
            if (lastByte >= 0)
            {
              def ch = Convert.ToChar(lastByte);
              when (ch != '\n')
                Message.Warning(Location(index, 1, 1), "no new line at the end of the file");
            }
            else
              throw LexerBase.Error("unexpected end of file");
          }
          StringSource(index, code)
        }
      }
      catch
      {
        | e => Message.FatalError(Location(filePath, 1, 1, 1, 1), $"cannot open file `$filePath': $(e.Message)")
      }
    }
    
    private _filePath             : string;
    private _checkDuplicatedFiles : bool;
    private _checkLastLineForLF   : void -> bool;
  }
}
