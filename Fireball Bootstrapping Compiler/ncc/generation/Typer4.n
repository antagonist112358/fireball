/*
 * Copyright (c) 2005-2008 The University of Wroclaw.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *    3. The name of the University may not be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE UNIVERSITY ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 * NO EVENT SHALL THE UNIVERSITY BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#if DEBUG
  #define CHECK_STV
#endif

using Nemerle.Collections;
using Nemerle.Utility;
using Nemerle.Logging;

using Nemerle.Compiler;
using Nemerle.Compiler.Typedtree;
using Nemerle.Compiler.SolverMacros;

[assembly: LogFlag (STV, false)]

namespace Nemerle.Compiler
{
  [ManagerAccess]
  class Typer4
  {
    current_fun : TFunHeader;
    current_type : TypeBuilder;
    messenger : Messenger;
    the_method : MethodBuilder;
    is_instance_ctor : bool;
    typer : Typer;

    #region Entry points
    
    public this(meth : MethodBuilder, typer : Typer = null)
    {
      Manager = meth.DeclaringType.Manager;
      current_fun = meth.GetHeader ();
      the_method = meth;
      messenger = Manager.Solver.CurrentMessenger;
      current_type = meth.DeclaringType;
      is_instance_ctor = the_method.MemberKind == MemberKinds.Constructor && !the_method.IsStatic;
      this.typer = typer;
    }


    public Run () : void
    {
      when (typer != null)
        typer.RaiseBeforeStage4();
      
      Util.locate (current_fun.Location, {
        match (current_fun.body) {
          | FunBody.Typed (body) =>
            label_blocks.Clear ();
            // Message.Debug ("start ush");
            def body' = UnShare (body);
            // Message.Debug ("start T4");
            def body' = Walk(body');
            def body' =
              if (NeedBoxing (current_fun.ReturnType.Fix(), body'))
                Box (current_fun.ReturnType.Fix(), body')
              else body';

            #if CHECK_STV
              foreach (tv in current_fun.TypeParameters)
              {
                Util.cassert (tv.current_type == null);
                tv.current_type = current_type;
                tv.current_method = the_method;
              }
              foreach (tv in current_type.typarms)
              {
                when (tv.current_type == null)
                  tv.current_type = current_type;
              }
              log (STV, $"check header $the_method");
              foreach (parm in current_fun.Parameters)
                CheckSTV (parm.ty);
              CheckSTV(current_fun.ReturnType);
            #endif

            goto_targets.Clear();
            _ = Throws (body', allow_try = true, is_top = true);
            _ = NeedsEmptyStack (body');

            current_fun.body = FunBody.Typed (body');
            when (Manager.Options.ShouldDump (current_fun))
              Message.Debug ($ "after T4: $the_method [$(current_fun.Name)] "
                               ":\n$(body')\n");
          | _ => assert(false)
        }
      })
    }


    internal static NeedBoxing (target_type : FixedType, expr : TExpr) : bool
    {
      def src = expr.Type.Fix ();

      (src.IsValueType || src is FixedType.Void) 
       && (!target_type.IsValueType && !(target_type is FixedType.StaticTypeVarRef)
       ) ||
       (src is FixedType.StaticTypeVarRef && !target_type.IsValueType)
    }
    

    static Box (target_type : FixedType, expr : TExpr) : TExpr
    {
      TExpr.TypeConversion (target_type, expr, target_type,
                            ConversionKind.Boxing ())
    }

    static Convert (target_type : TypeVar, expr : TExpr) : TExpr
    {
      TExpr.TypeConversion (target_type, expr, target_type,
                            ConversionKind.GenericSim ());
    }
    #endregion


    #region Throw handling
    goto_targets : Hashtable [int, bool] = Hashtable ();

    HasJumpTarget(expr : TExpr) : bool
    {
      def res =
        match (expr)
        {
          | Label(id, _) => 
            //assert2(!(current_fun?.Name == "FindRecoveryPosition" && Manager.GetIdName(id) == "Recovery_TokenString_KwTest_0"));
            goto_targets.Contains(id) || Manager.HasName(id) // made by a macro
            
          | Sequence (e1, e2) =>
            HasJumpTarget (e1) || HasJumpTarget (e2)
          | DebugInfo(null, _)  => false
          | DebugInfo(tExtr, _) => HasJumpTarget(tExtr)
          | TExpr.MacroEnvelope(expanded=expanded) => HasJumpTarget(expanded)
          | _ => false
        };
      expr.JumpTarget = res;
      res
    }

    #if CHECK_STV
    CheckSTV (t : TypeVar) : void
    {
      if (Manager.Solver.CanEnterPossiblyLooping ())
        try {
          match (t.Fix ()) {
            | Class (_, args)
            | Tuple (args) =>
              args.Iter (CheckSTV);

            | Intersection (args) =>
              foreach (a in args) CheckSTV (a);

            | Ref (t)
            | Out (t)
            | Array (t, _) =>
              CheckSTV (t);

            | Void => {}

            | Fun (t1, t2) =>
              CheckSTV (t1);
              CheckSTV (t2);

            | StaticTypeVarRef (tv) =>
              Util.cassert (tv.current_type != null, $"type is null for $tv");
              def check (t : TypeInfo) {
                if (t == null)
                  Util.ice ($ "tv $tv defined in $(tv.current_type) and accessed from "
                               "$(current_type)");
                else if (t : object == tv.current_type) {}
                else check (t.DeclaringType)
              }
              check (current_type);
              Util.cassert (tv.current_method == null ||
                            tv.current_method : object == the_method,
                            $ "tv $tv defined in $(tv.current_method) and accessed from "
                               "$(the_method)");
              {}
          }
        } finally {
          Manager.Solver.LeavePossiblyLooping ()
        }
      else {
        ReportError (Manager.Solver.CurrentMessenger,
                     $ "CheckSTV for $t failed");
        when (Manager.Solver.CurrentMessenger.NeedMessage)
          Message.MaybeBailout ();
      }
    }
    #endif

    NoThrowPlease (e : TExpr) : void
    {
      when (Throws (e))
        Message.Error (e.Location, "`throw' is not allowed here");
    }

    NoDeepVoid (expr : TExpr, t : TypeVar) : void
    {
      match (t.Fix ()) {
        | Tuple (tp)
        | Class (_, tp) =>
          foreach (t in tp)
            when (t.Fix ().Equals (InternalType.Void))
              Message.Error (expr.Location, $ "cannot use `void' in generic specifier of $expr");
        | _ => {}
      }
    }

    Throws (expr : TExpr, allow_try = false, is_top = false) : bool
    {
      //log (STV, expr.loc, $ "{ throws: top=$is_top $(expr.GetType()) $expr");
      #if CHECK_STV
        when (expr.ty != null) {
          log (STV, expr.loc, $ "( : $(expr.Type)");
          CheckSTV (expr.Type);
          log (STV, expr.loc, $ "done )");
        }
        match (expr) {
          | DefValIn (name, _, _) =>
            log (STV, expr.loc, $ "( name($(name)) : $(name.Type)");
            CheckSTV (name.Type);
            log (STV, expr.loc, $ "done )");
          | Try (_, cases) =>
            def walk_case (case) {
              | Try_case.Catch (name, _)
              | Try_case.Filter (name, _, _) =>
                log (STV, expr.loc, $ "( name($(name)) : $(name.Type)");
                CheckSTV (name.Type);
                log (STV, expr.loc, $ "done )");
              | Try_case.Fault => ()
            }
            foreach (case in cases)
              walk_case (case);
          | _ => ()
        }
      #endif
      def res = 
        match (expr)
        {
          | Throw (e) =>
            unless (e == null)
              NoThrowPlease (e);
            true

          | Goto (id, _) as g =>
            //assert2(!(current_fun?.Name == "FindRecoveryPosition" && Manager.GetIdName(id) == "Recovery_TokenString_KwTest_0"));
            goto_targets[id] = true;
            if (label_blocks.Contains (id))
              g.try_block -= label_blocks [id];
            else
            {
              //assert2(false);
              Message.Error (expr.Location, $"non local goto (block return?) detected (l$id)");
            }

            true

          | Sequence(e1, DebugInfo (null, _)) => Throws(e1, allow_try, is_top)
          | Sequence(e1, e2)
          | DefValIn(_, e1, e2) =>
            if (Throws(e1, allow_try))
            {
              if (HasJumpTarget(e2))
                Throws(e2, allow_try, is_top)
              else
                true
            }
            else
              Throws(e2, allow_try, is_top)

          | If(cond, e1, e2, _, _) =>
            _ = Throws(cond, allow_try);
            def th1 = Throws(e1, allow_try, is_top);
            Throws(e2, allow_try, is_top) && th1;

          | Assign (e1, e2) =>
            when (Throws (e1))
              Message.Error (expr.Location, "`throw' in assignment target");

            if (e1 is TExpr.LocalRef)
              if (Throws (e2, allow_try))
              {
                // Message.Warning (expr.loc, "bad style: each branch in this block "
                //                 "ends with a break");
                true
              }
              else
                false
            else if (Throws (e2))
            {
              Message.Error (expr.Location, "`throw' in assignment source");
              true
            }
            else false

          | TypeConversion (e, t, _, _) =>
            #if CHECK_STV
              CheckSTV (t);
            #endif
            if (is_top && Manager.Options.GeneralTailCallOpt)
              Throws (e, allow_try, t.Fix ().Equals (e.FixedType()))
            else
              Throws (e, allow_try, false)

          | DebugInfo     (e, _)
          | MacroEnvelope (_, _, e, _)
          | Label         (_, e) =>
            Throws (e, allow_try, is_top)

          | Switch (idx, defl, opts) =>
            def indx_throws = Throws(idx, allow_try);
            mutable opts_throws = true;

            foreach ((_, e) in opts)
              opts_throws = Throws(e, allow_try, is_top) && opts_throws;

            def branches_throws = match (defl)
            {
              | Some(e) => Throws(e) && opts_throws
              | None    => opts_throws
            }

            indx_throws || branches_throws

          | Cache
          | CacheRef
          | LocalFunRef
          | PropertyMember
          | StaticPropertyRef
          | EventMember
          | StaticEventRef
          | ConstantObjectRef
          | Delayed
          | Error
          | DefFunctionsIn
          | Match
          | Block
          | SelfTailCall
          | Def
          | Use =>
            Util.cassert (Message.SeenError);
            false

          | MethodRef (e, meth, tp, _) =>
            NoThrowPlease (e);
            Util.cassert (meth.GetHeader().TypeParameters.Length == tp.Length, $"typarms check failed for $meth $(meth.GetHeader().TypeParameters) $tp");
            #if CHECK_STV
              foreach (tp in tp) CheckSTV (tp);
            #endif
            false
            
          | HasType (e, _t) =>
            NoThrowPlease (e);
            #if CHECK_STV
              CheckSTV (_t);
            #endif
            false
          
          | FieldMember (e, _)
          | TupleIndexer (e, _, _) =>
            NoThrowPlease (e);
            false
          
          | ArrayIndexer (obj, args) =>
            NoThrowPlease (obj);
            args.Iter (NoThrowPlease);
            false
            
          | PointerIndexer(obj, index) =>
            NoThrowPlease(obj);
            NoThrowPlease(index);
            false
            
          | MultipleAssign (assigns) =>
            foreach ((_, e) in assigns)
              NoThrowPlease (e);
            false

          | Array (args, dimensions) =>
            args.Iter (NoThrowPlease);
            dimensions.Iter (NoThrowPlease);
            false
            
          | Call (func, parms, _) =>
            NoThrowPlease (func);
            match (parms) {
              | p :: ps =>
                def fst = Throws (p.expr, allow_try);
                if (fst) 
                  Message.Error (p.expr.Location, "`throw' is not allowed here");
                else 
                  foreach (parm in ps) NoThrowPlease (parm.expr);
                  
              | [] => ()
            }
            if (is_top && Manager.Options.GeneralTailCallOpt) {
              expr.GenerateTail = true;
              foreach (p in parms)
                when (p.kind != ParmKind.Normal)
                  expr.GenerateTail = false;

              match (func) {
                | MethodRef (obj = obj)
                  when obj.NeedsConstrained || obj.FixedType().IsValueType =>
                  expr.GenerateTail = false;
                | _ => {}
              }

              expr.GenerateTail
            } else false
            
          | Tuple (exprs) =>
            exprs.Iter (NoThrowPlease);
            false

          | TryFinally (body, handler) =>
            _ = Throws (body, true);
            _ = Throws (handler, true);
            false

          | Try (body, cases) =>
            def walk_case (case) {
              | Try_case.Fault (handler)
              | Try_case.Catch (_, handler) =>
                _ = Throws (handler, true);
              | Try_case.Filter (_, filter, handler) =>
                _ = Throws (filter, true);
                _ = Throws (handler, true);
            }
            _ = Throws (body, true);
            foreach (case in cases)
              walk_case (case);
            false

          | StaticRef (_t, meth is IMethod, tp) =>
            Util.cassert (meth.GetHeader().TypeParameters.Length == tp.Length, $ "typarms check failed for $meth $(meth.GetHeader().TypeParameters) $tp");
            #if CHECK_STV
              CheckSTV (_t);
              foreach (tp in tp) CheckSTV (tp);
            #endif
            false

          | TypeOf | MethodOf | TExpr.CtorOf | TExpr.FieldOf | ClosureObjectOf | ClosureFieldOf
          | StaticRef
          | LocalRef
          | ImplicitValueTypeCtor
          | Literal
          | This
          | Base
          | OpCode
          | MethodAddress
          | DefaultValue =>
            false
        };

      expr.Throws = res;
      //log (STV, expr.loc, $ "throws } $(expr.GetType()) ");
      res
    }

    NeedsEmptyStack (expr : TExpr) : bool
    {
      def res = 
        match (expr) {
          | Throw (e) =>
            when (e != null)
              _ = NeedsEmptyStack (e);
            true

          | Goto (_, _) =>
            true // TODO: is this correct?

          | Label (_, e) =>
            _ = NeedsEmptyStack (e);
            true // TODO: is this correct?
            
          | TypeConversion (e, _, _, _)
          | Sequence (e, DebugInfo (null, _))
          | DebugInfo (e, _)
          | MacroEnvelope (_, _, e, _)
          | MethodRef (e, _, _, _)
          | HasType (e, _t)
          | FieldMember (e, _)
          | TupleIndexer (e, _, _) =>
            NeedsEmptyStack (e)

          | Sequence (e1, e2)
          | DefValIn (_, e1, e2)
          | Assign (e1, e2) =>
            def n1 = NeedsEmptyStack (e1);
            def n2 = NeedsEmptyStack (e2);
            n1 || n2

          | If (cond, e1, e2, _, _) =>
            def nc = NeedsEmptyStack (cond);
            def n1 = NeedsEmptyStack (e1);
            def n2 = NeedsEmptyStack (e2);
            nc || n1 || n2

          | Switch (idx, defl, opts) =>
            def nidx = NeedsEmptyStack (idx);
            def ndefl = match (defl) {
              | None => false
              | Some (e) => NeedsEmptyStack (e);
            }
            def nopts = opts.Map ((_idx, e) => NeedsEmptyStack(e));
            nidx || ndefl || nopts.Contains (true)

          | Cache
          | CacheRef
          | LocalFunRef
          | PropertyMember
          | StaticPropertyRef
          | EventMember
          | StaticEventRef
          | ConstantObjectRef
          | Delayed
          | Error
          | DefFunctionsIn
          | Match
          | Block
          | SelfTailCall 
          | Def
          | Use =>
            Util.cassert (Message.SeenError);
            false

          | ArrayIndexer (obj, args) =>
            def nobj = NeedsEmptyStack (obj);
            def nargs = args.Map (NeedsEmptyStack);
            nobj || nargs.Contains (true)
            
          | PointerIndexer(obj, index) =>
            def nobj = NeedsEmptyStack(obj);
            def narg = NeedsEmptyStack(index);
            nobj || narg
            
          | MultipleAssign (assigns) =>
            def nassigns = assigns.Map ((_, e) => NeedsEmptyStack (e));
            nassigns.Contains (true)

          | Array (args, dimensions) =>
            def nargs = args.Map (NeedsEmptyStack);
            def ndimensions = dimensions.Map (NeedsEmptyStack);
            nargs.Contains (true) || ndimensions.Contains (true)
            
          | Call (func, parms, _) =>
            def nfunc = NeedsEmptyStack (func);
            def nparms = parms.Map (parm => NeedsEmptyStack (parm.expr));
            nfunc || nparms.Contains (true)
            
          | Tuple (exprs) =>
            def nexprs = exprs.Map (NeedsEmptyStack);
            nexprs.Contains (true)

          | TryFinally (body, handler) =>
            _ = NeedsEmptyStack (body);
            _ = NeedsEmptyStack (handler);
            true

          | Try (body, cases) =>
            _ = NeedsEmptyStack (body);
            def walk_case (case) {
              | Try_case.Fault (handler)
              | Try_case.Catch (_, handler) =>
                _ = NeedsEmptyStack (handler);
              | Try_case.Filter (_, filter, handler) =>
                _ = NeedsEmptyStack (filter);
                _ = NeedsEmptyStack (handler);
            }
            foreach (case in cases)
              walk_case (case);
            true

          | TypeOf
          | FieldOf
          | CtorOf
          | MethodOf
          | ClosureObjectOf
          | ClosureFieldOf
          | StaticRef
          | LocalRef
          | ImplicitValueTypeCtor
          | Literal
          | This
          | Base
          | OpCode
          | MethodAddress
          | DefaultValue =>
            false
        }

      expr.NeedsEmptyStack = res;
      res
    }
    #endregion


    #region Unsharing and throw handling
    static UnShare (expr : TExpr) : TExpr
    {
      expr.Walk(DoUnShare)
    }
    
    static DoUnShare (expr : TExpr) : TExpr
    {
      // Message.Debug ($"unshare $expr");
      if (expr.Visited) {
        def expr = expr.Copy ();
        Util.cassert (!expr.Visited);
        UnShare (expr)
      } else {
        expr.Visited = true;
        null
      }
    }
    #endregion


    #region Top level stuff
    mutable current_try_block : int;
    label_blocks : Hashtable [int, int] = Hashtable ();
    
    Walk(expr : TExpr) : TExpr
    {
      expr.Walk(DoWalk)
    }

    WalkTry (expr : TExpr) : TExpr
    {
      def backup = current_try_block;
      try {
        current_try_block = Manager.GetNewId();
        Walk(expr)
      } finally {
        current_try_block = backup;
      }
    }

    DoWalk (expr : TExpr) : TExpr
    {
      // Message.Debug ($ "dowalk: $(expr.GetType()) $(expr.Type)");
      when (expr.ty != null && !(expr is TExpr.Call))
        NoDeepVoid (expr, expr.ty);
      mutable customTyperRes;
      if (typer != null &&
          typer.HasCustomTyperStage4 &&
          typer.TryCustomExpressionTyper(TypingStage.Stage4, expr, Walk, out customTyperRes))
        customTyperRes
      else
      {
        def res =
          match (expr) {
          | FieldMember (obj, fld) when ! expr.IsAssigned =>
            def obj = Walk(obj);
              
            // use address here for better performance
            when (! obj.NeedAddress && fld.DeclaringType.IsValueType && fld.IsMutable)
              _= obj.setNeedAddress (is_instance_ctor);
              
            TExpr.FieldMember (obj, fld)

          | Assign (DebugInfo (e1, _), e2)
          | Assign (e1, e2) =>
            e1.IsAssigned = true;

            def get_real_type(e : TExpr)
            {
              | LocalRef (decl) => decl.Type.Fix ()
              | ArrayIndexer
              | PointerIndexer
              | This
              | StaticRef => e.Type.Fix ()
              | FieldMember (obj, fld) =>
                // this is a rare case when compiler decided to assign to field though it is immutable
                // (like when the field had to be closurised inside the constructor)
                unless (fld.IsMutable ||
                        fld.Attributes %&& NemerleModifiers.CompilerMutable ||
                        obj is TExpr.This && is_instance_ctor)
                  Message.Error ("assignment to immutable field is allowed only inside code,"
                                 " which is executed inside constructor, but this field access"
                                 " is done through closure");
                e.Type.Fix ()
                
              | MacroEnvelope (_, _, expanded, _) => get_real_type(expanded)
              | _ => Util.ice ($ "wrong assignment target $e")
            }
            
            def real_type = get_real_type(e1);
            def e1 = Walk(e1);
            def e2 = Walk(e2);
            
            if (e1.Type.Fix ().IsValueType && ! e1.IsAddressable)
              Message.Error ("this expression is not a proper lvalue: "
                             "cannot load value type address");
            else
              unless (e1.setNeedAddress (is_instance_ctor))
                Message.Error ("this expression is not a proper lvalue: "
                               "cannot load value type address");
          
            if (NeedBoxing (real_type, e2))
              TExpr.Assign (InternalType.Void, e1, Box (real_type, e2))
            else 
              TExpr.Assign (InternalType.Void, e1, e2)

          | DefValIn (decl, e1, e2) =>
            def e1 = Walk(e1);
            def e2 = Walk(e2);
            if (decl.IsCache && decl.Type.Fix ().IsValueType) {
              _ = e1.setNeedAddress (is_instance_ctor);
              decl.IsManagedPtr = true;
              TExpr.DefValIn (decl, e1, e2)
            } else if (NeedBoxing (decl.Type.Fix (), e1))
              TExpr.DefValIn (decl, Box (decl.Type.Fix (), e1), e2)
            else
              TExpr.DefValIn (decl, e1, e2)
            
          | Call (ImplicitValueTypeCtor, [], _) =>
            null
          
          | Call (OpCode ("==.ref"), [p1, p2], _)
          | Call (OpCode ("!=.ref"), [p1, p2], _)
          | Call (OpCode ("=="), [p1, p2], _)
          | Call (OpCode ("!="), [p1, p2], _) =>
            p1.expr = Walk(p1.expr);
            p2.expr = Walk(p2.expr);
            when (p1.expr.FixedType() is FixedType.StaticTypeVarRef)
              p1.expr = Box (InternalType.Object, p1.expr);
            when (p2.expr.FixedType() is FixedType.StaticTypeVarRef)
              p2.expr = Box (InternalType.Object, p2.expr);
            expr

          // I hope other opcodes don't need boxing ...
          | Call (OpCode, _, _) => null
          
          | Call (origfunc, parms, is_tail) =>
            mutable func = Walk(origfunc);
            def meth =
              match (func) {
                | MethodRef (obj, meth, type_parms, nonvirt) =>
                  if (obj.FixedType() is FixedType.StaticTypeVarRef) {
                    obj.NeedsConstrained = true;
                    _ = obj.setNeedAddress (is_instance_ctor);
                  }
                  else
                  // we would kinda like address here
                  when (obj.Type.Fix ().IsValueType) {
                    def methty = meth.DeclaringType;
                    if (methty.IsValueType)
                      _ = obj.setNeedAddress (is_instance_ctor);
                    else {
                      // but maybe we should employ boxing
                      def obj = Box (methty.GetMemType (), obj);
                      func = TExpr.MethodRef (func.Type, obj, meth, type_parms, nonvirt);
                    }
                  }
                  
                  meth
                  
                | Base (meth) => meth
                | StaticRef (from, meth is IMethod, _) => 
                  NoDeepVoid (func, from);
                  meth
                | _ => Util.ice ($ "invalid thing called $func")
              }

            unless (parms.IsEmpty) {
              if (meth.DeclaringType.IsDelegate && meth.Name == ".ctor") {
                def parm = parms.Head;
                when (NeedBoxing (InternalType.Object, parm.expr))
                  parm.expr = Box (InternalType.Object, parm.expr);
              } else {
                mutable formals = 
                  origfunc.FixedType().FunReturnTypeAndParms (meth) [0];

                //Message.Debug ($"origfunc: $origfunc type=$(origfunc.FixedType())");
                Util.cassert (formals.Length == parms.Length,
                              $ "call to $meth $parms $formals");
                
                foreach (parm in parms) {
                  match (formals) { 
                    | f :: fs =>
                      def t = f.Fix ();
                      parm.expr = Walk(parm.expr);
                      if (parm.kind == ParmKind.Normal) {
                        if (parm.expr.FixedType() is FixedType.Void)
                          parm.expr =
                            TExpr.Sequence (
                              InternalType.Object,
                              parm.expr,
                              TExpr.Literal (InternalType.Object,
                                             Literal.Null ()))
                        else
                          when (NeedBoxing (t, parm.expr))
                            parm.expr = Box (t, parm.expr);
                      } else {
                        unless (parm.expr.IsAddressable && parm.expr.setNeedAddress (is_instance_ctor))
                          Message.Error ("a ref or out argument must be an assignable variable");
                      }
                      formals = fs;
                    | [] => Util.ice ();
                  }
                }
              }
            }

            if(meth.IsConditional && !meth.EvalConditions(the_method.GlobalEnv))
              TExpr.DefaultValue(expr.Type)
            else
              if (meth.ReturnType.Fix () is FixedType.StaticTypeVarRef
                && expr.FixedType() is FixedType.Void)
                Convert(expr.Type, TExpr.Call (InternalType.Object, func, parms, false))
              else
                TExpr.Call (func, parms, is_tail)

          | Array (parms, dimensions) =>
            def ty =
              match (expr.Type.Fix ()) {
                | FixedType.Array (t, _) => t.Fix ()
                | _ => Util.ice ()
              }
            mutable res = [];
            foreach (parm in parms) {
              def parm = Walk(parm);
              def parm =
                if (NeedBoxing (ty, parm))
                  Box (ty, parm)
                else parm;
              res = parm :: res;
            }
            TExpr.Array (res.Rev (), dimensions.Map (Walk))

          | TryFinally (body, handler) =>
            TExpr.TryFinally (WalkTry (body), Walk(handler))

          | Try (body, cases) =>
            def walk_case (case) {
              | Try_case.Fault (handler) =>
                Try_case.Fault (WalkTry (handler))
              | Try_case.Catch (exn, handler) =>
                Try_case.Catch (exn, WalkTry (handler))
              | Try_case.Filter (exn, filter, handler) =>
                Try_case.Filter (exn, WalkTry (filter), WalkTry (handler))
            }
            TExpr.Try (WalkTry (body), cases.Map (walk_case))

          | Goto as g =>
            g.try_block = current_try_block;
            null

          | Label (id, _) =>
            label_blocks [id] = current_try_block;
            null

          | DefFunctionsIn
          | Match
          | SelfTailCall =>
            Util.cassert (Message.SeenError);
            null

          | StaticRef
          | MethodRef =>
            /*
            foreach (t in tp)
              when (t.Fix ().Equals (InternalType.Void))
                Message.Error (expr.Location, $ "cannot use `void' in generic specifier $tp of $meth");
            null
            */
            FixupVoidTypeParameters(expr)
            
          | MacroEnvelope (_, _, expanded, _) =>
            DoWalk (expanded)

          | _ => null
        }
        //Message.Debug ($"do walk: $expr -> $res_expr");
        res
      }
    }
    #endregion
    
    private FixupVoidTypeParameters(expr : TExpr) : TExpr
    {
      mutable didFix = false;
      
      def mapTyvars(vars) {
        vars.Map(tp => if (tp.IsFixed && tp.Fix().Equals(InternalType.Void)) {
          didFix = true;
          InternalType.Unit;
        } else tp);
      }
      
      def fix_class_ref(cexpr: FixedType.Class) {
        | FixedType.Class(ti, tyargs) =>
          def newTyArgs = mapTyvars(tyargs);
          if (didFix) {
            FixedType.Class(ti, newTyArgs)
          } else cexpr
      }
      
      match(expr) {
        | StaticRef(expr, meth, tp) =>
          def newTyparms = mapTyvars(tp);
          def newExpr = fix_class_ref(expr);
          if (!didFix) null
          else TExpr.StaticRef(newExpr, meth, newTyparms)
            
        | MethodRef(expr, meth, tp, is_virt) as mr with ty = mr.ty =>
          def newTyparms = mapTyvars(tp);
          if (!didFix) null
          else TExpr.MethodRef(expr.Location, ty, expr, meth, newTyparms, is_virt);
            
        | _ => Util.ice("Tried to fixup a non-method reference typed expression. Please report this error to the Fireball team.")
      }      

    }
    
    
  }
}
