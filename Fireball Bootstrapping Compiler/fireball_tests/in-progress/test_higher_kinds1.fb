namespace Fireball.Tests {

  using System

  trait Monad[M[_]] {
    val Empty[A] : M[A]
    def Apply[A](a : A) : M[A]
    def Bind[A, B](func: A -> M[B]) : M[B]
    def FoldLeft[A, B](initialState: B, foldFunc: B * A -> B) : B
  }

  variant OptionMonadic[T] extends Monad[OptionMonadic] {
    case object None
    case record Some(value: T)

    val Empty = None
    def Apply(t : T) = Some(t)

    def Bind[B](func T -> OptionMonadic[B]) = match(this) {
      case Some(value) => func(value)
      case _ => None
    }

    def FoldLeft[B](initialState: B, foldFunc: B * T -> B) : B = match(this) {
      case Some(value) => foldFunc(initialState, value)
      case None => initialState
    }
  }

  class ListMonadic[T](initial: List[T]) extends List[T], Monad[ListMonadic] {
    def this() = this(new List())
    def this(initial: IEnumerable[T]) = this(new List(initial))

    val Empty = new ListMonadic[T]()
    def Apply(element: T) = new ListMonadic(new List(element))

    def Bind[B](func: T -> ListMonadic[B]) {
      def enumerateItems : IEnumerable[B] {
        foreach(element in initial) {
          foreach(item in func(element)) {
            yield return item
          }
        }      
      }
      new ListMonadic(enumerateItems)
    }

    def def FoldLeft[B](initialState: B, foldFunc: B * T -> B) : B {
      def foldleft_rec(state, lst) = match(lst) {
         case x :: xs => foldleft_rec(foldFunc(state, x), xs)
         case [] => state
      }

      foldleft_rec(initialState, initial)
    }
  }

  module MonadExtensions[M[_] : Monad[M[_]] {

    def Map[A, B] (this monad: M[A], mapFunc: A -> B) : M[B] = monad.Bind(item => monad.Apply(mapFunc(item)))
    
    def Filter[A] (this monad: M[A], filterPred: A -> bool) : M[A] = monad.Bind(item => {
      if (filterPred(item)) monad.Apply(item)
      else monad.Empty
    })

    def Flatten[A, B[_] : Monad[B[_]]] (this wrappedMonad: M[B[A]]) : M[A] = wrappedMonad.Bind(seq => seq.Bind(item => M[A].Apply(item)))

    def ForEach[A](this monad: M[A], sideEffect: A -> Unit) : Unit = ignore {
      monad.Bind(item => sideEffect(item); monad.Empty)
    }

    def CrossProduct[A, B](this monad: M[A], other: M[B]) : M[A * B] = monad.Bind(first => other.Bind(second => M[A * B].Apply( (first, second) )))
  }

  module Program {
    def Main(_: Array[String]) : void {
      //
    }
  }

}