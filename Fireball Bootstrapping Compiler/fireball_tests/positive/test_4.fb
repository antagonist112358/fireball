namespace Fireball.Tests {

	using System
	using System.Linq
	using SCG = System.Collections.Generic
	using Nemerle
	using Nemerle.Collections

	// Test type variables
	class SetOf[T](elements : list[T]) {
		val Head = elements.Head
		val Tail = elements.Tail
		val TailLength = Tail.Length		
	}	
	
	class TestsInitializationExpressions[T](sequence: SCG.IEnumerable[T]) {
	
		private val sequenceEmpty = if (sequence.Count() > 0) true else false
		
		val sizeNeeded : String = {
			NList.ToList(sequence).FoldLeft( "", (element, accStr) => {
				accStr + "," + element.ToString()
			})
		}
	
		if (sequence.Count() > 0)
			Console.WriteLine("Collection has elements")
			
		val start : int = 0
		
		val head : option[T] = if(!sequenceEmpty) Some(sequence.First()) else None()				
						
	}
	
	class FileOpener(files : SCG.IEnumerable[string], fileMode: System.IO.FileMode) {
		val hasInputFiles : bool = (files.Count() > 0)
		
		using System.IO
		
		var openFileHandles : list[FileStream] = []
		
		if (hasInputFiles) {
			val mode = fileMode
			foreach(file in files) {			
				if (File.Exists(file)) {
					openFileHandles = FileStream(file, mode) :: openFileHandles
				}
			}
			openFileHandles = openFileHandles.Reverse()
		}
		
		def HasFiles : bool = { openFileHandles.Length > 0 }
		
		def OpenFiles : SCG.IEnumerable[FileStream] with get{
			foreach(openFile in openFileHandles)
				yield openFile
		}
	}
}