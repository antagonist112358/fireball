namespace Fireball.Tests {

  class TestPF {
    val partialFunction : PartialFunction[object, string] = {
      case s : string => s
    }
	
    def PrintIfString(o: object) : void {
      using System.Console
      
      if(partialFunction.IsDefinedAt(o))
        WriteLine(partialFunction(o))
    }
  }
  
  module EnumerableExtensions {
  
	public def Collect[A, B](this seq: System.Collections.Generic.IEnumerable[A], pf: PartialFunction[A, B]) : System.Collections.Generic.IEnumerable[B] {
		foreach(item in seq) {
			if (pf.IsDefinedAt(item)) {
				yield pf(item)
			}
		}
	}
  
  }
  
  public module Program {
    
    public def Main(_: Array[string]) : void {
      val testArray = [ "Hello World" : object, 1 : object, 0.5d : object, typeof(string) : object ]
      val tester = TestPF()
      
      foreach(item in testArray)
        tester.PrintIfString(item)
		
	  val numericItems = testArray.Collect({
		case i : int => System.Convert.ToDouble(i)
		case d : double => d
	  })
	  
	  foreach(number in numericItems)
		System.Console.Write($"$number ")
		
	  System.Console.WriteLine("")
    }
  }
  
}

/*
BEGIN-OUTPUT
Hello World
1 0.5
END-OUTPUT
*/