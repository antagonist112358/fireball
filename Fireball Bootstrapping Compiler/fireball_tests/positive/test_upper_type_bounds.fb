namespace Fireball.Tests {

	using System
	
	// Simple class hierarchy
	class Super { virtual def Depth : int with get { 1 } }
	class Child1 extends Super { override def Depth : int with get { 2 } }
	class Child2 extends Super { override def Depth : int with get { 2 } }
	class SubChild1 extends Child1 { override def Depth : int with get { 3 } }

	// A class with an upper-type bound
	class ClassHierarchyPrinter[T : Super] {
		using System.Console
		
		def PrintHierarchy[U : T](collection : list[U]) : Unit {
			val cnt = 0
			foreach(item in collection) {
				val tabs = if (item.Depth > 1) new String('\t', item.Depth - 1) else String.Empty
				WriteLine(tabs + item.GetType().Name)
			}
		}
	}
	
	public module Program
	{
		def Main(args : Array[String]) : Unit {
			val objects = [
				new Super(), new Child2(), new Child1(), new SubChild1()
			]
			val children = [ new SubChild1(), new SubChild1() ]
			
			val printer = new ClassHierarchyPrinter[Super]()
			val printer2 = new ClassHierarchyPrinter[Super]()
			printer.PrintHierarchy(objects)
			printer2.PrintHierarchy(children)
		}
	}
}