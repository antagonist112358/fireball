namespace Fireball.Tests {
	
	using System
	using SGC = System.Collections.Generic
	
	module Traversable {
		def Transform[T, V](col: SGC.IEnumerable[T], transformer: T -> V) : SGC.IEnumerable[V] {
			foreach(item in col)
				yield transformer(item)
		}
	}
	
	// Like IEnumerable
	trait Traversable[T] : SGC.IEnumerable[T] {		
		using Traversable
		
		def Map[Out, OutCollection : SGC.IEnumerable[Out]](transformer : T -> Out)(resolved builder : CollectionBuilder[Out, OutCollection]) : OutCollection {
			builder.Build(Transform(this, transformer))
		}
		
		def GetNonGenericEnumerator() : System.Collections.IEnumerator implements System.Collections.IEnumerable.GetEnumerator { this.GetEnumerator() }
	}
	
	// CollectionBuilder
	trait CollectionBuilder[T, TOut : SGC.IEnumerable[T]] {
		def Build(elements : SGC.IEnumerable[T]) : TOut
	}
	
	// Simple List
	class SimpleList[T](elements: SGC.IEnumerable[T]) : Traversable[T] {
	
		private class SimpleListCollectionBuilder[U] : CollectionBuilder[U, SimpleList[U]] {
			def Build(elements : SGC.IEnumerable[U]) : SimpleList[U] { SimpleList(elements) }
		}
		
		def GetEnumerator() : SGC.IEnumerator[T] { elements.GetEnumerator() }		
	
		def FoldLeft[U](acc: U, foldFunc: U * T -> U) : U {
			def fold_rec(st, col) : U {
				match(col) {
					case head :: tail => fold_rec(foldFunc(st, head), tail)
					case [] => st
				}
			}
			
			fold_rec(acc, Nemerle.Collections.NList.ToList(elements))
		}
	
		resolve val SimpleListBuilder : CollectionBuilder[T, SimpleList[T]] = SimpleListCollectionBuilder()
	}
		
	// Program
	module Program {
	
		def Main(_ : Array[string]) : void {
			val lst = SimpleList([ "Hello", "World" ])
			val lstWithLength  = lst.Map(s => (s, s.Length))
			
			Console.WriteLine(lstWithLength.GetType())
			
			foreach(tup in lstWithLength)
				Console.WriteLine(tup)
				
			val sumOfLengths = lstWithLength.FoldLeft(0, (sum, tup) => {
				val (_, len) = tup
				len + sum
			})
			
			Console.WriteLine($"Total length of all strings: $sumOfLengths")
		}
	
	}
}