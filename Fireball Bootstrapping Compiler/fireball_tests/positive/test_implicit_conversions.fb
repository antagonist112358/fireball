namespace Fireball.Tests {

	using System

	class Vector(x: double, y: double) {
		def GetX() : double { x }
		def GetY() : double { x }
		def GetMagnitude() : double { Math.Sqrt(x*x + y*y) }
	}

	// Entry Point
	module Program {
		implicit def VectorToLength(vect: Vector) : double = vect.GetMagnitude()
		
		def Main(_: Array[String]) : Unit {
			val aVector = new Vector(3.0, 4.0)
			
			def takesDouble(d: double) : Unit {
				Console.WriteLine($"Vector Magnitude: $d")
			}
			
			// Test implicit conversion during method invocation (similar to C# 'implicit operator')
			takesDouble(aVector)
      
			// Test implicit conversion in expression (no equivalent)
			val finalResult = 2.00D * aVector  // Should convert this to a double using 'VectorToLength'
      
			assert(finalResult == 10.0D)
		}
	}

}