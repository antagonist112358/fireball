namespace Fireball.Tests {
	
	using System
	using System.Linq
	using SGC = System.Collections.Generic

	// CollectionBuilder
	trait CollectionBuilder[T, TOut : SGC.IEnumerable[T]] {
		def Build(elements : SGC.IEnumerable[T]) : TOut
	}
	
	// Like IEnumerable
	trait Traversable[From, T] extends SGC.IEnumerable[T] {
		
		def CommonString() : String { "Hello World" }
		
		public def GetNonGenericEnumerator() : System.Collections.IEnumerator implements System.Collections.IEnumerable.GetEnumerator { this.GetEnumerator() }
		
		public def Map[Out](transformer : T -> Out) : SGC.IEnumerable[Out] {
			TransformCollection(transformer)
		}
		
		def TransformCollection[Out](transformer : T -> Out) : SGC.IEnumerable[Out] {
			foreach(item in this)
				yield transformer(item)
		}
	}
	
	
	// Simple List
	class SimpleList[T](elements: SGC.IEnumerable[T]) extends Traversable[SimpleList[T], T] {
	
		private class SimpleListCollectionBuilder[U] extends CollectionBuilder[U, SimpleList[U]] {
			def Build(elements : SGC.IEnumerable[U]) : SimpleList[U] { SimpleList(elements) }
		}
		
		def GetEnumerator() : SGC.IEnumerator[T] { elements.GetEnumerator() }
				
	}

	module Program {
		def Main(_ : Array[String]) : void {
			val aList = SimpleList([5,4,3,2,1])
			
			val numsList = aList.Map(_.ToString())
			
			using System.Console		
			
			WriteLine(String.Join(", ", numsList.ToArray()))
			
		}
	}
}