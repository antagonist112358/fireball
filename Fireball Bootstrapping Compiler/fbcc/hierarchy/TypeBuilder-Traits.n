using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Compiler.SolverMacros;
using Nemerle.Compiler.Typedtree;
using Nemerle.Imperative;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Specialized;

using PT = Nemerle.Compiler.Parsetree;
using SCG = System.Collections.Generic;
using SC = System.Collections;

namespace Nemerle.Compiler
{
  /// <summary>
  /// Description of TypeBuilder_Traits.
  /// </summary>
  public partial class TypeBuilder : TypeInfo
  {
    private static MemberPublicBindingFlags = (BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static);
    private static InterfaceMethodBindingFlags = (BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Instance);
    
    internal DoRewriteTraitBody() : void
    {
      match (tydecl)
      {
        | TypeDeclaration.Trait => rewrite_trait_body()
        | _ => ()
      }
    }
    
    private rewrite_trait_body() : void 
    {
      
      // Keeps track of the implemented methods in the Trait
      def method_table = Hashtable();
        
      def collect_members_with_implementation() : list[PT.ClassMember.Function]
      {
        GetParsedMembers().FoldLeft([], (memb, acc) => match(memb) {
          | PT.ClassMember.Function(_, _, body) as fnc when !(body is FunBody.Abstract) => fnc :: acc
          | _ => acc
        }).Rev();
      }
      
      def collect_members_without_implementation() : list[PT.ClassMember]
      {
        GetParsedMembers().FoldLeft([], (memb, acc) => match(memb) {
          | PT.ClassMember.Function(_, _, body) when !(body is FunBody.Abstract) => acc
          | other => other :: acc
        }).Rev()
      }
      
      def rewrite_implementation_body(body : FunBody) : FunBody.Parsed
      {
        def makeSelfRef(loc: Nemerle.Compiler.Location) { PT.PExpr.Ref(loc, PT.Name("self")); }                      
        
        def makeSelfMember(loc: Nemerle.Compiler.Location, meth_ref: PT.PExpr.Ref) { match(meth_ref) {
          | PT.PExpr.Ref(name) => PT.PExpr.Member(loc, makeSelfRef(loc), name.MakeSplicable())
        }}
        
        def replace_implemented_method_call(in_call: PT.PExpr.Call) : PT.PExpr.Call {            
            match(in_call.func) {
              | PT.PExpr.Ref(pName) as meth_ref => match(method_table.Get(pName)) {
                  | Some(numArgs) when numArgs == in_call.parms.Length => 
                    // replace a method call "Method(a,b,...,n)" with "self.Method(a,b,...,n)"
                    PT.PExpr.Call(in_call.Location, makeSelfMember(in_call.Location, meth_ref), in_call.parms)
                  | _ => in_call
                }
              | _ => in_call
            }              
        }
        
        def replace_this(thisRef: PT.PExpr.This) { makeSelfRef(thisRef.Location) }
        
        def replace_exprs(_, is_post, e) {
          if(is_post) {
            match(e) {
              | PT.PExpr.This as thisRef => replace_this(thisRef)
              | PT.PExpr.Call as call when method_table.Count > 0 => replace_implemented_method_call(call)
              | other => other
            }
          } else e
        };
        
        match(body)
        {
          | Parsed(expr : Parsetree.PExpr) =>
            FunBody.Parsed(Util.locate (expr.Location, {
              Macros.TraverseExpr (None (), expr, false, replace_exprs)
            }))
          | _ => Util.ice("Tried to rewrite trait method implementation, but got a non-parsed function body. This should not happen. Please report this error to the Fireball team.");
        }        
      }      
      
      def create_static_implementation_function(fnc : PT.ClassMember.Function, implName: PT.Splicable, write_attr: bool = true, overwritten: bool = false) : PT.ClassMember.Function
      {
        def default_mods = (NemerleModifiers.Static | NemerleModifiers.Public);
        mutable attribute_mods = ({
          if (fnc.modifiers.mods %&& NemerleModifiers.Protected) [ <[ "protected" ]> ]
          else if (fnc.modifiers.mods %&& NemerleModifiers.Private) [ <[ "private" ]> ]
          else []
        }).ToArray();
        
        def mods = fnc.modifiers.Clone();
        mods.Modifiers = if (overwritten) (default_mods | NemerleModifiers.New) else default_mods;
        
        when(write_attr)
          mods.custom_attrs ::= <[ Fireball.Internal.TraitMethod( ..$attribute_mods ) ]>;
        
        def h = fnc.header;
        def tyvarNames = TyparmVars.Map(splicable => <[ $(splicable.GetName() : name) ]>);
        def typeName = <[$(PT.Name(this.Name): name) [ ..$tyvarNames ] ]>;
        def newParam = PT.PParameter(PT.Splicable.Name(PT.Name("self")), AttributesAndModifiers.Empty, typeName);
        // Rewrite the body
        def body = rewrite_implementation_body(fnc.body);
        
        def header = match(h.TypeParameters) {
          | a when a.Equals(PT.Typarms.Empty) => PT.PFunHeader(h.Location, implName, h.ReturnType, newParam :: h.Parameters);
          | typarms => PT.PFunHeader(h.Location, typarms, implName, h.ReturnType, newParam :: h.Parameters);
        };
        
        PT.ClassMember.Function(fnc.Location, implName, mods, header, [], body);
      }

      def is_public(fnc: PT.ClassMember.Function) : bool {
        fnc.modifiers.mods %&& NemerleModifiers.Public || fnc.modifiers.mods == NemerleModifiers.None
      }
      
      def rewrite_implementation_function(fnc: PT.ClassMember.Function, implName : PT.Splicable) : PT.ClassMember.Function
      {        
        def closure_str = implName.GetIdentifier();
        def add_attr_to_mods(mods) {
          mods.custom_attrs ::= <[ Fireball.Internal.DefaultImplementation( $(String.Format("{0}", closure_str)) ) ]>;
          mods
        }
        PT.ClassMember.Function(fnc.Location, PT.Splicable.Name(PT.Name(fnc.Name)), add_attr_to_mods(AttributesAndModifiers.Empty), fnc.header, [], FunBody.Abstract())
      }
      
      when(IsTrait)
      {
        def implementedMembers = collect_members_with_implementation();
        
        when (!implementedMembers.IsEmpty) {
          // Collect the methods which don't have implementations
          mutable newMembers = collect_members_without_implementation();
          
          // Build the implemented methods table
          foreach(memb in implementedMembers) {
            method_table.Add(memb.PName, memb.header.Parameters.Length)
          }
        
          foreach(memb in implementedMembers)
          {
            if (is_public(memb)) {
              def newName = PT.Splicable.Name(PT.Name($"_FB_$(memb.Name)_Impl"));
              newMembers += [create_static_implementation_function(memb, newName, false), rewrite_implementation_function(memb, newName) ];
            } else {
              def newName = PT.Splicable.Name(PT.Name(memb.Name, memb.Location));
              newMembers ::= create_static_implementation_function(memb, newName, true);              
            }
          }
        
          // Add the trait attribute
          this._ast.modifiers.custom_attrs ::= <[ Fireball.Internal.FireballTrait() ]>;
          
          // Rewrite the trait's Ast
          this._ast = PT.TopDeclaration.Trait(this._ast :> PT.TopDeclaration.Trait, newMembers);
        }
      }
      
    }
    
    private add_included_trait_methods() : void
    {
      
      def make_mods(accessWords: list[string], mods) : NemerleModifiers
      {
        match(accessWords) {
          | word :: tail => 
            if (word.ToUpper() == "PROTECTED")
              make_mods(tail, mods | NemerleModifiers.Protected)
            else if (word.ToUpper() == "PRIVATE")
              make_mods(tail, mods | NemerleModifiers.Private)
            else
              make_mods(tail, mods);            
          | _ => mods
        }
      }
      
      def make_call_params_from_typed(header: TFunHeader) : list[PT.PExpr]
      {
        header.Parameters
        // Remove 'self' reference
        .Filter(t => t.Name != "self")
        .Map(tp => <[ $(tp.AsParsed().name.GetName() : name) ]>)
      }

      def make_function_args(typed_params: list[TParameter], substFunc: TypeVar -> TypeVar) : list[PT.PParameter]
      {        
        typed_params.Tail.Map(tp => {
          def name3 = PT.Splicable.Name(tp.NameLocation, tp.GetParsedName());
          def new_ty = substFunc(tp.ty);
          def ty2 = PT.PExpr.TypedType(tp.ty_loc, new_ty);
          PT.PParameter(tp.Location, name3, ty2, tp.modifiers.Clone(), tp.PatternHack);
        })
      }
      
      def make_trait_impl(in_type: TypeInfo, trait_name: PT.PExpr, func_name: PT.Splicable, fnc: IMethod, tyArgs: list[FixedType], trait_attr: Fireball.Internal.TraitMethodAttribute) : PT.ClassMember.Function
      {
        def subst = match(GetMemType().args) {
          | [] => Subst()
          | args => MakeSubst(args);
        }
            
        match(in_type.GetMemType().args) {
          | [] => ()
          | args => 
            def subst2 = in_type.MakeSubst(args);
            subst.MergeReferences(subst2);
        }
            
        def (typarms, substFunc : TypeVar -> TypeVar) = 
          if (fnc.Header.TypeParameters.IsEmpty) 
            (PT.Typarms.Empty, (x) => x) 
          else {
            def copyTyparms = PT.CopyTypedTyparms(fnc.Header.TypeParameters, subst);
            (copyTyparms, copyTyparms.SubstituteTv)
          }
        
        def mods = make_mods(trait_attr.AccessModifiers.NToList(), NemerleModifiers.None);        
        def callparms = <[ this ]> :: make_call_params_from_typed(fnc.Header);
        def func_args = make_function_args(fnc.Header.Parameters, substFunc);
        def ty_args_actual = tyArgs.Map (x => <[ $(x : typed) ]>); 
        
        def decl = 
              <[decl:
                ..$(AttributesAndModifiers(mods, [])) $func_name (..$func_args ) : $(fnc.Header.ReturnType : typed) {
                  $trait_name. [..$ty_args_actual] . $func_name (..$callparms )
                }
              ]>;
              
        decl.header.TypeParameters = typarms;
        
        decl
      }
      
      def make_default_impl(in_type: TypeInfo, trait_name: PT.PExpr, func_name: PT.Splicable, tyArgs: list[FixedType], default_impl: Fireball.Internal.DefaultImplementationAttribute) 
      {
        match(in_type.GetMembers(MemberPublicBindingFlags).Filter(memb => memb.Name == default_impl.ImplementationName).Map(_ :> IMethod).HeadOption())
        {
          | Some(fnc) =>            
            def subst = match(GetMemType().args) {
              | [] => Subst()
              | args => MakeSubst(args);
            }
            
            match(in_type.GetMemType().args) {
              | [] => ()
              | args => 
                def subst2 = in_type.MakeSubst(args);
                subst.MergeReferences(subst2);
            }
            
            def (typarms, substFunc : TypeVar -> TypeVar) = 
              if (fnc.Header.TypeParameters.IsEmpty) 
                (PT.Typarms.Empty, (x) => x) 
              else {
                def copyTyparms = PT.CopyTypedTyparms(fnc.Header.TypeParameters, subst);
                (copyTyparms, copyTyparms.SubstituteTv)
              }
              
            def callparms = <[ this ]> :: make_call_params_from_typed(fnc.Header);
            def func_args = make_function_args(fnc.Header.Parameters, substFunc);
            def func_impl_name = PT.PExpr.Ref(PT.Name(default_impl.ImplementationName));
            def ty_args_actual = tyArgs.Map (x => <[ $(x : typed) ]>);           
            
            def decl = 
                <[ decl:
                  public virtual $func_name ( ..$func_args) : $(fnc.Header.ReturnType : typed) {
                    $trait_name . [..$ty_args_actual] . $func_impl_name ( ..$callparms )
                  }
                ]>;
            
            decl.header.TypeParameters = typarms;
            
            Some(decl)
            
          | None => 
            Message.Error($"could not find default implementation method for $(trait_name).$(func_name) called $(default_impl.ImplementationName).");
            None()
        }
      }
      
      unless(IsEnum || IsDelegate || IsTrait || IsStruct || IsAlias || IsModule)
      {
        foreach((_args, ifaceTy) in InterfacesToImplement().Map(a => (a.args, a.TypeInfo)))
        {        
          def args = _args.Collect(a => match(a) { | FixedType as a => Some(a); | _ => None() });
          
          when(ifaceTy.IsCustomAttributeDefined("Fireball.Internal.FireballTraitAttribute"))
          {
            def trait_name = LazyValue(() => ifaceTy.NamespaceNode.FullNameToExpr());
            //def trait_genParms = LazyValue(() => ifaceTy.Typarms);
            
            def instance_methods = ifaceTy.GetMembers(InterfaceMethodBindingFlags);
            def static_methods = ifaceTy.GetMembers(MemberPublicBindingFlags);
            
            // Go through all the instance members (which might have default implementations)
            foreach(ifaceMeth in instance_methods.Filter(memb => memb is IMethod && memb.IsCustomAttributeDefined("Fireball.Internal.DefaultImplementationAttribute")).Map(_ :> IMethod))
            {
              def default_attr = get_default_impl_attribute(ifaceMeth);
              def ifaceMethName = PT.Name(ifaceMeth.Name).MakeSplicable();
              match(make_default_impl(ifaceTy, trait_name, ifaceMethName, args, default_attr))
              {
                | Some(decl) => this.AddToAdditionalDecls(decl)                  
                | None => ()
              }
            }
            // Go through all the static trait members and look for [TraitMethod] attribute
            foreach(traitMeth in static_methods.Filter(memb => memb is IMethod && memb.IsCustomAttributeDefined("Fireball.Internal.TraitMethodAttribute")).Map(_ :> IMethod))
            {
              def trait_attr = get_trait_method_attribute(traitMeth);
              def traitMethName = PT.Name(traitMeth.Name).MakeSplicable();
              def decl = make_trait_impl(ifaceTy, trait_name, traitMethName, traitMeth, args, trait_attr);
              this.Define(decl);
            }
          }
        }
      }
    }
   
    private get_default_impl_attribute(from: IMethod) : Fireball.Internal.DefaultImplementationAttribute
    {
      match(from.GetModifiers().FindAttribute(Manager.InternalType.DefaultImplementationAttribute_tc, GlobalEnv))
      {
        | Some(expr) => match(expr)
          {
            | <[ $_ ($(str : string))]> => Fireball.Internal.DefaultImplementationAttribute(str)
            | _ => Util.ice("found proper default implementation attribute but then failed to read it.");      
          }
        | _ => Util.ice("found proper default implementation attribute but then failed to read it.");
      }
    }
    
    private get_trait_method_attribute(from: IMethod) : Fireball.Internal.TraitMethodAttribute
    {
      def parse_exprs(exprs, acc) : array[string] {
        match(exprs) {
          | PT.PExpr.Literal(Literal.String(val)) :: tail => parse_exprs(tail, val :: acc)
          | _ => acc.Rev().ToArray();
        }
      }
      
      match(from.GetModifiers().FindAttribute(Manager.InternalType.TraitMethodAttribute_tc, GlobalEnv))
      {
        | Some(expr) => match(expr)
          {
            | <[ $_ ([ ..$(wordsList) ])  ]> => match(wordsList)
              {
                | PT.PExpr.Literal(Literal.String(_)) :: _  => 
                  def args = parse_exprs(wordsList, []);
                  Fireball.Internal.TraitMethodAttribute(args)
                | _ => 
                Util.ice("found proper default implementation attribute but then failed to read it.");      
              }
            | <[ $_ ( $word ) ]> => match (word) {
                | PT.PExpr.Literal(Literal.String(str)) => Fireball.Internal.TraitMethodAttribute([str].ToArray())
                | _ => Util.ice("found proper default implementation attribute but then failed to read it.");                
              }
            | <[ $_ () ]> => Fireball.Internal.TraitMethodAttribute()
            | _ => 
            Util.ice("found proper default implementation attribute but then failed to read it.");      
          }
        | _ => 
        Util.ice("found proper default implementation attribute but then failed to read it.");
      }
    }
    
  }
}
