using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.Compiler
{
  /// <summary>
  /// Description of NListExtensions.
  /// </summary>
  internal module EnumerableExtensions
  {
    public HeadOption[T](this lst : IEnumerable[T]) : option[T] {
      if (lst.Count() > 0)
        Some(lst.First())
      else
        None()
    }
    
    public ZipTriple[A, B, C](this lst : list[A], bs: list[B], cs: list[C]): list[A * B * C] {
      when(bs.Length != lst.Length || cs.Length != lst.Length)
        throw ArgumentException($"All three lists must have the same number of elements (bs: $(bs.Length), cs: $(cs.Length))");      
      
      def loop(alist, blist, clist, acc) {
        match(alist) {
          | a :: atail => match(blist) {
            | b :: btail => match(clist) {
                  | c :: ctail => loop(atail, btail, ctail, (a, b, c) :: acc)
                  | _ => acc
                }
              | _ => acc
            }
          | _ => acc
        }
      }
            
      loop(lst, bs, cs, []).Reverse();
      
    }

    public Collect[A, B](this lst: list[A], testFunc: A -> option[B]) : list[B] {
      lst.Map(testFunc).Filter(_.HasValue).Map(_.Value)
    }
  }
}
