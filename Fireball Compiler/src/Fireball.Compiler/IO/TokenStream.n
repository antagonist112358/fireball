using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Fireball.Compiler.Lexer;

namespace Fireball.Compiler.IO
{
  /// <summary>
  /// Description of TokenStream.
  /// </summary>
  class TokenStream
  {
    tokens: List[Token];
    mutable index: int = 0;
    numTokens: int = 0;
      
    public this(toks: List[Token]) { tokens = toks; numTokens = toks.Count(); }
      
    public AllTokens : IEnumerable[Token] {
      get { tokens }
    }
      
    public PreviousTokens : IEnumerable[Token] {
      get {
        for(mutable idx = 0; idx < index; idx++) {
          yield tokens[idx];
        }
      }
    }
      
    public FutureTokens : IEnumerable[Token] {
      get {
        for(mutable idx = index; idx < numTokens; idx++) {
          yield tokens[idx];
        }
      }
    }
    
    public Peek : option[Token] {
      get if (index < numTokens) Some(tokens[index]) else None()
    }

    public PeekAhead(n : int = 0) : option[Token] {
      if (index < 0) throw ArgumentException("Must be a positive number or zero.", "n")
      else if (index + n >= numTokens) null
      else Some(tokens[index + n])
    }
    
    public Pop() : Token { def t = tokens[index]; index++; t }
    
    public Rewind(n: int = 1) : void {
      when (n < 1) throw ArgumentException($"Cannot rewind $n positions.");
      if (index - n < 0) throw IndexOutOfRangeException("Rewound past beginning of stream.")
      else index -= n
    }
    
    public EndOfStream : Boolean { get (index >= numTokens) }
  }
}
