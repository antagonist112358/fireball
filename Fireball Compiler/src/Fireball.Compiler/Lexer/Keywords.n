using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Fireball.Compiler.Lexer
{
  /// <summary>
  /// Description of Keywords.
  /// </summary>
  module Keywords
  {
      public BaseKeywords : array[String] = array [
        // Access levels
        "public",        "private",         "protected",    "internal"
        // Namespace and using
        ,"namespace",    "using"
        // Modifiers
        ,"abstract",     "static",          "overrides",    "virtual"
        // Class/method modifiers        
        ,"implicit",     "sealed"
        // Types
        ,"class",        "trait",           "variant",      "mixin"
        ,"event",        "module",          "record",       "void"
        // Methods and resolution
        ,"def",          "resolve",         "resolved"
        // Logic and pattern matching
        ,"match",        "if",              "else"
        // Loops
        ,"for",          "while",           "do",           "in"
        // Coroutines and async
        ,"yield",        "async",           "await"
        // Type implementation and extension
        ,"inherits",     "implements"
        // Typing and type aliasing
        ,"typeof",       "is",              "type"
        // Instantiation and variables
        ,"new",          "with",            "var",          "val"
        // Lazy evaluation, macros
        ,"lazy",         "macro"
        // Accessors
        ,"this",         "base",            "_"
        // Boolean
        ,"true",         "false"
        // Throw / try / catch / finally
        ,"try",          "catch",           "finally",      "throw"
        // Interoperability
        ,"extern"
      ];
      
      public ContextKeywords : Dictionary[String, List[String]] = Dictionary() <- [
        "match" = List()    <- [ "case", "as" ],
        "variant" = List()  <- [ "case" ],
        "property" = List() <- [ "get", "set" ],
        "event" = List()    <- [ "add", "remove" ],
        "macro" = List()    <- [ "syntax", "attribute" ]
      ];
      
      public ReservedOperators: array[String] = array [
        "_", ".", ":", "=", ">:", "<:", "=>", "->", "@", "$", "?", ",", "⇒", "→"
      ];
      
      public Operators: array[String] = array [
        // Arithmatic
        "+", "-", "/", "*", "%", "**",
        // Relational
        "==", "!=", ">=", "<=", ">", "<",
        // Logical
        "&&", "||", "!",
        // Bitwise            
        "&", "|", "^", "~", "<<", ">>",
        // Assignment
        "+=", "-=", "/=", "*=", "%=",
        "&=", "|=", "^=", "~=", "<<=", ">>=",
        // Miscellaneous
        "..", "<=>"
      ];
      
      public PostfixOperators : List[String] = List() <- [
        "++", "--"
      ];
      
      public OperatorChars: List[char] = List() <- [
        '~', '!', '@', '#', '$', '%', '^', '&', '*', '-', '+', '=',
        ':', '<', '>', '.', '?', '/', '|', '\\'
      ];
      
      public DataTypeAliases: List[String] = List() <- [
        "byte",  "sbyte",  "short",  "ushort",  "int",      "uint",
        "long",  "ulong",  "float",  "double",  "decimal",  "string",
        "any",   "bool",   "char",   "void"
      ];
  }
}
