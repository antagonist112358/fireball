using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Fireball.Compiler.Lexer;

namespace Fireball.Compiler.AST
{
  /// <summary>
  /// Description of Parameter.
  /// </summary>
  public class Parameter : DeclarationBase
  {
    public Type           : ParserExpression { get; set; }
    public DefaultValue   : option[ParserExpression] {get; set;}
    
    public this(name: Named, modifiers: FireballModifiers, attributes: Seq[CustomAttribute], typeExpr: ParserExpression)
    {
      this(name, modifiers, attributes, typeExpr, None());
    }
    
    public this(name: Named, modifiers: FireballModifiers, attributes: Seq[CustomAttribute], typeExpr: ParserExpression, defaultValue: option[ParserExpression])
    {
      base(name, modifiers, attributes);
      Type = typeExpr;
      DefaultValue = defaultValue;
    }

    public this(loc: Location, name: Named, modifiers: FireballModifiers, attributes: Seq[CustomAttribute], typeExpr: ParserExpression)
    {
      this(loc, name, modifiers, attributes, typeExpr, None());
    }
    
    public this(loc: Location, name: Named, modifiers: FireballModifiers, attributes: Seq[CustomAttribute], typeExpr: ParserExpression, defaultValue: option[ParserExpression])
    {
      base(loc, name, modifiers, attributes);
      Type = typeExpr;
      DefaultValue = defaultValue;
    }

    
  }
}
