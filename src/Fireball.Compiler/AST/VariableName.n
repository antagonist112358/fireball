using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.Linq;

using Fireball.Compiler.Lexer;

namespace Fireball.Compiler.AST
{
  /// <summary>
  /// Description of VariableName.
  /// </summary>
  public class VariableName : AstNode, IComparable[VariableName], IEquatable[VariableName]
  {
    private _id : string;
    private _color : int;
    
    public this(id: string, loc: Location)
    {
      base(loc);
      _id = id;
      _color = 0;      
    }
    
    public this(id: string)
    {
      this(id, Location.Default)
    }
    
    public Id : String
    {
      [DebuggerNonUserCode]
      get { _id }
    }
    
    public override ToString() : String { _id }
    
    public override GetHashCode() : int
    {
      unchecked { _id.GetHashCode() * (_color + 1) }
    }
    
    [Nemerle.OverrideObjectEquals]
    public Equals (other : VariableName) : bool
      implements System.IEquatable[VariableName].Equals
    {
      this.CompareTo (other) == 0
    }

    public CompareTo (other : VariableName) : int
    {
      def res = string.CompareOrdinal(_id, other._id);
      if (res == 0)
      {
        if (_color < 0 || other._color < 0)
          0
        else
          _color - other._color
      }
      else
        res
    }
    
  }
}
