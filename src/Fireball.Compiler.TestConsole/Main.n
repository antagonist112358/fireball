using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Reflection;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.Diagnostics;
using System.Threading;

namespace Fireball.Compiler.TestConsole
{

    module Program
    {
        
      static mutable debuggerMode = false;
        
      Main(args: array[String]) : void
      {
        
        when (args.Select(a => a.ToUpperInvariant()).Contains("-DEBUGGER")) {
          WriteLine("Waiting for debugger to attach...");
          /*
          while (!Debugger.IsAttached)
          {
            Thread.Sleep(100);
          } 
          */                    
          debuggerMode = Debugger.Launch();
          when (debuggerMode) Thread.Sleep(1000);
        }
          
        //RunTests.[LexerTests]();
        RunTests.[GroupBuilderTests]();
        
        unless (debuggerMode) {
          WriteLine("Press any key to exit.");
          _ = ReadKey(true);
        }
      }
  
      RunTests[T]() : void {
       // Get the type
       def type = typeof(T);
   
       // Enumerate all the test methods
       def testMethods = EnumerateTestMethodsFromType(type);
  
       // Print Type
       WriteLine($"Running Tests from $(type.Name)");
   
       // Go through each test method and invoke it
       foreach(method in testMethods) {
         def testName = method.Name;
         def retType = method.ReturnType;
         try {
           Write($"Running test: $testName ...");
           def retVal = method.Invoke(null, array[]);
           WriteLine("Passed");
           
           // Check for return type of List[String]
           when (retType == typeof(List[String])) {
             def output = retVal :> List[String];
             WriteLine("Test Output: ");
             foreach(outLine in output)
               WriteLine(outLine);
             // Newline
             WriteLine()             
           }
         } catch {
           | ex is TargetInvocationException => PrintExceptionTree(ex.InnerException)
           | ex is Exception => PrintExceptionTree(ex)
         }         
       }
   
      }
  
      EnumerateTestMethodsFromType(t: Type) : IEnumerable[MethodInfo] {    
        def methods = t.GetMethods();
        methods.Where(m => m.IsStatic && m.IsPublic).AsEnumerable();
      }
      
      PrintExceptionTree(ex: Exception) : void {
        def loop(e : Exception) {
          if(e != null) {
            WriteLine($"Caused by $(FormatExceptionLocation(e)): $(e.Message)");
            loop(e.InnerException)
          } else
            WriteLine();
        }
        
        WriteLine($"\n\tException $(FormatExceptionLocation(ex)): $(ex.Message)");
        loop(ex.InnerException);
      }
      
      FormatExceptionLocation(ex: Exception) : String {
        $"[$(ex.TargetSite.Name) @ line: $(GetExceptionLineNumber(ex))]"
      }
      
      GetExceptionLineNumber(ex: Exception) : int {
        // Get stack trace for the exception with source file information
        def st = System.Diagnostics.StackTrace(ex, true);
        // Get the top stack frame
        def frame = st.GetFrame(0);
        // Get the line number from the stack frame
        frame.GetFileLineNumber();          
      }
      
    }

}